!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE reStoreCMA 
#if defined (DOC)
*
***s/r reStoreCMA - restore Global array ROBDATA and MOBDATA. 
*
*Author    . Bin He (ARMA/MRB )
*
*Revision:
*      PURPOSE:  
*
*    ARGUMENTS:
*                INPUT:  NONE
*
*                OUTPUT: NONE
*
#endif
*
      USE mod4dv, only : l4dvar 
      USE obstag  
      use obsSpaceData_mod
      use profileData_mod 
#include "commvo.cdk"
      IMPLICIT NONE
#include "comlun.cdk"
#include "comdim.cdk"
#include "comdimo.cdk"
#include "comcst.cdk"
#include "cvcord.cdk"

! Declaire Local Variables. 
      REAL,ALLOCATABLE,DIMENSION(:,:) :: ROBDATA_tmp

      INTEGER,ALLOCATABLE,DIMENSION(:,:) :: MOBDATA_TMP 
      INTEGER,ALLOCATABLE,DIMENSION(:,:) :: MOBHDR_tmp 
      REAL*8,ALLOCATABLE,DIMENSION(:) :: RMTMOBS_tmp
      
      INTEGER :: i,j,iobs,ierr ,locObsize ,startindx,endindx 
      INTEGER :: idataend,jj,idata,ii,sizeMOBDATA  
      INTEGER ::sizeMOBHDR,sizeRMTMOBS  
!!---------------------------------------------------------------

!!1.      Release some memorys. 
      print*,'Entering restoreCMA'  

!!1.2 Added restore global array MOBHDR and RMTMOBS
!     MOBHDR and  RMTMOBS are used in "cmaabrp.ftn"
      ALLOCATE(MOBHDR_tmp(NCM_LET,NOBTOTP),STAT=ierr) 
      IF(ierr /= 0)  CALL ABORT3D(nulout,'Cannt allocate Mem. to MOBHDR_tmp,Abort!') 
      MOBHDR_TMP=0

      ALLOCATE(RMTMOBS_tmp(NOBTOTP),STAT=ierr) 
      IF(ierr /= 0)  CALL ABORT3D(nulout,'Cannt allocate Mem. to RMTMOBS_tmp,Abort!') 
      RMTMOBS_TMP=0.0D0 
! 1.3 retore global MOBHDR and RMTMOBS
      ii=1 
      DO i=1,NOBTOT
         iobs=locObsTag(i)
         MOBHDR_tmp(1:NCM_LET,iobs)=obsSpaceData%MOBHDR(1:NCM_LET,ii)
         RMTMOBS_tmp(iobs)=RMTMOBS(ii)
         ii=ii+1
      ENDDO  
      sizeMOBHDR=size(MOBHDR_tmp)
      sizeRMTMOBS=NOBTOTP
      CALL RPN_COMM_ALLReduce(MOBHDR_tmp,MOBHDR_tmp,sizeMOBHDR,"mpi_integer","mpi_sum","GRID",ierr)
      CALL RPN_COMM_ALLReduce(RMTMOBS_tmp,RMTMOBS_tmp,sizeRMTMOBS,"mpi_double_precision","mpi_sum","GRID",ierr)


!!      DEALLOCATE(RMTMOBS)
      deallocate(rmtmobs)
      allocate(rmtmobs(nobtotp))
!      CALL  HPDEALLC(PTMTMOBS,IERR,1)
!      CALL HPALLOC(PTMTMOBS,NOBTOTP,ierr,8) 
!      IF(ierr /= 0)  CALL ABORT3D(nulout,'Cannt allocate Mem. to RMTMOBS,Abort!') 
      RMTMOBS=RMTMOBS_tmp
      DEALLOCATE(RMTMOBS_tmp)
      

!!2.  Allocate memory to the temporol arrays.   
      ALLOCATE(MOBDATA_tmp(NCM_LBO,obsSpaceData%mxobstotal),STAT=ierr) 
      IF(ierr /= 0)  CALL ABORT3D(nulout,'Cannt allocate Mem. to MOBDATA_tmp,Abort!') 
      MOBDATA_tmp=0 

      ALLOCATE(ROBDATA_tmp(NCM_LBO,obsSpaceData%mxobstotal),STAT=ierr) 
      IF(ierr /= 0) CALL  ABORT3D(nulout, 'Cannt allocate Mem. to ROBDATA_tmp,Abort!') 
      ROBDATA_tmp=0.0 

!3.  Re-store the global array MOBDATA and ROBDATA   
      ii=0 
      DO i=1,nobtot
        iobs=locObsTag(i) 
        idata= obs_elem_i(obsSpaceData,'RLN ',iobs) 
        idataend = obs_elem_i(obsSpaceData,'NLV ',iobs) + idata -1 
        DO j=idata,idataend 
           ii=ii+1 
           MOBDATA_tmp(1:NCM_LBO,j)=obsSpaceData%MOBDATA(1:NCM_LBO,ii) 
           ROBDATA_tmp(1:NCM_LBO,j)=obsSpaceData%ROBDATA(1:NCM_LBO,ii) 
        ENDDO 
      ENDDO 
   !   
   ! Merge the global array MOBDATA_tmp and ROBDATA_tmp. 
      sizeMOBDATA=size(MOBDATA_tmp) 
      CALL RPN_COMM_ALLReduce(MOBDATA_tmp,MOBDATA_tmp,sizeMOBDATA,"mpi_integer","mpi_sum","GRID",ierr)
      CALL RPN_COMM_ALLReduce(ROBDATA_tmp,ROBDATA_tmp,sizeMOBDATA,"mpi_real","mpi_sum","GRID",ierr)
   !  

      call obs_deallocate(obsSpaceData)
      call obs_allocate(obsSpaceData,nobtotp,obsSpaceData%mxobstotal)

      obsSpaceData%ROBDATA=ROBDATA_tmp 
      DEALLOCATE(ROBDATA_tmp) 
      obsSpaceData%MOBDATA=MOBDATA_tmp
      DEALLOCATE(MOBDATA_tmp)  
      obsSpaceData%MOBHDR=MOBHDR_tmp
      DEALLOCATE(MOBHDR_tmp)
      
!!
      call obs_deallocateG(obsSpaceData)
      DEALLOCATE(locObsTag)
      IF(l4dvar) THEN
        DEALLOCATE(ObsTagLoc) 
        DEALLOCATE(locObsTag0) 
      ENDIF 
!!
      RETURN
      END
