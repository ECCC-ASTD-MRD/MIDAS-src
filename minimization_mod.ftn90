!--------------------------------------------------------------------------
! MODULE minimization (Minimization for variational assimilation.  prefix="min")
!
! Purpose: 
!
! Subroutines:
!    min_setup (public)
!
! Dependencies:
!
!--------------------------------------------------------------------------
MODULE minimization_mod
  use MathPhysConstants_mod
  use columnData_mod
  use obsSpaceData_mod
  use controlVector_mod
  use mpi
  use gridStateVector_mod
  use bmatrix_mod

  implicit none
  save
  private

  public              :: min_Setup, min_minvar,lvarqc,min_niter

  type struct_dataptr
    type(struct_obs),pointer        :: lobsSpaceData
    type(struct_columnData),pointer :: lcolumn
    type(struct_columnData),pointer :: lcolumng
  end type struct_dataptr

  logical             :: initialized = .false.
  real*8, pointer     :: dg_vbar(:)

  character(len=10)   :: crestart='wrmrestart'
  integer             :: nulout =6
  integer             :: nmtra,nwork,nsim3d
  integer             :: ni,nj,nt
  integer             :: min_niter

  ! namelist variables
  INTEGER N1GC,NVAMAJ,NIMPRES,NITERMAX,NSIMMAX,niterjob
  INTEGER NGRTEST,NGRANGE,SELECT0,BFGSB,IMODE3
  LOGICAL LRSTART,lxbar,lwrthess
  REAL*8 REPSG,EPSNEG,rdf1fac
  LOGICAL LVARQC
  integer :: nwoqcv

  NAMELIST /NAMMIN/N1GC,NVAMAJ,NIMPRES,NITERMAX,NSIMMAX,NITERJOB  
  NAMELIST /NAMMIN/NGRTEST,NGRANGE,SELECT0,BFGSB,IMODE3
  NAMELIST /NAMMIN/LRSTART,lxbar,lwrthess
  NAMELIST /NAMMIN/REPSG,EPSNEG,rdf1fac
  NAMELIST /NAMMIN/LVARQC,NWOQCV

CONTAINS

  SUBROUTINE min_setup(nvadim_in,ni_in,nj_in,nt_in)
    implicit none
    integer :: nvadim_in,ni_in,nj_in,nt_in

    integer :: ierr,nulnam
    integer :: fnom,fclos

    nsim3d=0 

    ni=ni_in
    nj=nj_in
    nt=nt_in

    ! set default values for namelist variables
    N1GC = 3
    NVAMAJ = 6
    NIMPRES =  5
    NITERMAX = 400
    RDF1FAC  = 0.25d0
    NITERJOB = -1
    NSIMMAX  = 500
    NGRTEST  = 0
    NGRANGE  = 10
    lwrthess =.true.
    lxbar    = .true.
    REPSG    = 1e-3
    LRSTART  = .FALSE.
    EPSNEG   = 1e-6
    SELECT0  = 0
    BFGSB    = 2
    IMODE3   = 0
    LVARQC   = .false.
    NWOQCV   = 5

    ! read in the namelist NAMMIN
    nulnam=0
    ierr=fnom(nulnam,'./flnml','FTN+SEQ+R/O',0)
    read(nulnam,nml=nammin,iostat=ierr)
    write(*,*) 'minimization: reading namelist, ierr=',ierr
    write(*,nml=nammin)
    ierr=fclos(nulnam)

    allocate(dg_vbar(nvadim_in),stat=ierr)
    if(ierr.ne.0) then
      write(*,*) 'minimization: Problem allocating memory! id=1',ierr
      call flush(6)
    endif
    dg_vbar(:)=0.0d0

    IF(N1GC.EQ.2) THEN
       NMTRA = 3*NVADIM_IN + NVAMAJ*(2*NVADIM_IN + 1)
    ELSE IF(N1GC.EQ.3)THEN
      NMTRA = 4*NVADIM_IN + NVAMAJ*(2*NVADIM_IN + 1)
    ELSE IF(N1GC.EQ.4)THEN
       NMTRA = 1 + NVAMAJ*(2*NVADIM_IN + 1)
       NWORK = 5*NVADIM_IN + NVAMAJ
    ELSE
       NMTRA = NVADIM_IN*2
    END IF
    WRITE(*,9401)N1GC, NVAMAJ,NVADIM_IN,NMTRA
 9401 FORMAT(4X,'N1GC = ',I2,4X,'NVAMAJ = ',I3,/5X,"NVADIM_IN =",1x,I14,3X,"NMTRA =",1X,I14)
    IF(N1GC.EQ.4) THEN
    WRITE(*,9402)NWORK
 9402 FORMAT(4X,'FOR N1CG1:',4X,'NWORK = ',I9)
    ENDIF

    IF (LVARQC) WRITE(*,*) 'VARIATIONAL QUALITY CONTROL ACTIVATED.'

    initialized=.true.

  END SUBROUTINE min_setup


  SUBROUTINE min_minvar(lnlvtov,lpcon,lrestart,cpconf,lcolumn,lcolumng,lobsSpaceData)
!
!Purpose:
!3D/4D VAR minimization
!
      IMPLICIT NONE

      type(struct_columnData),target :: lcolumn,lcolumng
      type(struct_obs),target :: lobsSpaceData
      type(struct_dataptr) :: dataptr 
      integer,allocatable :: dataptr_int(:) ! obs array used to transmit pointer
      integer :: nsize

      logical lnlvtov,lpcon,lrestart
      CHARACTER(len=*) :: cpconf

      INTEGER IZS(1),IZTRL(10)
      REAL ZZSUNUSED(1)

      real*8,allocatable :: vazg(:)
! no conjgrad      real*8,allocatable :: vatr1(:)
      real*8,allocatable :: vatra(:)

      REAL*8 DLDS(1)
      LOGICAL LLTEST,llvarqc, llstop, lldf1, lrdvatra, llvazx, llxbar

      INTEGER IMPRES, IMODE, ITERMAX, iterdone, ISIMMAX, INDIC, IITNOVQC, jj
      INTEGER IERR,ITERTOT,isimdone,isimtot,jdata, ISIMNOVQC
      integer ireslun,ibrpstamp,isim3d
      INTEGER IPRECON,ILEN
      REAL*8 ZJSP, ZXMIN, ZDF1, ZEPS0, ZEPS1
      REAL*8 DLGNORM, DLXNORM, ZJOTOV

      INTEGER FNOM,FCLOS, remove_c
      EXTERNAL FNOM,FCLOS
      EXTERNAL  N1QN3
      real*8 :: zeps0_000,zdf1_000
      integer :: iterdone_000,isimdone_000
      character(len=128) :: clfname

      logical bid_L

!     Additional parameters for minimization (N1CG1)
      real*8 xx,bb,a_not_use,r8_not_use,pj0
      integer in_mode(3),out_mode,i_not_use,nilm,ilm0(10),ilm1(10)
      integer i_pmat1,nl_stat, dl_bidon

! 
!     allocation (formerly automatic arrays)
!

      allocate(vazg(cvm_nvadim),stat=ierr)
      if(ierr.ne.0) then
        write(*,*) 'minimization: Problem allocating memory! id=2',ierr
        call flush(6)
      endif
      vazg(:)=0.0d0
! no conjgrad      allocate(vatr1(nmtra),stat=ierr)
!      if(ierr.ne.0) then
!        write(*,*) 'minimization: Problem allocating memory! id=3',ierr
!        call flush(6)
!      endif
!      vatr1(:)=0.0d0
      allocate(vatra(nmtra),stat=ierr)
      if(ierr.ne.0.or.nmtra.le.0) then
        write(*,*) 'minimization: Problem allocating memory! id=4',ierr
        write(*,*) 'minimization: nmtra=',nmtra
        call flush(6)
      endif
      vatra(:)=0.0d0


! ---------------------------------------
!     Initialization and allocation specific to (N1CG1)
!     -------------------------------------------------
      if( N1GC.EQ.4.and.lvarqc ) call abort3d(' MINIMIZE N1CG1 with lvarqc not done ')
      if( BFGSB.EQ.1 ) call abort3d(' MINIMIZE n1cg1: option not validated ')

!     Define i_pmat1 even if BFGSB.NE.1 (Otherwise abort in n1cg1)
!     ------------------------------------------------------------
      i_pmat1 = cvm_NVADIM**2

      in_mode(2) = 0
      in_mode(3) = IMODE3

      nilm = NVAMAJ + 3
      if( nilm.gt.10 .and. N1GC.EQ.4)  call abort3d(' MINIMIZE n1cg1: ilm0,ilm1 incorrect ')

!     -------------------------------------------------
! Prepare for non-linear processing of 'TO' data:
!    - fill PZDBLPRIM8 with Z" = H(xb_lr) + Z'
!                              = H(xb_lr) - H(xb_hr) + Z
      if ( lnlvtov ) then
        call tmg_start(60,'RTTOV')
        call tovs_obs ('LR',ZJOTOV,lcolumng,lobsSpaceData)
        call tmg_stop(60)
      endif

      ITERTOT  = 0
      isimtot = 0

      ZXMIN = epsilon(ZXMIN)

      ! recast pointer to obsSpaceData as an integer array, so it can be passed through n1qn3 to simvar
      dataptr%lobsSpaceData => lobsSpaceData
      dataptr%lcolumn       => lcolumn
      dataptr%lcolumng      => lcolumng
      nsize = size(transfer(dataptr,dataptr_int))
      allocate(dataptr_int(nsize+1),stat=ierr)
      if(ierr.ne.0) then
        write(*,*) 'minimization: Problem allocating memory! id=2',ierr
        call flush(6)
      endif

      dataptr_int(1)=nsize   ! store the size of converted pointer in the first element
      dataptr_int(2:(1+nsize))=transfer(dataptr,dataptr_int)

!     *    2. Set-up the minimization
!     .  -----------------------
      llvarqc = lvarqc

!     If minimization start without qcvar : turn off varqc to compute
!     innovations and test the gradients

      ireslun=0
      lldf1 = .true.
      if(niterjob /= -1 .and. lrestart) then
        if( N1GC.EQ.4 ) call abort3d(' MINIMIZE N1CG1 with restart not done ')
        write(*,*) 'Minimize : Restart mode'
        lrdvatra = .true.
        clfname = crestart
        imode = 2
        llvazx = .true.
        llxbar = .true.
      elseif (lpcon) then
        write(*,*) 'Minimize : Preconditioning mode'
        lrdvatra = .true.
        clfname = cpconf
        imode = 2
        llvazx = .false.
        llxbar = lxbar ! from namelist (default is .true.)
      else
        lrdvatra = .false.
        imode = 0
        zeps0 = repsg
      endif
      if(.not.(imode.eq.0.or.imode.eq.2)) call abort3d(' RW_VATRA not done ')

      if (lrdvatra) then
        ibrpstamp = obs_get_datestamp(lobsSpaceData) ! ibrpstamp is a I/O argument of rw_vatra

        if(n1gc.eq.3) then
          call rw_vatra (clfname,0,                            &
            isim3d,ibrpstamp,zeps0_000,zdf1_000,iterdone_000   &
            ,isimdone_000,iztrl,vatra,nmtra,dg_vbar,cvm_nvadim,    &
            cvm_vazx,nvamaj,llxbar,llvazx,n1gc,imode)

        elseif(n1gc.eq.4) then
          call rw_vatra (clfname,0,                            &
            isim3d,ibrpstamp,zeps0_000,zdf1_000,iterdone_000   &
            ,isimdone_000,ilm0,vatra,nmtra,dg_vbar,cvm_nvadim,     &
            cvm_vazx,nvamaj,llxbar,llvazx,n1gc,imode)
        endif

        if(niterjob /= -1 .and. lrestart) then
          ierr = remove_c(clfname)
          nsim3d = isim3d
          write(*,*) 'MINVAR : NSIM3D read from precon file: ',nsim3d 
          zeps0  = zeps0_000
          zdf1   = zdf1_000
          lldf1 = .false. ! don't re-compute df1 base on Cost function
          iterdone = iterdone_000
          isimdone = isimdone_000 - 1
          itermax = min(nitermax - iterdone + 1, niterjob)
          isimmax = nsimmax - isimdone + 1
          if (iterdone < nwoqcv) lvarqc = .false.
        else
          if (ibrpstamp == obs_get_datestamp(lobsSpaceData) .and. lxbar) then
            zeps0  = zeps0_000
            zdf1   = zdf1_000
            lldf1 = .false.     ! don't re-compute df1 base on Cost function
          else
            zeps0 = repsg
            lldf1 = .true.      ! Compute df1 base on Cost function
          endif
        endif
      endif

      if(niterjob == -1 .or. .not. lrestart) then
        iterdone = 0
        isimdone = 0
        if (niterjob /= -1) then
          itermax = min(nitermax,niterjob)
        else
          itermax = nitermax
        endif
        isimmax = nsimmax

        if (nwoqcv > 0) lvarqc = .false.

        if(ngrtest.ne.0) then
          call grtest2(simvar,cvm_nvadim,cvm_vazx,ngrange)
        endif

      endif

      zeps1 = zeps0

      itertot = iterdone
      isimtot = isimdone

!     *    2. Set-up the minimization
!     .  -----------------------
!
!     *    .   Test the gradient again at the initial point WITH PRECON
!     .   --------------------------------------------------------
!
!     .   2.1.4 Test the complete functional
!
!     *    .   2.2  Compute the value of J(X) and the gradient
!     .        at the initial point
!
      INDIC =2

      call simvar(indic,cvm_nvadim,cvm_vazx,zjsp,vazg,dataptr_int(1))

      if (lldf1) ZDF1     =  rdf1fac * ABS(ZJSP)

!     Put QCVAR logical to its original values

      lvarqc=llvarqc

      CALL PRSCAL(cvm_NVADIM,VAZG,VAZG,DLGNORM)
      DLGNORM = DSQRT(DLGNORM)
      CALL PRSCAL(cvm_NVADIM,cvm_VAZX,cvm_VAZX,DLXNORM)
      DLXNORM = DSQRT(DLXNORM)
      WRITE(*,*)' |X| = ', DLXNORM
      WRITE(*,FMT=9220) ZJSP, DLGNORM
 9220 FORMAT(/4X,'J(X) = ',G23.16,4X,'|Grad J(X)| = ',G23.16)

!     *    .   2.4. Constants required by MODULOPT
!     .        ------------------------------

      IMPRES   =  NIMPRES

!     *    3. Iterations of the minimization algorithm
!     .  ----------------------------------------


!     *    .   3.2 Starting point of the minimization written to
!     .       RPN standard output file

      IF(N1GC.EQ.3) THEN
      WRITE(*,FMT=9320)ZXMIN,ZDF1,ZEPS0,IMPRES,NITERMAX,NSIMMAX
      ELSEIF(N1GC.EQ.4) THEN
      WRITE(*,FMT=9321)ZXMIN,ZDF1,ZEPS0,EPSNEG,SELECT0,BFGSB,IMODE3,IMPRES,NITERMAX,NSIMMAX
      ENDIF

 9320 FORMAT(//,10X,' Minimization N1QN3 starts ...',/  &
          10x,'DXMIN =',G23.16,2X,'DF1 =',G23.16,2X,'EPSG =',G23.16  &
          /,10X,'IMPRES =',I3,2X,'NITER = ',I3,2X,'NSIM = ',I3,//  &
          ,15X,'-STARTING POINT IS WRITTEN TO FILE ...')
 9321 FORMAT(//,10X,' Minimization N1CG1 starts ...',/  &
          10x,'DXMIN =',G23.16,2X,'DF1 =',G23.16,2X,'EPSG =',G23.16,2X,'EPSNEG =',G23.16,/,  &
          10x,'SELECT0 = ',I3,2X,'BFGSB = ',I3,2X,'IMODE3 = ',I3,  &
          /,10X,'IMPRES =',I3,2X,'NITER = ',I3,2X,'NSIM = ',I3,2X,'NHESS = ',I3,//  &
          ,15X,'-STARTING POINT IS WRITTEN TO FILE ...')

!     *    .   3.3 Beginning the minimization
!     .       --------------------------

      llstop = .false.
      if (lvarqc .and. nwoqcv > 0 .and. iterdone < nwoqcv) then
        iitnovqc = min(nwoqcv - iterdone,itermax)
        isimnovqc = isimmax
        lvarqc = .false.
        call tmg_start(21,'QN')
        call n1qn3(simvar, dscalqn, dcanonb, dcanab, cvm_nvadim, cvm_vazx,  &
            zjsp,vazg, zxmin, zdf1, zeps1, impres, nulout, imode       &
            ,iitnovqc, isimnovqc ,iztrl, vatra, nmtra, dataptr_int(1), zzsunused  &
            ,dlds)
        call tmg_stop (21)

        isimnovqc = isimnovqc - 1
        itermax = itermax - iitnovqc + 1
        isimmax = isimmax - isimnovqc + 1

        itertot = itertot + iitnovqc
        isimtot = isimtot + isimnovqc

        zeps1 = zeps0/zeps1
        zeps0 = zeps1
        lvarqc = .true.

        if (imode == 4 .and. itertot < nitermax) then
          imode = 2
          INDIC = 2
          call simvar(indic,cvm_nvadim,cvm_vazx,zjsp,vazg,dataptr_int(1))
        else
          llstop = .true.
          call abort3d(" MINIMIZATION_MOD: n1qn3 mode ne 4")
        endif
      endif

      if (.not. llstop) then

        if(N1GC.EQ.3) then

          call tmg_start(21,'QN')
          call n1qn3(simvar, dscalqn, dcanonb, dcanab, cvm_nvadim, cvm_vazx,  &
              zjsp,vazg, zxmin, zdf1, zeps1, impres, nulout, imode,   &
              itermax,isimmax, iztrl, vatra, nmtra, dataptr_int(1), zzsunused,   &
              dlds)
          call tmg_stop (21)
          itertot = itertot + itermax
          isimtot = isimtot + isimmax

          zeps1 = zeps0/zeps1

        elseif(N1GC.EQ.4) then

!       Set VAZB = - VAZG (Valid only if VAZX = ZERO)
!       ---------------------------------------------
!modular1          VAZB = - VAZG

!       Keep constant term in pj0 (Valid only if VAZX = ZERO)
!       -----------------------------------------------------
          pj0 = ZJSP

!       Print cost function at iter 0 (Valid only if VAZX = ZERO)
!       ---------------------------------------------------------
          WRITE(*,FMT=9700) 0,0.d0+pj0,pj0,0.d0
 9700     FORMAT (4x,"n1cga:",i5,1x,e15.8,1x,e15.8,1x,e15.8)

          if(imode.eq.0) in_mode(1) = 0
          if(imode.eq.2) in_mode(1) = 1

!modular1          call n1cg1 (mvprod,cvm_NVADIM,cvm_VAZX,VAZB,a_not_use,pj0,xx,bb,.false
!modular1     &         .,EPSNEG,zeps1,itermax,impres,NULOUT,in_mode,out_mode
!modular1     &         ,VWORK,NWORK,imode,r8_not_use,i_not_use,NVAMAJ,ilm0,nilm
!modular1     &         ,VATRA,NMTRA,BFGSB,r8_not_use,i_pmat1,  NVAMAJ,ilm1,nilm
!modular1     &         ,VATR1,NMTRA,SELECT0,izs,zzsunused,dlds)

          zeps1 = zeps0/zeps1
          zeps0 = zeps1

          imode = out_mode

          isimmax = itermax

          itertot = itertot + itermax
          isimtot = isimtot + isimmax

!       Call 4D-Var simulator without gradient to get ZJSP
!       --------------------------------------------------
          INDIC = 2
          call simvar(indic,cvm_nvadim,cvm_vazx,zjsp,vazg,dataptr_int(1))

        endif

      endif

!     if lrestart remain false... postmin will execute
      lrestart = .false.
      ireslun=0
      if (niterjob /= -1 .and. itertot < nitermax .and. imode == 4) then
        clfname = crestart
!     Careful: lrestart before minimisation was used to trigger a
!     read of restart file... now it is set to .true. to avoid
!     execution of postmin.
        lrestart = .true.
      else
        do jdata = 1, cvm_nvadim
          dg_vbar(jdata) = cvm_vazx(jdata) + dg_vbar(jdata)
        enddo
        clfname = 'pm1q'
      endif

      if(lwrthess) then
        if(n1gc.eq.3) then
        call rw_vatra (clfname,1,  &
          nsim3d,obs_get_datestamp(lobsSpaceData),zeps1,zdf1,itertot,isimtot,  &
          iztrl,vatra,nmtra,  &
          dg_vbar,cvm_nvadim,  &
          cvm_vazx,nvamaj,.true.,llvazx,n1gc,imode)

! no conjgrad        elseif(n1gc.eq.4) then
!            call rw_vatra (clfname,1,  &
!            nsim3d,obs_get_datestamp(lobsSpaceData),zeps1,zdf1,itertot,isimtot,  &
!            ilm1,vatr1,nmtra,  &
!            dg_vbar,cvm_nvadim,  &
!            cvm_vazx,nvamaj,.true.,llvazx,n1gc,imode)
          endif
      endif

      WRITE(*,FMT=9500) imode,iterdone,itertot-iterdone,itertot,isimdone,isimtot-isimdone,isimtot
 9500 FORMAT(//,20X,20('*'),2X    &
          ,/,20X,'              Minimization ended with MODE:',I4  &
          ,/,20X,' Number of iterations done in previous job:',I4  &
          ,/,20X,'          Number of iterations in this job:',I4  &
          ,/,20X,'                Total number of iterations:',I4  &
          ,/,20X,'Number of simulations done in previous job:',I4  &
          ,/,20X,'         Number of simulations in this job:',I4  &
          ,/,20X,'               Total number of simulations:',I4)

      min_niter = itertot

!     *    4. Test the gradient at the final point if NGRTEST=1
!     .  ------------------------------------

 400  CONTINUE

      if ((NGRTEST.ne.0 .and. IMODE.ne.4 .and. .not. LRSTART)) then
        WRITE(*,FMT=9400)
 9400   FORMAT(//,12X,40('**'),/,12X,'TESTING THE GRADIENT AT THE FINAL POINT',/,40('**'))

        call grtest2(simvar,cvm_nvadim,cvm_vazx,ngrange)

      END IF

      deallocate(vazg,stat=ierr)
!no conjgrad      deallocate(vatr1,stat=ierr)
      deallocate(vatra,stat=ierr)

      RETURN
  END SUBROUTINE min_minvar


  SUBROUTINE simvar(na_indic,na_dim,da_v,da_J,da_gradJ,dataptr_int)
    implicit none
    ! Argument declarations
    integer :: na_dim ! Dimension of the control vector in forecast error coraviances space
    ! Value of na_indic
    ! Note: 1 and 4 are reserved values for call back from m1qn3.
    !       For direct calls use other value than 1 and 4.
    ! =1 No action taken; =4 Both J(u) and its gradient are computed.
    ! =2 Same as 4 (compute J and gradJ) but do not interrupt timer of the
    !    minimizer.
    ! =3 Compute Jo and gradJo only.
    integer :: na_indic 
    real*8  :: da_J ! Cost function of the Variational algorithm
    real*8, dimension(na_dim) :: da_gradJ ! Gradient of the Variational Cost funtion
    real*8, dimension(na_dim) :: da_v ! Control variable in forecast error covariances space
    integer :: dataptr_int(1)  ! integer work area used to transmit a pointer to the obsSpaceData
    !
    ! Purpose: Implement the Variational solver as described in
    ! Courtier, 1997, Dual formulation of four-dimentional variational assimilation,
    ! Q.J.R., pp2449-2461.
    !
    ! Author : Simon Pellerin *ARMA/MSC October 2005
    !          (Based on previous versions of evaljo.ftn, evaljg.ftn and evaljgns.ftn).
    !
    ! Local declaration
    integer :: nl_ilev, nl_err, nsize
    real*8, dimension(na_dim) :: dl_v
    real*8 :: dl_Jb, dl_Jo
    type(struct_gsv) :: statevector
    type(struct_dataptr) :: dataptr
    type(struct_obs),pointer :: lobsSpaceData
    type(struct_columnData),pointer :: lcolumn,lcolumng

    ! Convert the integer array dataptr_int back into a pointer to the obsSpaceData
    nsize=dataptr_int(1)
    dataptr=transfer(dataptr_int(2:(1+nsize)),dataptr)
    lobsSpaceData => dataptr%lobsSpaceData
    lcolumn       => dataptr%lcolumn
    lcolumng      => dataptr%lcolumng

    if (na_indic .eq. 1 .or. na_indic .eq. 4) call tmg_stop (21)

    call tmg_start(31,'SIMVAR')
    if (na_indic .ne. 1) then ! No action taken if na_indic == 1
       nsim3d = nsim3d + 1

       IF(mpi_myid == 0) write(*,*) 'Entering simvar for simulation ',nsim3d

       dl_v(:) = da_v(:) + dg_vbar(:)      !dg_vbar = sum(v) of previous outer-loops

       call tmg_start(74,'JB')       
       dl_Jb = dot_product(dl_v,dl_v)/2.d0  ! Computation of background term of cost function
       call tmg_stop(74)

       call gsv_setVco(statevector,col_getVco(lcolumng))
       call gsv_allocate(statevector,ni,nj,nt)

       call bmat_sqrtB(da_v,na_dim,statevector)

       call oda_L(statevector,lcolumn,lcolumng,lobsSpaceData)  ! put in column H_horiz dx

       call tmg_start(2,'OBS-OPER') !

       call oda_H(lcolumn,lcolumng,lobsSpaceData)  ! Modify NCM_OMA ! H_vert H_horiz dx = Hdx

       call tmg_start(95,'RES')
       call oda_res(lobsSpaceData)  ! Modify NCM_OMA : Hdx-d
       call tmg_stop(95)
     
       call tmg_start(96,'SQRTRM1')
       call oda_sqrtRm1(lobsSpaceData,'OMA ','OMA ')  ! Modify NCM_OMA : R**-1/2 (Hdx-d)
       call tmg_stop(96)
     
       call tmg_start(97,'ODA_JO')
       call oda_Jo(lobsSpaceData)  ! Temporarily store Jobs in NCM_OMI : R**-1 (Hdx-d)**2
       call tmg_stop(97)
     
       IF (LVARQC) THEN          
          call tmg_start(98,'QC_VAR')
          call oda_qcv(lobsSpaceData)  ! Store modify Jobs in NCM_OMI : -ln((gamma-exp(J))/(gamma+1))  
          call tmg_stop(98)
       endif

       dl_Jo = 0.d0
       call oda_sumJo(lobsSpaceData,dl_Jo)
       da_J = dl_Jb + dl_Jo
       if (na_indic .eq. 3) then
          da_J = dl_Jo
          IF(mpi_myid == 0) write(*,FMT='(6X,"SIMVAR:  JO = ",G23.16,6X)') dl_Jo
       else
          da_J = dl_Jb + dl_Jo
          IF(mpi_myid == 0) write(*,FMT='(6X,"SIMVAR:  Jb = ",G23.16,6X,"JO = ",G23.16,6X,"Jt = ",G23.16)') dl_Jb,dl_Jo,da_J
       endif

       call tmg_start(96,'SQRTRM1')
       call oda_sqrtRm1(lobsSpaceData,'OMI ','OMA ')  ! Modify NCM_OMI : R**-1 (Hdx-d)
       call tmg_stop(96)

       IF (LVARQC) THEN
          call tmg_start(98,'QC_VAR')
          call oda_qcvad(lobsSpaceData)
          call tmg_stop(98)
       endif

       call col_zero(lcolumn)
       call oda_HT(lcolumn,lcolumng,lobsSpaceData)   ! Put in column : H_vert**T R**-1 (Hdx-d)
     
       call tmg_stop(2)

       call oda_LT(statevector,lcolumn,lcolumng,lobsSpaceData)  ! Put in statevector H_horiz**T H_vert**T R**-1 (Hdx-d)

       da_gradJ = 0.d0
       call bmat_sqrtBT(da_gradJ,na_dim,statevector)
       call gsv_deallocate(statevector)

       if (na_indic .ne. 3) then
          da_gradJ(:) = dl_v(:) + da_gradJ(:)
       endif

    endif
    call tmg_stop(31)
    if (na_indic .eq. 1 .or. na_indic .eq. 4) call tmg_start(21,'QN')

  END SUBROUTINE simvar


  SUBROUTINE DSCALQN(KDIM,PX,PY,DDSC,KZS, PZS, DDZS)
    !***s/r DSCALQN: inner product in canonical space
    !*    ------------------- 
    !**    Purpose: interface for the inner product to be used
    !*     .        by the minimization subroutines N1QN3.
    !*
    !*Arguments
    !*     i : KDIM      : dimension of the vectors
    !*     i : PX, PY    : vector for which <PX,PY> is being calculated
    !*     o : DDSC      : result of the inner product
    !*     --------------
    !*     i :  KZS(1)   : unused working space for INTEGER  (not used)
    !*     i :  PZS(1)   : unused working space for REAL     (not used)
    !*     i : PDZS(1)   : unused working space for REAL*8   (not used)
    IMPLICIT NONE

    REAL PZS(1)
    INTEGER KZS(1)
    REAL*8  DDZS(1)

    INTEGER KDIM
    REAL*8 PX(KDIM), PY(KDIM)
    REAL*8 DDSC

    CALL PRSCAL(KDIM,PX,PY,DDSC)
    RETURN
  END SUBROUTINE DSCALQN


  SUBROUTINE PRSCAL(KDIM,PX,PY,DDSC)
    !***s/r PRSCAL: inner product in canonical space
    !*
    !*Author  : P. Gauthier *ARMA/AES  January 27, 1993
    !**    Purpose: evaluation of the inner product used in the
    !*     .        minimization
    !*
    !*Arguments
    !*     i : KDIM     : dimension of the vectors
    !*     i : PX, PY   : vector for which <PX,PY> is being calculated
    !*     o : DDSC     : result of the inner product
    !*
    !* Implicit argument: SCALP(KDIM) assumed to be unity

    IMPLICIT NONE

    INTEGER KDIM, J, RR, IERR
    REAL*8 PX(KDIM), PY(KDIM)
    REAL*8 DDSC,TEMPO
    REAL*8 ZPY(KDIM)

    call tmg_start(79,'PRSCAL')

    DDSC = 0.
    DO J = 1, KDIM
      DDSC = DDSC + PX(J)*PY(J)
    ENDDO

    call tmg_stop(79)

    RETURN
  END SUBROUTINE PRSCAL


  SUBROUTINE DCANAB(KDIM,PY,PX,KZS,PZS,PDZS)
    !***s/r DCANAB  - Change of variable associated with the canonical
    !*     .         inner product
    !*
    !*Author    JM Belanger CMDA/SMC   May 2001
    !*     .    Double precision version based on single precision CTCAB.
    !*          Refered to  as dummy argument DTCAB by N1QN3 minimization
    !*          package.
    !*    -------------------
    !**    Purpose: to compute PX = L^-1 * Py with L related to the inner product
    !*     .        <PX,PY> = PX^t  L^t  L PY
    !*     .        (see the modulopt documentation aboutn DTCAB)
    !*     NOTE: L is assumed to be the identity!
    IMPLICIT NONE

    INTEGER KDIM, KZS(1)
    REAL PZS(1)
    REAL*8 PX(KDIM), PY(KDIM)
    REAL*8 PDZS(1)

    INTEGER JDIM

    DO JDIM = 1, KDIM
      PX(JDIM) = PY(JDIM)
    ENDDO

    RETURN
  END SUBROUTINE DCANAB


  SUBROUTINE DCANONB(KDIM,PX,PY,KZS,PZS,PDZS)
    !***s/r DCANONB  - Change of variable associated with the canonical
    !*     .          inner product
    !*
    !*Author    JM Belanger CMDA/SMC  May 2001
    !*     .    Double precision version based on single precision CANONB.
    !*          Refered to as dummy argument DTONB by N1QN3 minimization
    !*          package.
    !*    -------------------
    !**    Purpose: to compute PY = L * PX with L related to the inner product
    !*     .        <PX,PY> = PX^t  L^t  L PY
    !*     .        (see the modulopt documentation about DTONB)
    !*     .

    IMPLICIT NONE
    INTEGER KDIM, KZS(1)
    REAL PZS(1)
    REAL*8 PX(KDIM), PY(KDIM)
    REAL*8 PDZS(1)

    INTEGER JDIM

    call tmg_start(78,'DCANONB')
    DO JDIM = 1, KDIM
      PY(JDIM) = PX(JDIM)
    ENDDO
    call tmg_stop(78)

    RETURN
  END SUBROUTINE DCANONB


  SUBROUTINE rw_vatra (cfname,status,                       &
          nsim3d,kbrpstamp,zeps1,zdf1,itertot,isimtot,      &
          nztrl,vatra,nmtra,                                &
          vazxbar,nvadim,                                   &
          vazx,nvamaj,lxbar,lvazx,k1gc,imode)

    !***s/r RW_VATRA  - Read-Write VAZXBAR and VATRA on file
    !*
    !*
    !*Author  : M. Tanguay RPN January 2005
    !*
    !*Arguments
    !*     i   cfname    : precon file
    !*     i   status    : = 0 if READ, = 1 if WRITE
    !*     i   nsim3d    : Number of simulations in N1QN3
    !*     io  kbrpstamp : Date
    !*     i   zeps1     : Parameter in N1QN3
    !*     i   zdf1      : Parameter in N1QN3
    !*     i   itertot   : Parameter in N1QN3
    !*     i   isimtot   : Parameter in N1QN3
    !*     i   nztrl     : Localisation parameters for Hessian
    !*     i   vatra     : Hessian
    !*     i   nmtra     : Size of Hessian
    !*     i   vazxbar   : Vazx of previous loop
    !*     i   nvadim    : Dimension of vazxbar
    !*     i   vazx      : Current state of the minimization
    !*     i   nvamaj    : number of updates in Hessian
    !*     i   lxbar     : read in vaxzbar if dates are compatible
    !*     i   lvazx     : Logical to read vazx
    !*     i   k1gc      : Minimizer ID (2: m1qn2, 3: m1qn3, 4: m1gc)
    !*     o   imode     : If status=0, set imode=0 (no prec) or 2 (prec)
    IMPLICIT NONE

    logical lxbar,lvazx

    integer status,kbrpstamp,nsim3d,itertot,isimtot
    integer, dimension(10), target :: nztrl
    integer nmtra, nvadim, nvamaj, k1gc, imode
    real*8 zeps1,zdf1
    real*8, dimension(nvadim), target :: vazxbar, vazx
    real*8, dimension(nmtra), target :: vatra
    real*4, allocatable :: vatra_r4(:)

    integer ibrpstamp,ireslun, ierr, fnom, fclos
    integer :: ivadim, imtra, itrunc
    integer :: jvec, i1gc,ictrlvec,ii
    integer, dimension(10), target, save :: iztrl

    character(len=*) :: cfname
    character(len=3) :: cl_version

    if(status.eq.0) then
      write(*,*) 'Read  VATRA in RW_VATRA'
    elseif(status.eq.1) then
      write(*,*) 'Write VATRA in RW_VATRA'
    else
      call abort3d(" RW_VATRA: status not valid ")
    endif

    ireslun=0

    !*     Read Hessian
    !*     ------------

    if(status.eq.0) then

      ierr = fnom(ireslun,cfname,'FTN+SEQ+UNF+OLD+R/O',0)

      ! Checking version number
      read (ireslun) cl_version,i1gc
      if(trim(cl_version) /= 'V2') then
        if(trim(cl_version) == 'V3') then
          write(*,*) 'RW_VATRA: using single precision Hessian'
        else
          call abort3d(" RW_VATRA: invalid Hessian version")
        endif
      endif
      if (i1gc == 3 .and. i1gc == k1gc) then
        write(*,*) trim(cl_version),' M1QN3'
      elseif (i1gc == 4 .and. i1gc == k1gc) then
        write(*,*) trim(cl_version),' N1CG1'
      else
        write(*,*) 'Version, n1gc =',trim(cl_version),i1gc
        call abort3d(" RW_VATRA: Inconsistant input hessian")
      endif

      rewind (ireslun)

      read(ireslun) cl_version,i1gc,nsim3d,ibrpstamp,zeps1,zdf1,itertot,isimtot,ivadim,itrunc
      read(ireslun) imtra,iztrl

      if(nmtra.ne.imtra.or.nvadim.ne.ivadim) then
        call abort3d(" RW_VATRA : ERROR, size of Hessian not consistent")
      endif

      if(k1gc.eq.3) ictrlvec = 2*nvamaj+1
      if(k1gc.eq.4) ictrlvec = 2*nvamaj

      write(*,*) 'RW_VATRA : reading Hessian'
      if(trim(cl_version) == 'V2') then
        do jvec = 1, ictrlvec
          read(ireslun) vatra((jvec-1)*nvadim+1:jvec*nvadim)
        enddo
      elseif(trim(cl_version) == 'V3') then
        allocate(vatra_r4(nvadim))
        do jvec = 1, ictrlvec
          read(ireslun) vatra_r4(1:nvadim)
          vatra((jvec-1)*nvadim+1:jvec*nvadim)=real(vatra_r4(1:nvadim),8)
        enddo
        deallocate(vatra_r4)       
      endif

      if(k1gc.eq.4) read(ireslun) vatra(ictrlvec*nvadim+1:ictrlvec*nvadim+1)
      imode = 2

      if(k1gc.eq.3) then
        nztrl(1) = nvadim
        nztrl(2) = 0
        nztrl(3) = nvamaj
        nztrl(4) = iztrl(4)
        nztrl(5) = iztrl(5)
      elseif(k1gc.eq.4) then
        do ii=1,10
          nztrl(ii) = iztrl(ii)
        enddo
      endif

      if(ibrpstamp == kbrpstamp .and. lxbar) then
        write(*,*) 'RW_VATRA : reading vazxbar'
        read(ireslun) vazxbar

        if(lvazx) then
          write(*,*) 'RW_VATRA : reading vazx'
          read(ireslun) vazx
        endif

      else
        kbrpstamp = ibrpstamp
      endif

      ierr = fclos(ireslun)

      !*     Write Hessian
      !*     -------------

    elseif(status.eq.1) then
      if(mpi_myid.eq.0) then
        ierr = fnom(ireslun,cfname, 'FTN+SEQ+UNF' , 0)
        cl_version = 'V3'
        itrunc=0
        write(ireslun) cl_version,k1gc,nsim3d,kbrpstamp,zeps1,zdf1,itertot,isimtot,nvadim,itrunc
        write(ireslun) nmtra,nztrl
        if(k1gc.eq.3) ictrlvec = 2*nvamaj+1
        if(k1gc.eq.4) ictrlvec = 2*nvamaj
        allocate(vatra_r4(nvadim))
        do jvec = 1, ictrlvec
          vatra_r4(1:nvadim)=real(vatra((jvec-1)*nvadim+1:jvec*nvadim),4)
          write(ireslun) vatra_r4(1:nvadim)
        enddo
        deallocate(vatra_r4)
        if(k1gc.eq.4) write(ireslun) vatra(ictrlvec*nvadim+1:ictrlvec*nvadim+1)

        write(ireslun) vazxbar
        write(ireslun) vazx

        ierr = fclos(ireslun)
      endif ! myid==0
    else
      call abort3d(" RW_VATRA: status not valid ")
    endif

    return
  END SUBROUTINE RW_VATRA


END MODULE minimization_mod
