!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE SUALOBSB(KULOUT)
#if defined (DOC)
*
***s/r SUALOBS  - Memory allocation for obs. related arrays
*
*Author  : P. Gauthier *ARMA/AES  June 9, 1992
*Revision: Bin HE      *ARMA/MRB  Oct. 2009 
*            - Implemented MPI to 3DVAR 
*             
*Arguments
*     i   KULOUT: unit used for optional printing
*
#endif
C
      use profileData_mod 
#include "commvo.cdk"
      IMPLICIT NONE
*implicits
#include "comdim.cdk"
#include "comcva.cdk"
#include "comdimo.cdk"

#include "commvo1.cdk"
#include "commvog.cdk"
#include "comstate.cdk"
*
      INTEGER KULOUT, IERR
      INTEGER ILEN, ILENU, ilen8
      INTEGER iloc, jvar
      EXTERNAL HPALLOC
C
      WRITE(KULOUT,FMT='(//,6(" ***********"))')
      WRITE(KULOUT,*)'     SUALOBSB:  Memory allocation of the',
     S     ' observation arrays'
      WRITE(KULOUT,FMT='(6(" ***********"))')
C
C*    1. Model state at observation stations
C     .  -----------------------------------
C
 100  CONTINUE

      ILEN = NFLEV*NOBTOT
!      CALL HPALLOC( PTPPOBS,MAX(ILEN,1),IERR,8)
      allocate(RPPOBS(nflev,nobtot))
      rppobs(:,:)=0.0d0

!      CALL HPALLOC( PTMTHOBS,MAX(NMXOBS,1),IERR,8)
      allocate(RMTHOBS(nmxobs))
      rmthobs(:)=0.0d0
!      CALL HPALLOC( PTMTMOBS,MAX(NMXOBS,1),IERR,8)
      allocate(RMTMOBS(nmxobs))
      rmtmobs(:)=0.0d0

      ILEN = NKGDIMO*NOBTOT
!      CALL HPALLOC( PTMOBS,MAX(ILEN,1),IERR,8)
      allocate(gomobs(nkgdimo,nobtot))
      gomobs(:,:)=0.0d0
!      CALL HPALLOC(PTMOBS1,MAX(ILEN,1),IERR,8)
      allocate(gomobs1(nkgdimo,nobtot))
!      CALL HPALLOC(PTMOBSG,MAX(ILEN,1),IERR,8)
      allocate(gomobsg(nkgdimo,nobtot))

      ilen = nflev*nobtot*2
!      call hpalloc(ptltv,max(ilen,1),IERR,8)
      allocate(oltv(2,nflev,nobtot))
      oltv(:,:,:)=0.0d0
      ilen = nflev*nobtot
!      call hpalloc(pttapfac,max(ilen,1),IERR,8)
      allocate(rtapfac(nflev,nobtot))
      if(chum.eq.'ES') then   ! WILL WE EVER NEED CHUM=ES???
        ilen = nflev*nobtot
!        call hpalloc(ptestdg,max(ilen,1),IERR,8)
!        call hpalloc(ptdlnesg,max(ilen,1),IERR,8)
!        call hpalloc(ptrqgfac,max(ilen,1),IERR,8)
        allocate(estdg(nflev,nobtot))
        allocate(dlnesg(nflev,nobtot))
        allocate(rqgfac(nflev,nobtot))
      else
        ilen = nflev*nobtot*3
!        call hpalloc(ptlq2es,max(ilen,1),IERR,8)
        allocate(ollq2es(3,nflev,nobtot))
      endif
C
!      PTOMU  = -1
!      PTOMU1  = -1
!      PTOMUG  = -1
C
!      PTOMV  = -1
!      PTOMV1  = -1
!      PTOMVG  = -1
C
!      PTOMT  = -1
!      PTOMT1  = -1
!      PTOMTG  = -1
C
!      PTOMQ  = -1
!      PTOMQ1  = -1
!      PTOMQG  = -1
C
!      PTOMGZ = -1
!      PTOMGZ1 = -1
!      PTOMGZG = -1
C
!      PTOMOZ = -1
!      PTOMOZ1 = -1
!      PTOMOZG = -1
C
!      PTOMTR = -1
!      PTOMTR1 = -1
!      PTOMTRG = -1
c
!      ptomes = -1
!      ptomes1 = -1
!      PTOMESG = -1
C
!      PTOMPS = -1
!      PTOMPS1 = -1
!      PTOMPSG = -1
C
!      PTOMTGR = -1
!      PTOMTGR1 = -1
!      PTOMTGRG = -1
C
!      profileData%gomobs=>gomobs

      iloc = 1
      do jvar = 1,jpnvarmax
        if(jvar .eq. nouu) then
          NMVOPOSIT(nouu) = iloc
          if(NMVOEXIST(nouu).eq.1) then
            gomu => gomobs(iloc:(iloc+nflev-1),:)
            gomu1 => gomobs1(iloc:(iloc+nflev-1),:)
            gomug => gomobsg(iloc:(iloc+nflev-1),:)
!            profileData%gomu => gomobs(iloc:(iloc+nflev-1),:)
!            PTOMU  = LOC(GOMOBS(iloc,1))
!            PTOMU1  = LOC(GOMOBS1(iloc,1))
!            PTOMUG  = LOC(GOMOBSG(iloc,1))
            iloc = iloc + nflev
          end if
        elseif(jvar .eq. novv) then
          NMVOPOSIT(novv) = iloc
          if(NMVOEXIST(novv).eq.1) then
            gomv => gomobs(iloc:(iloc+nflev-1),:)
            gomv1 => gomobs1(iloc:(iloc+nflev-1),:)
            gomvg => gomobsg(iloc:(iloc+nflev-1),:)
!            profileData%gomv => gomobs(iloc:(iloc+nflev-1),:)
!            PTOMV  = LOC(GOMOBS(iloc,1))
!            PTOMV1  = LOC(GOMOBS1(iloc,1))
!            PTOMVG  = LOC(GOMOBSG(iloc,1))
            iloc = iloc + nflev
          end if
        elseif(jvar .eq. nogz) then
          NMVOPOSIT(nogz) = iloc
          if(NMVOEXIST(nogz).eq.1) then
            gomgz => gomobs(iloc:(iloc+nflev-1),:)
            gomgz1 => gomobs1(iloc:(iloc+nflev-1),:)
            gomgzg => gomobsg(iloc:(iloc+nflev-1),:)
!            profileData%gomgz => gomobs(iloc:(iloc+nflev-1),:)
!            PTOMGZ = LOC(GOMOBS(iloc,1))
!            PTOMGZ1 = LOC(GOMOBS1(iloc,1))
!            PTOMGZG = LOC(GOMOBSG(iloc,1))
            iloc = iloc + nflev
          end if
        elseif(jvar .eq. noq) then
          NMVOPOSIT(noq) = iloc
          if(NMVOEXIST(noq).eq.1) then
            gomq => gomobs(iloc:(iloc+nflev-1),:)
            gomq1 => gomobs1(iloc:(iloc+nflev-1),:)
            gomqg => gomobsg(iloc:(iloc+nflev-1),:)
!            profileData%gomq => gomobs(iloc:(iloc+nflev-1),:)
!            PTOMQ  = LOC(GOMOBS(iloc,1))
!            PTOMQ1  = LOC(GOMOBS1(iloc,1))
!            PTOMQG  = LOC(GOMOBSG(iloc,1))
            iloc = iloc + nflev
          end if
        elseif(jvar .eq. nott) then
          NMVOPOSIT(nott) = iloc
          if(NMVOEXIST(nott).eq.1) then
            gomt => gomobs(iloc:(iloc+nflev-1),:)
            gomt1 => gomobs1(iloc:(iloc+nflev-1),:)
            gomtg => gomobsg(iloc:(iloc+nflev-1),:)
!            profileData%gomt => gomobs(iloc:(iloc+nflev-1),:)
!            PTOMT  = LOC(GOMOBS(iloc,1))
!            PTOMT1  = LOC(GOMOBS1(iloc,1))
!            PTOMTG  = LOC(GOMOBSG(iloc,1))
            iloc = iloc + nflev
          end if
        elseif(jvar .eq. nooz) then
          NMVOPOSIT(nooz) = iloc
          if(NMVOEXIST(nooz).eq.1) then
            gomoz => gomobs(iloc:(iloc+nflev-1),:)
            gomoz1 => gomobs1(iloc:(iloc+nflev-1),:)
            gomozg => gomobsg(iloc:(iloc+nflev-1),:)
!            profileData%gomoz => gomobs(iloc:(iloc+nflev-1),:)
!            PTOMOZ = LOC(GOMOBS(iloc,1))
!            PTOMOZ1 = LOC(GOMOBS1(iloc,1))
!            PTOMOZG = LOC(GOMOBSG(iloc,1))
            iloc = iloc + nflev
          end if
        elseif(jvar .eq. notr) then
          NMVOPOSIT(notr) = iloc
          if(NMVOEXIST(notr).eq.1) then
            gomtr => gomobs(iloc:(iloc+nflev-1),:)
            gomtr1 => gomobs1(iloc:(iloc+nflev-1),:)
            gomtrg => gomobsg(iloc:(iloc+nflev-1),:)
!            profileData%gomtr => gomobs(iloc:(iloc+nflev-1),:)
!            PTOMTR = LOC(GOMOBS(iloc,1))
!            PTOMTR1 = LOC(GOMOBS1(iloc,1))
!            PTOMTRG = LOC(GOMOBSG(iloc,1))
            iloc = iloc + nflev
          end if
        elseif(jvar .eq. noes) then
          NMVOPOSIT(noes) = iloc
          if(NMVOEXIST(noes).eq.1) then
            gomes => gomobs(iloc:(iloc+nflev-1),:)
            gomes1 => gomobs1(iloc:(iloc+nflev-1),:)
            gomesg => gomobsg(iloc:(iloc+nflev-1),:)
!            profileData%gomes => gomobs(iloc:(iloc+nflev-1),:)
!            PTOMES = LOC(GOMOBS(iloc,1))
!            PTOMES1 = LOC(GOMOBS1(iloc,1))
!            PTOMESG = LOC(GOMOBSG(iloc,1))
            iloc = iloc + nflev
          end if
        elseif(jvar .eq. nops) then
          NMVOPOSIT(nops) = iloc
          if(NMVOEXIST(nops).eq.1) then
            gomps => gomobs(iloc:iloc,:)
            gomps1 => gomobs1(iloc:iloc,:)
            gompsg => gomobsg(iloc:iloc,:)
!            profileData%gomps => gomobs(iloc:iloc,:)
!            PTOMPS = LOC(GOMOBS(iloc,1))
!            PTOMPS1 = LOC(GOMOBS1(iloc,1))
!            PTOMPSG = LOC(GOMOBSG(iloc,1))
            iloc = iloc + 1
          end if
        elseif(jvar .eq. notg) then
          NMVOPOSIT(notg) = iloc
          if(NMVOEXIST(notg).eq.1) then
            gomtgr => gomobs(iloc:iloc,:)
            gomtgr1 => gomobs1(iloc:iloc,:)
            gomtgrg => gomobsg(iloc:iloc,:)
!            profileData%gomtgr => gomobs(iloc:iloc,:)
!            PTOMTGR = LOC(GOMOBS(iloc,1))
!            PTOMTGR1 = LOC(GOMOBS1(iloc,1))
!            PTOMTGRG = LOC(GOMOBSG(iloc,1))
            iloc = iloc + 1
          end if
        endif
      enddo
C
C*    .   1.1 Auxiliary state
C     .       ---------------
C
 110  CONTINUE
C
      ILENU  = NMXOBS*NFLEV
      WRITE(KULOUT,FMT='(/,"Arrays in COMMVO (COMMVO1) are allocated",
     S     " the following space:")')
      WRITE(KULOUT,FMT=9100)ILEN,ILENU, NMXOBS
 9100 FORMAT("   GOMOBS :",I6,10x
     S     ," (GOMU, GOMV,GOMGZ,GOMQ):",I10
     S     ," (GOMPS,GOMTGR):",I10)
C
      RETURN
      END


