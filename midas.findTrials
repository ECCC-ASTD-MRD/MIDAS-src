#!/usr/bin/env python3

import sys
import datetime
import argparse
import unittest

VERSION = 'alpha'

def get_command_line():
    """
    Parse the command line and perform all the checks.
    """
    parser = argparse.ArgumentParser(description="plot timings extracted by 'getTimings.py'")
    parser.add_argument("--trialfrequency", "-t", dest="trialFrequency",
                            help="The frequency of trials in hours (may be fractional)",
                            action="store", type=float, default=None)
    parser.add_argument("--trialoutputfrequency", "-o", dest="trialOutputFrequency",
                            help="The frequency of trials in minutes (must be an integer, default is 15 minutes)",
                            action="store", type=int, default=15)
    parser.add_argument("--assimilationwindowwidth", "-w", dest="width",
                           help="Width of the assimilation window in hours (may be fractional)",
                           action="store", type=float, default=None)
    parser.add_argument("--date", "-d", dest="date",
                           help="Date of the analysis in format 'YYYYMMDDHH'",
                           action="store", type=str, default=-1)
    parser.add_argument("--unittest", "-u", dest="unittest",
                           help="Ignore any other arguments and run the UnitTests",
                           action="store_true", default=False)
    parser.add_argument("--verbose", "-v", dest="Verbosity",
                         help="Explain what is being done", action="store_true", default=False)
    parser.add_argument("--version", "-V", dest="version",
                           help="Output version information and exit",
                           action="store_true", default=False)

    options = parser.parse_args()

    if options.Verbosity:
        print('get_command_line: options')
        print('\t' + options)

    if options.version:
        print("midas.findTrials version: " + VERSION)
        sys.exit(0)

    return options

class Test_findTrials(unittest.TestCase):
    def test_6hrs(self):
        trials = findTrials(6,360,6,'2018050212')
        trials_ref = ['2018050206_360m']
        self.assertEqual(trials,trials_ref,"The list of trials is not the one expected")

    def test_6hrs_15m(self):
        trials = findTrials(6,15,6,'2018050212')
        trials_ref = ['2018050206_%dm' % ext for ext in range(180,541,15)]
        self.assertEqual(trials,trials_ref,"The list of trials is not the one expected")


def findTrials(trialFrequency,trialOutputFrequency,width,date):
    pass

if __name__ == "__main__":
    tOptions = get_command_line()

    if tOptions.unittest:
        ## On doit effacer les arguments puisqu'ils sont traites par le module 'unittest'
        del sys.argv[1:]
        ## On ajoute l'option '--verbose' pour le module 'unittest'
        sys.argv.append('--verbose')
        unittest.main()        
    else:
        trial_list = findTrials(trialFrequency = tOptions.trialFrequency, \
                                trialOutputFrequency = tOptions.trialOutputFrequency, \
                                width = tOptions.width, date = tOptions.date)
