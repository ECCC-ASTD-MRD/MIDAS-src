#!/bin/bash

## Ce script est lanc√© par `midas.reunir_obs` et fait le rassemblage des
## observations pour une seule famille.

set -ex

CCLARGS=${CCLARGS:-cclargs_lite}

arguments=$*
eval `${CCLARGS} -D "" $0 \
  -obsin         "" "" "[input observation directory (where observations input directories are)]"  \
  -obsout        "" "" "[output observation directory]" \
  -number_of_families_already_processed  "0"   "0" "[Number of families already process by a previous MPI run (default: 0)]" \
  -families2process  ""   "" "[List of families extension to be processed]" \
  -splitobs_mode     "no" "no"   "[mode to use to split observation files ('no', 'splitobs', 'round-robin', 'reflex' and 'burp_split') (default is 'no')]" \
  -common_sql_column "id_obs" "id_obs" "[SQL column that is used as a link between tables (default is 'id_obs')]" \
  -reunir_obs        "reunir_obs.Abs" "reunir_obs.Abs" "[program 'reunir_obs' to group observations files (default: the one in the PATH)]" \
  -reunir_obs_fam    "uan uas ua to_amsua to_amsub csr ssmis airs iasi atms cris tov" "" "[list of observation families that 'reunir_obs' will have to process (default: 'uan uas ua to_amsua to_amsub csr ssmis airs iasi atms cris tov')]" \
  -editbrp     "editbrp" "editbrp" "[path to 'editbrp' (default: the one in the PATH)]" \
  -reflex      "reflex"  "reflex"  "[path to 'reflex'  (default: the one in the PATH)]" \
  -rfiletype   "r.filetype"  "r.filetype"  "[path to 'r.filetype'  (default: the one in the PATH)]" \
  -fasttmp "no" "yes" "[Using the FASTTMP technology]" \
  -ramdiskpath "" "" "[path to RAMDisk]" \
  -tmpfsdir "" "" "[array containing the ramdisk path for each node]" \
  -mpchild2slots "" "" "[list of number which indicates for each mpi tile on which slot it is]" \
  -ls_cmd "/bin/ls" "/bin/ls" "[path to 'ls' command (default '/bin/ls')]" \
  -rm_cmd "/bin/rm" "/bin/rm" "[path to 'rm' command (default '/bin/rm')]" \
  -mv_cmd "/bin/mv" "/bin/mv" "[path to 'mv' command (default '/bin/mv')]" \
  -cp_cmd "/bin/cp" "/bin/cp" "[path to 'cp' command (default '/bin/cp')]" \
  -sed_cmd "/bin/sed" "/bin/sed" "[path to 'sed' command (default '/bin/sed')]" \
  -echo_cmd "/bin/echo" "/bin/echo" "[path to 'echo' command (default '/bin/echo')]" \
  -true_cmd "/bin/true" "/bin/true" "[path to 'true' command (default '/bin/true')]" \
  -grep_cmd "/bin/grep" "/bin/grep" "[path to 'grep' command (default '/bin/grep')]" \
  -mkdir_cmd "/bin/mkdir" "/bin/mkdir" "[path to 'mkdir' command (default '/bin/mkdir')]" \
  -wc_cmd "/usr/bin/wc" "/usr/bin/wc" "[path to 'wc' command (default '/usr/bin/wc')]" \
  -bc_cmd "/usr/bin/bc" "/usr/bin/bc" "[path to 'bc' command (default '/usr/bin/bc')]" \
  -tr_cmd "/usr/bin/tr" "/usr/bin/tr" "[path to 'tr' command (default '/usr/bin/tr')]" \
  -cut_cmd "/usr/bin/cut" "/usr/bin/cut" "[path to 'cut' command (default '/usr/bin/cut')]" \
  -date_cmd "/bin/date" "/bin/date" "[path to 'date' command (default '/bin/date')]" \
  -printf_cmd "/usr/bin/printf" "/usr/bin/printf" "[path to 'printf' command (default '/usr/bin/printf')]" \
  -xargs_cmd "/usr/bin/xargs" "/usr/bin/xargs" "[path to 'xargs' command (default '/usr/bin/xargs')]" \
  -basename_cmd "/usr/bin/basename" "/usr/bin/basename" "[path to 'basename' command (default '/usr/bin/basename')]" \
  -sqlite3_cmd "/usr/bin/sqlite3" "/usr/bin/sqlite3" "[path to 'sqlite3' command (default '/usr/bin/sqlite3')]" \
  ++ $arguments`

${echo_cmd} starting reunir at $(${date_cmd} +%Y%m%d:%H:%M:%S.%N)
start_date=$(${date_cmd} +%s.%N)

MP_CHILD=${MP_CHILD:-0}
let base=number_of_families_already_processed+MP_CHILD || true

number_of_families2process=$(${printf_cmd} "${families2process}" | ${wc_cmd} -w)
if [ "${number_of_families2process}" -le "${MP_CHILD}" ]; then
    ${echo_cmd} "No observation family to process with MP_CHILD=${MP_CHILD}"
    exit 0
fi

number=0
for fam in ${families2process}; do
    [ "${number}" -eq "${base}" ] && break
    let number=number+1
done
if [ "${number}" -eq "${number_of_families2process}" ]; then
    ${echo_cmd} "No more family to process"
    exit 0
fi
if [ -z "${fam}" ]; then
    ${echo_cmd} "Did not find any family to process"
    exit 1
fi
${echo_cmd} "fam=${fam} will be processed"

${echo_cmd} starting reunir for fam=${fam} at $(${date_cmd} +%Y%m%d:%H:%M:%S.%N)

files="$(${ls_cmd} -1 ${obsin}/${fam}/* | ${grep_cmd} -v num_headers || ${true_cmd})"
[ -z "${files}" ] && exit 0

[ -f ${fam}.all.original ] && ${rm_cmd} -f ${fam}.all.original

## On regroupe les fichiers ensemble avec 'reflex' qui ne peut prendre que 10 fichiers a la fois
if [ "${fasttmp}" = yes ]; then
    if [ "${ramdiskpath}" = tmpfsdir ]; then
        declare -a tmpfsdir_array=(${tmpfsdir})
        echo tmpfsdir=${tmpfsdir}
        declare -a mpchild2slots_array=(${mpchild2slots})
        ## We want to find the node number on which this mpi tile is running on
        tmpfsdirIndex=${mpchild2slots_array[${MP_CHILD}]}
        localramdiskpath=${tmpfsdir_array[${tmpfsdirIndex}]}
        if [ -z "${localramdiskpath}" ]; then
            ${echo_cmd} "The array 'TMPFSDIR' does not contain any value for index MP_CHILD=${MP_CHILD}!"
            exit 1
        fi
    else
        localramdiskpath=${ramdiskpath}
    fi

    FASTTMP=${localramdiskpath}/reunir_obs_${fam}
    [ -d "${FASTTMP}" ] && ${rm_cmd} -rf ${FASTTMP}
    ${mkdir_cmd} ${FASTTMP}
    ${cp_cmd} ${files} ${FASTTMP}
    cd ${FASTTMP}
    export TMPDIR=${FASTTMP}

    ## decide if the obs file is a BURP file or a SQLite file
    for file in ${files}; do
        bfile=${file##*/}
        filetype=$(${rfiletype} ${bfile}) || filetypestatus=$?
        if [ "${filetypestatus}" = 6 ]; then
            filetype=BURP
        elif [[ "${filetypestatus}" = 255 && "${filetype}" = "${bfile}: SQLite 3.x database"* ]]; then
            filetype=SQLite
        else
            echo "The filetype cannot be determined for file '${PWD}/${bfile}'!!!"
            exit 1
        fi
        ## Just check the first file because we assume that all the files
        ## under the directory are of the same type.
        break
    done
    if [ "${filetype}" = BURP ]; then
        ${echo_cmd} ${files} | ${tr_cmd} ' ' '\n' | ${xargs_cmd} -t -L10 ${reflex} -oxsrt ${fam}.all.original -ixent
    elif [ "${filetype}" != SQLite ]; then
        echo "The filetype has to be 'BURP' or 'SQLite' and not '${filetype}'!"
        exit 1
    fi
else
    ## decide if the obs file is a BURP file or a SQLite file
    for file in ${files}; do
        bfile=${file##*/}
        filetype=$(${rfiletype} ${file}) || filetypestatus=$?
        if [ "${filetypestatus}" = 6 ]; then
            filetype=BURP
        elif [[ "${filetypestatus}" = 255 && "${filetype}" = "${file}: SQLite 3.x database"* ]]; then
            filetype=SQLite
        else
            echo "The filetype cannot be determined for file '${PWD}/${file}'!!!"
            exit 1
        fi
        ## Just check the first file because we assume that all the files
        ## under the directory are of the same type.
        break
    done
    dfile=${file%/*}
    if [ "${filetype}" = BURP ]; then
        ${echo_cmd} ${files} | ${tr_cmd} ' ' '\n' | ${xargs_cmd} -t -L10 ${reflex} -oxsrt ${dfile}/${fam}.all.original -ixent
    elif [ "${filetype}" != SQLite ]; then
        echo "The filetype has to be 'BURP' or 'SQLite' and not '${filetype}'!"
        exit 1
    fi
    cd ${dfile}
fi

if [ "${filetype}" = BURP ]; then
    ## On enleve tous les enregistrements resume pour n'en garder qu'un seul.
    [ -f ${fam}.1resrec ] && ${rm_cmd} -f ${fam}.1resrec
    ${editbrp} -s ${fam}.all.original -d ${fam}.1resrec -i<<EOF
 exclure('>>*******')
EOF
    ${editbrp} -s ${fam}.all.original -d ${fam}.1resrec -c 1 -i<<EOF
 desire('>>*******')
EOF

    __reunir_obs_fam__=$(${echo_cmd} ${reunir_obs_fam} | ${sed_cmd} 's/[ ,]/|/g')
    if [ "${splitobs_mode}" = 'splitobs' ]; then
        case "${fam}" in
	    ${__reunir_obs_fam__})
	        [ -f ${fam} ] && ${rm_cmd} -f ${fam}
	        ${reunir_obs} -inburp ${fam}.1resrec -outburp ${fam}
	        ;;
	    *)
	        ${mv_cmd} ${fam}.1resrec ${fam}
	        ;;
        esac
    else
        ${mv_cmd} ${fam}.1resrec ${fam}.obs
    fi
elif [ "${filetype}" = SQLite ]; then
    rdbout=${fam}.obs
    ## on copie le schema de la base de donnees
    ${echo_cmd} .schema | ${sqlite3_cmd} ${bfile} | ${sqlite3_cmd} ${rdbout}

    ${sqlite3_cmd} ${rdbout} <<EOF
drop index if exists idx1;
EOF

    ## Copy all the tables which does not contain '${common_sql_column}' (usually 'id_obs')
    ## from the first file to the final file
    for table in $(${sqlite3_cmd} ${bfile} .table); do
        did_find_table=true
        ${sqlite3_cmd} ${bfile} ".schema ${table}" | ${grep_cmd} -sqi ${common_sql_column} || did_find_table=false
        if [ "${did_find_table}" = false ]; then
            ${sqlite3_cmd} ${rdbout} <<EOF
attach '${bfile}' as dbin;
insert into ${table} select * from dbin.${table};
detach dbin;
EOF
        fi
    done

    cat  << EOF > TABLES_REUNIR
PRAGMA journal_mode = OFF;
PRAGMA  synchronous = OFF;
EOF
    for file in ${files}; do
         cat  << EOF >> TABLES_REUNIR

attach '${file##*/}' as dbin;
EOF

         if [[ "${file##*/}" = bcr* ]]; then
             cat  << EOF >> TABLES_REUNIR
insert into predictors select * from dbin.predictors;
insert into coeffs     select * from dbin.coeffs;
EOF
             CREATE_INDEX=
         else
	     ## loop over all tables in file which does not contain '${common_sql_column}' (usually 'id_obs')
             ## and insert statement
	     TABLES_WITH_KEY=
             for table in $(${sqlite3_cmd} ${file##*/} .table); do
                 did_find_table=true
                 ${sqlite3_cmd} ${file##*/} ".schema ${table}" | ${grep_cmd} -sqi ${common_sql_column} || did_find_table=false
                 if [ "${did_find_table}" = true ]; then
                     if [[ "${file##*/}" = dia* ]]; then
                         cat  << EOF >> TABLES_REUNIR
insert into ${table} select * from dbin.${table};
EOF
                     else
                         ## On veut garder toutes les colonnes sauf le 'ID_DATA' puisque cette cle n'est plus unique
                         ## si des observations ont ete ajoutees a l'update dans 'midas-*.Abs'
                         COLUMNS_WITHOUT_ID_DATA=$(${echo_cmd} "PRAGMA table_info(${table});" | ${sqlite3_cmd} -csv ${file##*/} | ${grep_cmd} -iv ID_DATA)
                         COLUMNS_ON_ONE_LINE=$(${printf_cmd} "${COLUMNS_WITHOUT_ID_DATA}" | ${cut_cmd} -d, -f2 | ${sed_cmd} '$!s/$/,/' | ${tr_cmd} -d '\n')
                         COLUMNS_AFTER_DATA="( ${COLUMNS_ON_ONE_LINE} )"
                         COLUMNS_AFTER_SELECT=${COLUMNS_ON_ONE_LINE}
                         cat  << EOF >> TABLES_REUNIR
insert into ${table} ${COLUMNS_AFTER_DATA} select ${COLUMNS_AFTER_SELECT} from dbin.${table};
EOF
                     fi
                 fi
             done
             CREATE_INDEX="CREATE INDEX if not exists idx1 ON DATA(ID_OBS, VCOORD,VARNO);"
	fi ## End of 'else' associated to 'if [[ "${file##*/}" = bcr* ]]'

         cat  << EOF >> TABLES_REUNIR
detach dbin;
EOF

    done ## End of 'for file in ${files}'

    ${sqlite3_cmd} ${rdbout} < TABLES_REUNIR
    ${sqlite3_cmd} ${rdbout} <<EOF
PRAGMA cache_size=1000000;
PRAGMA synchronous = OFF;
PRAGMA journal_mode = OFF;
${CREATE_INDEX}
EOF

    ## if we have 'bcr' files, then we must filter them to avoid duplicates
    if [[ "${file##*/}" = bcr* ]]; then
        ${sqlite3_cmd} ${rdbout} <<EOF
create  temporary table  coefficients as select distinct  *  from coeffs;
delete from coeffs;
insert into coeffs select * from coefficients;
EOF
    fi
else
    ${echo_cmd} "The filetype has to be 'BURP' or 'SQLite' and not '${filetype}'!"
    exit 1
fi

if [[ "${fam}" = *.updated ]]; then
    ${cp_cmd} ${fam}.obs ${obsout}/$(${echo_cmd} ${fam} | ${sed_cmd} 's/\.updated$//')
else
    ${cp_cmd} ${fam}.obs ${obsout}/${fam}
fi

cd ${MIDAS_WORKDIR}
if [ "${fasttmp}" = yes ]; then
    ${rm_cmd} -rf ${FASTTMP}
fi

end_date=$(${date_cmd} +%s.%N)
${echo_cmd} ending reunir for fam=${fam} in $(${echo_cmd} "${end_date} - ${start_date}" | ${bc_cmd} -l) seconds

${echo_cmd} ending reunir for fam=${fam} at $(${date_cmd} +%Y%m%d:%H:%M:%S.%N)
