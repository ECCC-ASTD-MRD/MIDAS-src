#!/bin/bash

## Le script `midas.launch` est le script principal qui lance les
## programmes MIDAS qui servent dans l'assimilation et le contrôle de
## qualité.  Ce script appelle les scripts suivants:
##  * `midas.check_ensemble`
##  * `midas.tripotenml`
##  * `midas.mpirun`
##  * `midas.mpi`
##    * `midas.splitobs`
##    * `midas.mpi_barrier`
##  * `midas.reunir_obs`
##    * `midas.reunir_obs_mpi`
##  * `midas.interpEnsTrials_driver.ksh`
##    * `midas.interpEnsTrials.ksh`
##  * `midas.combineFstd`

set -ex

arguments=$*
eval `${CCLARGS:-cclargs} -D "" $0 \
  -cfg               "not defined"   "not defined"    "[maestro configuration file]" \
  -workdir           ""   ""    "[working directory created  by the script (default: midas_exec_\$\$)]" \
  -date              ""   ""    "[date on the analysis (mandatory)]" \
  -date_trial        ""   ""    "[date of the trial files (default: \${date} - 6 hours]" \
  -fallback_mode     "abort" "abort" "[fallback mode (default: 'abort')]" \
  -observations      ""   ""    "[observations files (a directory) (mandatory)]" \
  -trials            ""   ""    "[trial files (a file or a directory)]" \
  -analysis          ""   ""    "[an analysis that will be put in 'forecasts/analysis']" \
  -forecast_a        ""   ""    "[a forecast that will be put in 'forecasts/forecast_a']" \
  -forecast_b        ""   ""    "[a forecast that will be put in 'forecasts/forecast_b']" \
  -preconin          "preconin" "preconin" "[path to the preconditionning file]" \
  -ensemble          "" "" "[directory to find the ensemble trials]" \
  -ensemble_trial    "" "" "[directory to find the ensemble trials]" \
  -ensemble_anal     "" "" "[directory to find the ensemble analysis]" \
  -bgcov             "" "" "[background error statistics]" \
  -obscov            "" "" "[conventional observation error statistics]" \
  -coefsat           "" "" "[RTTOV coefficients (mandatory)]" \
  -statsat           "" "" "[satellite observations error statistics (mandatory)]" \
  -stats_tovs        "stats_tovs" "stats_tovs" "['stats_tovs' file to used instead the one in the 'statsat' directory]" \
  -sfc4hyperir       "" "" "['sfc4airs' file for Airs, Iasi and Cris background check]" \
  -sfc4hyperir_newalb   "" "" "['sfc4airs_newalb' file for Airs, Iasi and Cris background check]" \
  -namelist          "" "" "[namelist for MIDAS program (mandatory)]" \
  -biascoeff         "" "" "[biascoeff file]" \
  -analysisgrid      "" "" "[prototype of the analysis grid (standard file)]" \
  -analinc_mask      "" "" "[prototype of the analinc mask (standard file)]" \
  -tail_script       "" "" "[A tail script to source after the main work is done to collect outputs files (default: collect known output files)]" \
  -abs               "" "" "[MIDAS binary to be run in the script (mandatory)]" \
  -midas_mpirun      "midas.mpirun" "midas.mpirun" "[script 'midas.mpirun' to launch MPI binaries (default: the one in the PATH)]" \
  -midas_check_ensemble "midas.check_ensemble" "midas.check_ensemble" "[script 'midas.check_ensemble' (default: the one in the PATH)]" \
  -midas_mpi     "midas.mpi" "midas.mpi" "[script 'midas.mpi' to used to launch 'midas.Abs' in MPI (default: the one in the PATH)]" \
  -midas_mpi_barrier "" "$(which midas.mpi_barrier)" "[path to 'midas.mpi_barrier' script, default to none so no barrier, if '-midas_mpi_barrier' then 'midas.mpi_barrier' in the PATH]" \
  -midas_splitobs    "$(which midas.splitobs)" "$(which midas.splitobs)" "[script 'midas.splitobs' to used to split observations (default: the one in the PATH)]" \
  -midas_reunir_obs  "midas.reunir_obs" "midas.reunir_obs" "[path to script 'midas.reunir_obs]" \
  -midas_reunir_obs_mpi "$(which midas.reunir_obs_mpi)" "$(which midas.reunir_obs_mpi)" "[path to script 'midas.reunir_obs_mpi]" \
  -npex              "1"   "1"   "[number of MPI tiles in the x direction (default to 1]" \
  -npey              "1"   "1"   "[number of MPI tiles in the y direction (default to 1]" \
  -omp_stacksize     "2G"  "2G"  "[set the variable OMP_STACKSIZE to that number]" \
  -mpi_ssm           ""    ""    "[SSM domains to load the MPI environment]" \
  -mpimode           "mpi" "mpi" "[]" \
  -splitobs_mode     "no" "no"   "[mode to use to split observation files ('no', 'splitobs', 'round-robin', 'reflex' and 'burp_split') (default is 'no')]" \
  -splitobs_pgm      "midas.splitobs.Abs" "midas.splitobs.Abs" "[program 'midas.splitobs.Abs' to be used to split observation along MPI tiles (default: the one in the PATH)]" \
  -splitobs_nomvar   "P0" "P0" "[nomvar of the field to be read to define the grid]" \
  -splitobs_ndigits  "4" "4" "[number of digits for file names of observations]" \
  -reunir_obs        "reunir_obs.Abs" "reunir_obs.Abs" "[program 'reunir_obs' to group observations files (default: the one in the PATH)]" \
  -reunir_obs_fam    "uan uas ua to_amsua to_amsub csr ssmis airs iasi atms cris tov" "" "[list of observation families that 'reunir_obs' will have to process (default: 'uan uas ua to_amsua to_amsub csr ssmis airs iasi atms cris tov')]" \
  -ens_subdomains    "no" "yes" "[Are ensemble trials separated along MPI subdomains? (default no)]" \
  -etiket            ""   ""    "[etiket of fields generated]" \
  -enstrials_extension_length      "4" "4" "[Ensemble trials extension length (default: 4)]" \
  -minimum_proportion_of_members   "0.5" "0.5" "[minimum proportion of members]" \
  -other_output_list    "" "" "List of files to be put in final directory in addition to the standard ones" \
  -editbrp     "editbrp" "editbrp" "[path to 'editbrp' (default: the one in the PATH)]" \
  -reflex      "reflex"  "reflex"  "[path to 'reflex'  (default: the one in the PATH)]" \
  -rfiletype   "r.filetype"  "r.filetype"  "[path to 'r.filetype'  (default: the one in the PATH)]" \
  -run_in_parallel  "r.run_in_parallel" "r.run_in_parallel"  "[path to 'r.run_in_parallel' (default: the one in the PATH)]" \
  -tripotenml  "midas.tripotenml" "midas.tripotenml"  "[path to 'midas.tripotenml' (default: the one in the PATH)]" \
  -remote_copy "scp" "scp"  "[path to remote copy tool (default: 'scp')]" \
  -fasttmp "no" "yes" "[Using the FASTTMP technology]" \
  -aux_input  "" "" "[directory (or filename) of additional input file(s) to obtain before launch]" \
  ++ $arguments`

## On verifie si certains arguments sont presents

## "bgcov obscov coefsat statsat" removed from list of required defined arguments as they are not necessary in some cases.
## Instead, a warning message is provided.
## MIDAS program will abort if required but not present.

if [ -z "${abs}" ]; then
    echo "midas.launch: the argument '-abs' must be defined"
    exit 1
fi

for __midas_launch_arg__ in date namelist; do
    eval __midas_launch_tmp_var__="\${${__midas_launch_arg__}}"
    if [ -z "${__midas_launch_tmp_var__}" ]; then
        echo "midas.launch: the argument '-${__midas_launch_arg__}' must be defined"
        exit 1
    fi
    unset __midas_launch_tmp_var__
done
unset __midas_launch_arg__

for __midas_launch_arg__ in bgcov obscov coefsat statsat; do
    eval __midas_launch_tmp_var__="\${${__midas_launch_arg__}}"
    if [ -z "${__midas_launch_tmp_var__}" ]; then
       echo "Warning. midas.launch: the argument '-${__midas_launch_arg__}' has not been defined"
    fi
    unset __midas_launch_tmp_var__
done
unset __midas_launch_arg__

export CCLARGS=${CCLARGS:-$(which cclargs)}

if [ -z "${workdir}" ]; then
    workdir=midas_exec_$$
fi

if [ -d "${workdir}" ]; then
    rm -rf ${workdir}
fi

if [[ ${rfiletype:-$(which r.filetype)} == /* ]]; then
    rfiletype_cmd=${rfiletype}
else
    rfiletype_cmd=$(which ${rfiletype:-r.filetype})
fi

mkdir ${workdir}
cd ${workdir}

if [ -x ${SEQ_BIN}/nodelogger ]; then
    nodelogger=${SEQ_BIN}/nodelogger
else
    nodelogger=$(which nodelogger || true)
    if [ -z "${nodelogger}" ]; then
        function nodelogger {
            echo $*
        }
        nodelogger=nodelogger
    fi
fi

function copyOrLink {
    set -ex

    set +x
    if [ $# -lt 2 ]; then
        echo "midas.launch:copyOrLink: Cannot accept less than 2 arguments.  Here: 'copyOrLink ${*}'" >&2
        exit 1
    fi

    __copyOrLink_firstArg__=${1}
    __copyOrLink_source__=
    while [ $# -gt 1 ]; do
       __copyOrLink_lastArg__=${2}
       if [ -n "${__copyOrLink_source__}" ]; then
           __copyOrLink_source__="${__copyOrLink_source__} ${1}"
       else
           __copyOrLink_source__=${1}
       fi
       shift
    done
    __copyOrLink_destination__=${__copyOrLink_lastArg__}
    unset __copyOrLink_lastArg__

    ## On utilise le premier argument pour decider si on doit faire une copie locale ou non
    if [[ "${__copyOrLink_firstArg__}" = /* ]]; then
         __copyOrLink_isLocal__=yes
    elif [[ "${__copyOrLink_firstArg__}" != *:* ]]; then
         __copyOrLink_isLocal__=yes
    else ## Si ${analysisgrid} ne commence pas par '/' et contient ':' alors
         __copyOrLink_isLocal__=no
    fi

    if [ "${__copyOrLink_isLocal__}" = no ]; then
        set -x
        ${remote_copy} ${__copyOrLink_source__} ${__copyOrLink_destination__}
        set +x
    elif [ -f "${__copyOrLink_firstArg__}" ]; then
        set -x
        ln -s ${__copyOrLink_source__}  ${__copyOrLink_destination__}
        set +x
    else
        echo "midas.launch:copyOrLink: The local file '${__copyOrLink_firstArg__}' is not available." >&2
        exit 1
    fi

    unset __copyOrLink_source__ __copyOrLink_destination__ __copyOrLink_isLocal__ __copyOrLink_firstArg__

    set -x
}

if [ -n "${observations}" ]; then
    ${nodelogger} -n $SEQ_NODE -s infox -m "Get observations files"
    ## We do copy the observations files since they are changed in place
    mkdir obsfiles
    if [ -d "${observations}" ]; then
        copyOrLink ${observations}/* obsfiles
    elif [ -f "${observations}" ]; then
        copyOrLink ${observations} obsfiles
    else
        echo "The observations are unavailable"
        exit 1
    fi
fi

if [ -n "${trials}" ]; then
    ${nodelogger} -n $SEQ_NODE -s infox -m "Get trials"
    trlm_ndigits=2
    counter=1
    if [ -d "${trials}" ]; then
        for file in ${trials}/*; do
            counterstr=$(printf "%0.${trlm_ndigits}d" ${counter})
            copyOrLink ${file} trlm_${counterstr}
            let counter=counter+1
        done
    elif [ -f "${trials}" ]; then
        counterstr=$(printf "%0.${trlm_ndigits}d" ${counter})
        copyOrLink ${trials} trlm_${counterstr}
    else
        echo "The trials are unavailable"
        exit 1
    fi
fi

if [ -L "${analinc_mask}" -o -f "${analinc_mask}" ]; then
    ${nodelogger} -n $SEQ_NODE -s infox -m "Get Analinc mask file"
    copyOrLink ${analinc_mask} analinc_mask
fi

if [ -L "${preconin}" -o -f "${preconin}" ]; then
    ${nodelogger} -n $SEQ_NODE -s infox -m "Get Preconditioning file"
    copyOrLink ${preconin} preconin
fi

if [ -f "${bgcov}" ]; then
   ${nodelogger} -n $SEQ_NODE -s infox -m "bgcov=${bgcov}"
   copyOrLink ${bgcov} bgcov
   ## Pour garder une compatibilite arriere, on fait un lien de 'glbcov' vers 'bgcov'
   ln -s bgcov glbcov
fi

if [ -f "${obscov}" -o  -d "${obscov}" ]; then
   if [ -d "${obscov}" ]; then
       copyOrLink ${obscov}/* .
   else
       copyOrLink ${obscov} obscov
   fi
fi

if [ -d "${coefsat}" ]; then
   ${nodelogger} -n $SEQ_NODE -s infox -m "coefsat=${coefsat}"
   copyOrLink ${coefsat}/* .
fi

if [ -d "${statsat}" ]; then
   ${nodelogger} -n $SEQ_NODE -s infox -m "statsat=${statsat}"
   copyOrLink ${statsat}/* .
fi

## ici, on sélectionne un 'stats_tovs' si necessaire
if [ "${stats_tovs}" != stats_tovs ]; then
    [ -f stats_tovs ] && rm stats_tovs
    ${nodelogger} -n $SEQ_NODE -s infox -m "Using ${stats_tovs} as stats_tovs"
    copyOrLink ${stats_tovs} stats_tovs
fi

if [ -d "${biascoeff}" ]; then
    ${nodelogger} -n $SEQ_NODE -s infox -m "biascoeff=${biascoeff}"
    for file in ${biascoeff}/*; do
        file2=$(echo ${file##*/} | sed 's/_analysis_/_background_/')
        copyOrLink $file $file2
    done
fi

if [ -n "${analysisgrid}" ]; then
    copyOrLink ${analysisgrid} analysisgrid
fi

if [ -n "${sfc4hyperir}" ]; then
    copyOrLink ${sfc4hyperir} sfc4airs
fi
if [ -n "${sfc4hyperir_newalb}" ]; then
    copyOrLink ${sfc4hyperir_newalb} sfc4airs_newalb
fi

## traitement des ensembles
for enskey in ensemble ensemble_trial ensemble_anal; do
    eval ensfiles="\${${enskey}}"
    if [ -n "${ensfiles}" ]; then
        if [ -z "${NUMBER_OF_MEMBERS}" ]; then
            ## check if all ensemble members are present
            NUMBER_OF_MEMBERS=$(grep 'NENS *=' ${namelist} | cut -d= -f2)
            if [ "${NUMBER_OF_MEMBERS}" -lt 1 ]; then
                ${nodelogger} -n $SEQ_NODE -s info -m "On ne peut determiner le nombre de membres a partir du namelist ${namelist}"
                exit 1
            fi
        fi

        if [ "${enskey}" = ensemble_anal ]; then
            ensname=analysis
            date_file=${date}
            ext=000
        elif [ "${enskey}" = ensemble -o  "${enskey}" = ensemble_trial ]; then
            ensname=trials
            if [ -z "${date_trial}" ]; then
                echo "You must provide '-date_trial' to 'midas.launch to get the ensemble file name"
                exit 1
            fi
            date_file=${date_trial}
            ext=006
        fi
        ${nodelogger} -n $SEQ_NODE -s infox -m "Get ensemble ${ensname}"

        ${midas_check_ensemble} -cfg ${cfg}                           \
            -namelist            ${namelist}                          \
            -enstrials_extension_length ${enstrials_extension_length} \
            -number_of_members   ${NUMBER_OF_MEMBERS}                 \
            -ensemble            ${ensfiles}                          \
            -ensemble_output     ./${enskey}                          \
            -nodelogger          ${nodelogger}                        \
            -date                ${date_file}                         \
            -ext                 ${ext}                               \
            -fallback_mode       ${fallback_mode}
    fi
done

for argkey in analysis forecast_a forecast_b; do
    eval key="\${${argkey}}"
    if [ -n "${key}" ]; then
        [ ! -d forecasts ] && mkdir forecasts
        copyOrLink ${key} forecasts/${argkey}
    fi
done

# Acquire supplementary input files if provided
if [ -n "${aux_input}" ]; then
    if [[ "${aux_input}" = *:* ]]; then
       is_directory=
       ssh ${aux_input%%:*} test ! -d ${aux_input##*:} || is_directory=yes
       if [ "${is_directory}" = yes ]; then
           ${nodelogger} -n $SEQ_NODE -s infox -m "Acquiring file(s) from remote supplementary input dir ${aux_input}"
           ${remote_copy} ${aux_input}/* ./
       else
           is_file=
           ssh ${aux_input%%:*} test ! -f ${aux_input##*:} || is_file=yes
           if [ "${is_file}" = yes ]; then
               ${nodelogger} -n $SEQ_NODE -s infox -m "Acquiring remote supplementary input file ${aux_input}"
               ${remote_copy} ${aux_input} ./
          else
               echo "${aux_input} is not available!!"
               exit 1
          fi
       fi
    elif [ -f "${aux_input}" -o -L "${aux_input}" ]; then
       ${nodelogger} -n $SEQ_NODE -s infox -m "Acquiring supplementary input file ${aux_input}"
       ln -s ${aux_input} ./${aux_input##*/}
    elif [ -d "${aux_input}" ]; then
       ${nodelogger} -n $SEQ_NODE -s infox -m "Acquiring file(s) from supplementary input dir ${aux_input}"
       files=$(ls ${aux_input}/* 2>/dev/null)
       if [ "${files}" != "" ]; then
          for file in $files ; do
              ln -s ${file} ./${file##*/}
          done
       fi
    else
       echo "${aux_input} is not available!!"
       exit 1
    fi
fi

if [ -f "${abs}" ]; then
    cp ${abs} midas.Abs
else
    ${remote_copy} ${abs} midas.Abs
fi

## Rendu ici, on devrait avoir tout installe pour executer le 'midas.Abs'.
export TMG_ON=YES

${nodelogger} -n $SEQ_NODE -s infox -m "Building namelist"

if [ -f flnml ]; then
    mv flnml flnml.no_tripote
    namelist=flnml.no_tripote
fi
if [ -n "${etiket}" ]; then
    ${tripotenml} char CETIKINC ${etiket} ${namelist} > flnml
else
    cp ${namelist} flnml
fi

cat > ptopo_nml <<EOF
 &ptopo
  npex=${npex}
  npey=${npey}
/
EOF

doCreateDiagnostics=1
grep -isq '^ *lWriteDiagSql *= *.true. *$' flnml || doCreateDiagnostics=0
doThinning=1
grep -isq "^ *doThinning *= *.true. *$" flnml || doThinning=0

if [ -n "${observations}" ]; then
    observations_files=$(ls -SLr obsfiles/obs*)
    for obsfile in ${observations_files}; do
        ## obsfile = 'obsairs' ou 'obs2019072506_airs'
        fam=$(echo ${obsfile##*/} | cut -c4-)
        ## fam = 'airs' ou '2019072506_airs'
        fam=$(echo ${fam} | sed 's/^[0-9][0-9]*_//')
        ## fam = 'airs'
        [ ! -d obsfiles_${fam}.updated ] && mkdir obsfiles_${fam}.updated
        if [ "${doCreateDiagnostics}" -ne 0 ]; then
            if [ "${fam}" = uas -o "${fam}" = uan ]; then
                [ ! -d diafiles_ua.updated ] && mkdir diafiles_ua.updated
            else
                mkdir diafiles_${fam}.updated
            fi
        fi
        if [ "${doThinning}" -ne 0 ]; then
            mkdir obsfiles_${fam}.beforeThinning
        fi
        if [ "${OAVAR_SAVE_SPLITOBS}" = yes -a ! -d obsfiles_${fam} ]; then
            mkdir obsfiles_${fam}
        fi
    done
else
    observations_files=
fi

if [ -n "${midas_mpi_barrier}" ]; then
    barrier="=-midas_mpi_barrier ${midas_mpi_barrier}"
fi

cat > which_hostname <<EOF
#!/bin/bash
echo midas.launch executing \${MP_CHILD} \$(hostname)
EOF
chmod +x which_hostname
which_hostname_listing=$(${midas_mpirun} ${PWD}/which_hostname "Getting the hostnames for each MPI tile" "${mpi_ssm}" "${omp_stacksize}" ${run_in_parallel} \
    -npex ${npex} -npey ${npey} -tmpdir ${PWD}/hostname_mpi_tmpdir | grep 'midas.launch executing')

child_hostnames=$(printf "${which_hostname_listing}" | awk '/^oe-[0-9]*-[0-9]*: midas.launch executing / {print $4, $5}')

hostnames=$(printf "${child_hostnames}" | awk '{print $(NF)}' | sort -u)
## Find minimum MP_CHILD for each hostname
#declare -A master_for_each_hostname
master_for_each_hostname=
for eachhost in ${hostnames}; do
    master_for_this_hostname=$(printf "${child_hostnames}" | grep "${eachhost}$" | sort -n | head -1 | cut -d' ' -f1)
    if [ -z "${master_for_each_hostname}" ]; then
        master_for_each_hostname="${eachhost} ${master_for_this_hostname}"
    else
        master_for_each_hostname=$(printf "${master_for_each_hostname}\n%s %s" ${eachhost} ${master_for_this_hostname})
    fi
    #master_for_each_hostname["${eachhost}"]=$(grep "${eachhost}$" child_hostnames | sort -n | head -1 | cut -d' ' -f1)
done

declare -a mpchild2getObservations
for mp_child in $(seq 0 $((SEQ_NPEX*SEQ_NPEY-1))); do
    thishost=$(printf "${child_hostnames}" | awk "/^${mp_child} / {print \$2}")
    # mpchild2getObservations[${mp_child}]=${master_for_each_hostname[${thishost}]}
    mpchild2getObservations[${mp_child}]=$(printf "${master_for_each_hostname}" | awk "/^${thishost} / {print \$2}")
    echo "mp_child='${mp_child}' thishost='${thishost}' mpchild2getObservations[\${mp_child}]='${mpchild2getObservations[${mp_child}]}'"
done

if [ -n "${observations}" ]; then
    observations_files="=-observations      ${observations_files}"
fi

ramdiskpath=${MIDAS_RAMDISKPATH:-${TMPDIR}}

${midas_mpirun} "${midas_mpi}" "$(true_path ${abs})" "${mpi_ssm}" "${omp_stacksize}" ${run_in_parallel} -npex ${npex} -npey ${npey} \
    -tmpdir ${PWD}/midas_mpi_tmpdir                                      \
    -args                                                                \
                            ${observations_files}                        \
        =-abs               ${MIDAS_LAUNCH_ABS_COMMAND:-./midas.Abs}     \
                            ${barrier}                                   \
        =-midas_splitobs    ${midas_splitobs}                            \
        =-splitobs_mode     ${splitobs_mode}                             \
        =-splitobs_pgm      ${splitobs_pgm}                              \
        =-splitobs_ndigits  ${splitobs_ndigits}                          \
        =-splitobs_fstin    ${TASK_INPUT}/split_grid                     \
        =-splitobs_nomvar   ${splitobs_nomvar}                           \
        =-splitobs_mpchild2getObservations ${mpchild2getObservations[@]} \
        =-number_of_members ${NUMBER_OF_MEMBERS}                         \
        =-enstrials_extension_length ${enstrials_extension_length}       \
        =-npex              ${npex}                                      \
        =-npey              ${npey}                                      \
        =-fasttmp           ${fasttmp}                                   \
        =-ramdiskpath       ${ramdiskpath}                               \
        =-reflex            ${reflex}                                    \
        =-editbrp           ${editbrp}                                   \
        =-rfiletype         ${rfiletype_cmd}                             \
        =-ls_cmd            $(which ls)                                  \
        =-cp_cmd            $(which cp)                                  \
        =-rm_cmd            $(which rm)                                  \
        =-mv_cmd            $(which mv)                                  \
        =-df_cmd            $(which df)                                  \
        =-sed_cmd           $(which sed)                                 \
        =-cut_cmd           $(which cut)                                 \
        =-rev_cmd           $(which rev)                                 \
        =-echo_cmd          $(which echo)                                \
        =-date_cmd          $(which date)                                \
        =-true_cmd          $(which true)                                \
        =-mkdir_cmd         $(which mkdir)                               \
        =-printf_cmd        $(which printf)                              \
        =-sleep_cmd         $(which sleep)

if [ -n "${observations}" -a "${midas_reunir_obs}" != no ]; then
    if [ "${splitobs_mode}" = no ]; then
        mkdir obsfiles_final
        for obsfile in obsfiles/obs*; do
            mv $(basename ${obsfile}) obsfiles_final
        done
    else

        dirext2process=.updated
        if [ "${doThinning}" -ne 0 ]; then
            dirext2process="${dirext2process} .beforeThinning"
        fi

        ${midas_reunir_obs} -midas_reunir_obs_mpi ${midas_reunir_obs_mpi} \
            -obsin            ${PWD}                                      \
            -obsout           ${PWD}/obsfiles_final                       \
            -dirext2process   ${dirext2process}                           \
            -reunir_obs       ${reunir_obs}                               \
            -reunir_obs_fam   ${reunir_obs_fam}                           \
            -splitobs_mode    ${splitobs_mode}                            \
            -npex             ${npex}                                     \
            -npey             ${npey}                                     \
            -editbrp          ${editbrp}                                  \
            -reflex           ${reflex}                                   \
            -rfiletype        ${rfiletype_cmd}                            \
            -midas_mpirun     ${midas_mpirun}                             \
            -run_in_parallel  ${run_in_parallel}                          \
            -mpi_ssm          ${mpi_ssm}                                  \
            -omp_stacksize    ${omp_stacksize}                            \
            -ramdiskpath      ${ramdiskpath}                              \
            -fasttmp          ${fasttmp}                                  \
            -nodelogger       ${nodelogger}
    fi ## Fin du 'else' relie au 'if [ "${splitobs_mode}" = no ]'
fi  ## End of 'if [ -n "${observations}" ]'

if [ -x "${tail_script}" ]; then
    . ${tail_script}
else
    mv -f rebm* rehm* anlm* ..       || true
    mv -f flnml ..                   || true
    if [ -d obsfiles_final ]; then
        for obsfile in obsfiles_final/*; do
            if [ -f "${obsfile}" ]; then
                mv -f ${obsfile} ../$(basename ${obsfile} | sed 's/files_//') || true
            elif [ -d "${obsfile}" ]; then
                filetype=$(basename ${obsfile} | cut -d_ -f2-)
                for tobsfile in ${obsfile}/*; do
                    mv -f ${tobsfile} ../$(basename ${tobsfile} | sed 's/files_//')_${filetype} || true
                done
            fi
        done
    fi
    mv -f pm1q ..                    || true

    ## mainly for letkf
    mv -f ??????????_000 ..          || true
    mv -f ??????????_???_*mean* ..   || true
    mv -f ??????????_???_*rms* ..    || true
    mv -f ??????????_000_???? ..     || true
    mv -f ??????????_000_inc_???? .. || true
    mv -f subspace* ..               || true

    mv -f mean_*     ..              || true
    mv -f std_*      ..              || true
    mv -f anlcoeffs* ..              || true
fi

if [ -n "${other_output_list}" ]; then
    for file in ${other_output_list}; do
        cp ${file} ..
    done
fi

cd ..

echo "End of script 'midas.launch'"
