!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------

#include "maincompileswitch.inc"
#include "compileswitches.inc"

module chem_mod
!
! PURPOSE:
!    Repository of obs space structures, arrays, and routines specific to the 
!    CH chemical constituents family and constituent observations.
!
!    Main content:
!
!       - Routines and strucure for setting of obs error std. dev. used in
!         'observation_erreurs_mod.ftn90'
!       - Observation operators. See main routine 'chm_obsoperators',
!       - Routines and structure for setting and assignment of observation layer 
!         top and bottom levels. See 'preproc.ftn90' and 'chm_obsoperators'.
!       - Routines and structure for setting and assignment of averagin kernel
!         matrices. CODE NOT COMPLETED. See 'preproc.ftn90' and 'chm_obsoperators'.
!       
! COMMENT:
!
!    This module can be expanded to contain other constituent related info
!    or routines.
!
! Author  : Y.J Rochon - ARQI/AQRD, 2014
!
! Revisions:
!           M. Sitwell, ARQI/AQRD, Feb 2015
!           - Created struct_chm_info and struct_chm_std structures for storing
!             information read from ascii/burp file and removal of earlier structure.
!
!----------------------------------------------------------------------------------

  use EarthConstants_mod
  use MathPhysConstants_mod
  use obsSpaceData_mod
  use codtyp_mod
  use bufr
   
  implicit none
  private

! public procedures
! -----------------

  public :: chm_setup,chm_dealloc_obs_err_stddev,chm_read_obs_err_stddev,chm_get_obs_err_stddev


  type :: struct_chm_std
     !
     ! Structure for holding observation std information
     !
     !  Variable               Description
     !  --------               -----------
     !  n_stnid                Number of sub-families (identified via STNIDs)
     !  stnids                 Sub-families (STNIDs; * are wild cards)
     !  bfr                    BUFR/BURP element in data block 
     !  brp                    0: Set entirely from the ascii file being read. No 
     !                            initial values read from BURP files
     !                         1: Initial values in obs BURP files 
     !                            (may be adjusted after input)
     !  std_type               Index of setup approach (used in combination with
     !                            nstd_brp_chm)
     !                         For nstd_brp_chm value 0 or 1, 
     !                         0: std1 or BURP file vales (sigma)
     !                         1: min(std3,max(std2,std1_chm*ZVAL))
     !                                                   or
     !                            max(std2(ISTNID),xstd_std1_chm(ILEV)*sigma)
     !                         2: sqrt(std2**2+(std1*ZVAL)**2))
     !                                                   or
     !                                              not applicable
     !  ibegin                 Position index of start of data for given
     !                         sub-family in the arrays std1,levels,lat
     !  n_lvl                  Number of vertical levels
     !  levels                 Vertical levels (in coordinate of sub-family data)
     !  n_lat                  Number of latitudes
     !  lat                    Latitudes (degrees; ordered in increasing size)
     !  std1                   See std_type for usage
     !  std2                   See std_type for usage
     !  std3                   See std_type for usage     

     integer ::  n_stnid
     character(len=12), allocatable :: stnids(:)
     integer, allocatable :: bfr(:),std_type(:),n_lat(:)
     integer, allocatable :: brp(:),ibegin(:),n_lvl(:)
     real(8),  allocatable :: std1(:),std2(:),std3(:)
     real(8), allocatable :: levels(:),lat(:)

  end type struct_chm_std
  
  type :: struct_chm_info
     !  Information arrays retrieved from obsinfo_chm regarding vertical levels 
     !  or averaging kernels
     !
     !  Variable               Description
     !  --------               -----------
     !  n_stnid                Number of sub-families (identified via STNIDs)
     !  stnids                 Sub-families (STNIDs; * are wild cards)
     !  bfr                    BUFR/BURP element in data block
     !  brp                    0: Set entirely from the ascii file being read. No 
     !                            initial values read from BURP files
     !                         1: Initial values in obs BURP files 
     !                             (may be adjusted after input)
     !  vco                    Vertical coordinate type (1, 2, or 3, see bufr_read_mod)
     !
     !  ibegin                 Position index of start of data for given
     !                         sub-family.
     !  n_lvl                  Number of vertical levels
     !  n_lat                  Number of latitudes
     !  lat                    Latitudes (degrees; ordered in increasing size)
     !
     !  vlayertop              Layer top 
     !  vlayerbottom           Layer bottom
     !  rak                    Averaging kernel matrices
     
     integer ::  n_stnid
     character(len=12), allocatable :: stnids(:)
     integer, allocatable :: bfr(:),brp(:)
     integer, allocatable :: vco(:),n_lat(:)
     integer, allocatable :: ibegin(:),n_lvl(:)
     real(8), allocatable :: rak(:),vlayertop(:),vlayerbottom(:)
     real(8), allocatable :: lat(:)
  
  end type struct_chm_info

  type :: struct_chm_obsoperators  
  
     !  Structure holding work variables for observation operators
     !     
     !  Variable               Description
     !  --------               -----------
     !  modelIndex             Obs operator index
     !                         0 - vertical interpolator
     !                         1 - layer averaging
     !                         2 - layer integration
     !  layer_identified       .true. if a layer (with identified layer boundaries)
     !                         .false if layer boundaries are not available.
     !  modelvarcolumn         Field or increment column at observation location
     !                         with necessary unit conversions.
     !  vmodpress              Model layer boundaries taken as middle between model level
     !  vlayertop              Layer top (final work values in Pa)
     !  vlayerbottom           Layer bottom (final work values in Pa)
     !  vh                     Second order Lagrangian interp integration weights
     !  zh                     Initial innovation model array (other than conversion constants)
     !  zhp                    Part of innovation operator not related to resolution.
     
     integer :: modelIndex
     logical :: layer_identified
     real(8), allocatable :: vlayertop(:),vlayerbottom(:),vmodpress(:)      
     real(8), allocatable :: modelvarcolumn(:),zh(:,:),zhp(:,:),vh(:,:)

  end type struct_chm_obsoperators

  type(struct_chm_info) :: chm_layers
  type(struct_chm_info) :: chm_avgkern
  type(struct_chm_std)  :: chm_std
  type(struct_chm_obsoperators) :: chm_obsoper

contains

!------------------------------- Setup called from "preproc" ---------------------------

  subroutine chm_setup
!
! Author   : Y. Rochon, Dec 2014 
! 
! Revisions: M. Sitwell, Feb 2015
!            - Removed references to earlier structure
!          
! Purpose: Setup additional information required by constituent obs and not provided in
!          lobsSpaceData.
!
!----------------------------------------------------------------------------------------

  implicit none
  
  write(*,*) 'Begin chm_setup'
     
!------------------------ Top and bottom layer boundaries ------------------------
  
! Read top and bottom layer boundaries of partial (or total) column meausurements
  
  call chm_read_layers
      
! To deallocate space if required elsewhere, one should use
! call chm_dealloc_layers

!--------------------------- Averaging kernel matrices ------------------------
   
! Read averaging kernel matrices
  
! call chm_avgkern
  
! To deallocate space if required elsewhere, one should use
! call chm_dealloc_avgkern

  write(*,*) 'Completed chm_setup'
  
  end subroutine chm_setup

!-----------------------------------------------------------------------------------------
!--------------------- Routines related to layer top & bottom levels----------------------

  subroutine chm_read_layers
!
! Author   : Y. Rochon, ARQI/AQRD, Dec 2014 
!
! Revisions: 
!            M. Sitwell, ARQI/AQRD, Feb 2015
!            - Renaming of routine and removal of lines no longer required.
!          
! Purpose: Read and store top and bottom layer boundaries for CH sub-families
!
!----------------------------------------------------------------------------------------

  implicit none

  integer :: FNOM, FCLOS
  integer :: IERR, JLEV, JELM, nulstat, ios, isize, icount
  logical :: LnewExists
  
  character (len=128) :: ligne

  EXTERNAL FNOM,FCLOS

! Initialization

  chm_layers%n_stnid=0

  INQUIRE(FILE='obsinfo_chm',EXIST=LnewExists)
  IF (.not.LnewExists )then
    WRITE(*,*)   '-------------------------------------------------'
    WRITE(*,*)   'chm_read_layers: COULD NOT FIND FILE obsinfo_chm!'
    WRITE(*,*)   '-------------------------------------------------'
    return
  ENDIF
!
! Check for available layer info.
!
  NULSTAT=0
  IERR=FNOM(NULSTAT,'obsinfo_chm','SEQ',0)
  IF ( IERR .EQ. 0 ) THEN
    open(unit=nulstat, file='obsinfo_chm', status='OLD')
  ELSE
    CALL ABORT3D('chm_read_layers: COULD NOT OPEN FILE obsinfo_chm!')
  ENDIF

  ios=0
  read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne
  do while (trim(adjustl(ligne(1:13))).ne.'SECTION II:') 
      read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne
  end do    
  
! Read number of observation set sub-families (STNIDs and ...) and allocate space
   
  read(nulstat,*,iostat=ios,err=10,end=10) chm_layers%n_stnid
  read(nulstat,*,iostat=ios,err=10,end=10) isize

  allocate(chm_layers%stnids(chm_layers%n_stnid))
  allocate(chm_layers%vco(chm_layers%n_stnid))
  allocate(chm_layers%brp(chm_layers%n_stnid),chm_layers%ibegin(chm_layers%n_stnid))
  allocate(chm_layers%bfr(chm_layers%n_stnid),chm_layers%n_lvl(chm_layers%n_stnid))
  allocate(chm_layers%vlayertop(isize),chm_layers%vlayerbottom(isize))
 
  chm_layers%bfr(:)=0
  chm_layers%vco(:)=0
  chm_layers%brp(:)=0
  chm_layers%n_lvl(:)=1

! Begin reading for each sub-family
! Important: Combination of STNID, BUFR element and number of vertical levels
!            to determine association to the observations.

  icount=0
  do jelm=1,chm_layers%n_stnid
    chm_layers%ibegin(jelm)=icount+1

    read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne

!   Read STNID (* is a wildcard)
    
    read(nulstat,'(2X,A9)',iostat=ios,err=10,end=10) chm_layers%stnids(jelm) 

!   Read (1) Obs BUFR element.
!        (2) Vertical coord type (1, 2, or 3)
!        (3) Flag indication if EOR provided from this ascii file or
!            to be read from the BURP file,
!        (4) Number of vertical levels
!
!   Important: Combination of STNID, BUFR element and number of vertical levels
!              to determine association to the observations.
!
    read(nulstat,*,iostat=ios,err=10,end=10) chm_layers%bfr(jelm),chm_layers%vco(jelm),  &
       chm_layers%brp(jelm),chm_layers%n_lvl(jelm)  
    
    if (icount+chm_layers%n_lvl(jelm).gt.isize) then
       write(*,'(10X,"Max array size exceeded: ",I6)') isize
       CALL ABORT3D('chm_read_layers: READING PROBLEM.')    
    end if

    read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne
    
    if (chm_layers%n_lvl(jelm).ge.1) then   
       do jlev=1,chm_layers%n_lvl(jelm)
          icount=icount+1
          
          ! Read top and bottom levels
          
          read(nulstat,*,iostat=ios,err=10,end=10)                 &
                 chm_layers%vlayertop(icount),chm_layers%vlayerbottom(icount)
       end do
    end if

  end do
   
 10 if (ios.gt.0) then
       WRITE(*,*) 'File read error message number: ',ios
       CALL ABORT3D('chm_read_layers: READING PROBLEM')    
    end if
 
 11 CLOSE(UNIT=NULSTAT)
    IERR=FCLOS(NULSTAT)    

  end subroutine chm_read_layers


  !-----------------------------------------------------------------------------------------

  subroutine chm_get_layer_boundaries(cstnid,ivnm,ivco,nlev,zlev,default_top,default_bottom,layertop,layerbottom)
!
! Author  : M. Sitwell, Y. Rochon, Feb 2015
! Revision: 
!
! Purpose: Return layer boundaries for an observation. Combination of STNID, BUFR element
!          and number of vertical levels to determine association to the observations.
!          Default values for top and bottom layers for total column measurements are to
!          be provided.
!
! Inputs:
!   - cstnid          station id
!   - ivnm            BUFR descriptor element
!   - ivco            type of vertical coordinate
!   - nlev            number of levels in the observation
!   - zlev            first vertical coordinate value in the profile
!   - default_top     default value for top layer for total column measurement
!   - default_bottom  default value for bottom layer for total column measurement
!
! Outputs:
!   - layertop        top layer values
!   - layerbottom     bottom layer values
! ---------------------------------------------------------------------------------------

    implicit none

    character(len=12), intent(in) :: cstnid
    integer, intent(in)           :: ivnm,ivco,nlev
    real(8), intent(in)           :: zlev,default_top,default_bottom
    real(8), intent(out)          :: layertop(nlev),layerbottom(nlev)
    integer                       :: ISTNID,JN,start_index
    logical                       :: iset,total_col

    ! If a total column measurement, second condition to check for default value
    ! of height coordinate
    total_col = NLEV.EQ.1 .AND. abs(ZLEV).le.1.0D-10

    ! Find stnid with same number of vertical levels, and same BUFR element
    ! Note: * in cinfo_stndi_chm stands for a wildcard
          
    ISTNID=0
    
    DO JN=1,chm_layers%n_stnid

       ! First compare STNID values allowing for * and blanks in 
       ! chm_layers%stnids(JN) as wildcards
       iset = stnid_equal(chm_layers%stnids(JN),CSTNID)

       ! Check if number of levels, code, and vertical coordinate type are equal.
       ! If number of levels is one and there is no value set for ZLEV (as for
       ! a total column measurement), the check of vertical coordinate type is disregarded.
       IF (iset) THEN
          IF ( ivnm.EQ.chm_layers%bfr(JN) .AND. NLEV.EQ.chm_layers%n_lvl(JN) .AND. &
               ( (IVCO.EQ.chm_layers%vco(JN).OR.IVCO.EQ.4) .OR. total_col ) &
             ) THEN
             ISTNID=JN
             exit
          END IF
       END IF
       
    END DO

    IF ( ISTNID.EQ.0 .AND. (ivnm.eq.15198.or.ivnm.eq.15020) ) THEN
       ! if layer information not found in ascii file
       if (total_col) then
          layertop(1) = default_top
          layerbottom(1) = default_bottom
       else
          CALL ABORT3D ('chm_get_layer_boundaries: Top and bottom of layers not found for STNID=' // CSTNID)
       end if
    ELSE
       start_index = chm_layers%ibegin(ISTNID)
       layertop(:) = chm_layers%vlayertop(start_index:start_index+nlev-1)
       layerbottom(:) = chm_layers%vlayerbottom(start_index:start_index+nlev-1)  
    END IF

  end subroutine chm_get_layer_boundaries


!-----------------------------------------------------------------------------------------

  subroutine chm_dealloc_layers
!
! Author  : Y. Rochon, Dec 2014
! Revision: 
!
! Purpose: Deallocate temporary storage space.
!
! ---------------------------------------------------------------------------------------
  
!
! Deallocate temporary space used for the CH family
!
  if (chm_layers%n_stnid.gt.0) then
      deallocate(chm_layers%stnids)
      deallocate(chm_layers%n_lvl,chm_layers%ibegin)
      deallocate(chm_layers%bfr,chm_layers%brp,chm_layers%vco)
      deallocate(chm_layers%vlayertop,chm_layers%vlayerbottom)
  end if
 
  end subroutine chm_dealloc_layers

!-----------------------------------------------------------------------------------------
!-------------------- Routines related averaging kernel matrices -------------------------

  subroutine chm_read_avgkern
!
! Author   : Y. Rochon, ARQI/AQRD, Feb 2015 
!            - Initial framework only. 
!            - Actual reading code for averaging kernels not included as yet.
!
! Revisions: 
!          
! Purpose: Read and store averaging kernel matricesfor CH sub-families
!
!----------------------------------------------------------------------------------------

  implicit none

  integer :: FNOM, FCLOS
  integer :: IERR, JLEV, JELM, nulstat, ios, isize, icount
  logical :: LnewExists
  
  character (len=128) :: ligne

  EXTERNAL FNOM,FCLOS

! Initialization

  chm_avgkern%n_stnid=0

  INQUIRE(FILE='obsinfo_chm',EXIST=LnewExists)
  IF (.not.LnewExists )then
    WRITE(*,*)   '--------------------------------------------------'
    WRITE(*,*)   'chm_read_avgkern: COULD NOT FIND FILE obsinfo_chm!'
    WRITE(*,*)   '--------------------------------------------------'
    return
  ENDIF
!
! Check for available layer info.
!
  NULSTAT=0
  IERR=FNOM(NULSTAT,'obsinfo_chm','SEQ',0)
  IF ( IERR .EQ. 0 ) THEN
    open(unit=nulstat, file='obsinfo_chm', status='OLD')
  ELSE
    CALL ABORT3D('chm_read_avgkern: COULD NOT OPEN FILE obsinfo_chm!')
  ENDIF

  ios=0
  read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne
  do while (trim(adjustl(ligne(1:13))).ne.'SECTION II:') 
      read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne
  end do    
  
! Read number of observation set sub-families (STNIDs and ...) and allocate space
   
  read(nulstat,*,iostat=ios,err=10,end=10) chm_avgkern%n_stnid
  read(nulstat,*,iostat=ios,err=10,end=10) isize

  allocate(chm_avgkern%stnids(chm_avgkern%n_stnid))
  allocate(chm_avgkern%brp(chm_avgkern%n_stnid),chm_avgkern%ibegin(chm_avgkern%n_stnid))
  allocate(chm_avgkern%bfr(chm_avgkern%n_stnid),chm_avgkern%n_lvl(chm_avgkern%n_stnid))
!!  allocate(chm_avgkern%rak(isize)
 
  chm_avgkern%bfr(:)=0
  chm_avgkern%brp(:)=0
  chm_avgkern%n_lvl(:)=1

! Begin reading for each sub-family
! Important: Combination of STNID, BUFR element and number of vertical levels
!            to determine association to the observations.

  icount=0
  do jelm=1,chm_avgkern%n_stnid
    chm_avgkern%ibegin(jelm)=icount+1

    read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne

!   Read STNID (* is a wildcard)
    
    read(nulstat,'(2X,A9)',iostat=ios,err=10,end=10) chm_avgkern%stnids(jelm) 

!   Read (1) Obs BUFR element.
!        (2) Vertical coord type (1, 2, or 3)
!        (3) Flag indication if EOR provided from this ascii file or
!            to be read from the BURP file,
!        (4) Number of vertical levels
!
!   Important: Combination of STNID, BUFR element and number of vertical levels
!              to determine association to the observations.
!
    read(nulstat,*,iostat=ios,err=10,end=10) chm_avgkern%bfr(jelm),  &
       chm_avgkern%brp(jelm),chm_avgkern%n_lvl(jelm)  
    
    if (icount+chm_avgkern%n_lvl(jelm).gt.isize) then
       write(*,'(10X,"Max array size exceeded: ",I6)') isize
       CALL ABORT3D('chm_read_layers: READING PROBLEM.')    
    end if

    read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne
    
    if (chm_avgkern%n_lvl(jelm).gt.1) then   
       do jlev=1,chm_avgkern%n_lvl(jelm)
          icount=icount+1
          
          ! Read averaging kernel matrix
          
!!          read(nulstat,*,iostat=ios,err=10,end=10)                 &
!!                 chm_avgkern%rak......
       end do
    end if
  end do
   
 10 if (ios.gt.0) then
       WRITE(*,*) 'File read error message number: ',ios
       CALL ABORT3D('chm_read_avgkern: READING PROBLEM')    
    end if
 
 11 CLOSE(UNIT=NULSTAT)
    IERR=FCLOS(NULSTAT)    

  end subroutine chm_read_avgkern

!-----------------------------------------------------------------------------------------

  subroutine chm_dealloc_avgkern
!
! Author  : Y. Rochon, Dec 2014
! Revision: 
!
! Purpose: Deallocate temporary storage space.
!
!---------------------------------------------------------------------------------------
  
!
! Deallocate temporary space used for the CH family
!
  if (chm_avgkern%n_stnid.gt.0) then
      deallocate(chm_avgkern%stnids)
      deallocate(chm_avgkern%ibegin)
      deallocate(chm_avgkern%bfr,chm_avgkern%brp,chm_avgkern%n_lat)
      deallocate(chm_avgkern%rak,chm_avgkern%lat)
  end if
 
 
  end subroutine chm_dealloc_avgkern

!-----------------------------------------------------------------------------------------
!----------- Routines relevant to error std. dev. (observation_erreurs.ftn90) ------------

  subroutine chm_read_obs_err_stddev
!
!  s/r chm_read_obs_err_stddev - READ OBSERVATION ERROR OF CONSTITUENT DATA 
!
!  Author   : Y. Rochon, Nov 2014 
!             (initial part follows the format of oer_read_obs_erreurs_conv)
!  Revisions: 
!             M. Sitwell, Fdeb 2015
!             - Content formed as a separate routine called in oer_read_obs_erreurs_chm.
!          
! Purpose: Read and store observation error std. dev. as needed for CH family obs.
!
!----------------------------------------------------------------------------------------

  implicit none

  integer :: FNOM, FCLOS
  integer :: IERR, JLEV, JELM, nulstat, ios, isize, icount
  logical :: LnewExists
  
  character (len=128) :: ligne

  EXTERNAL FNOM,FCLOS

! Initialization

  chm_std%n_stnid=0
!
! CHECK THE EXISTENCE OF THE NEW FILE WITH STATISTICS
! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
  INQUIRE(FILE='obsinfo_chm',EXIST=LnewExists)
  IF (.not.LnewExists) then
    WRITE(*,*) '---------------------------------------------------------------'
    WRITE(*,*) 'WARNING! chm_read_obs_err_stddev: obsinfo_chm not available.   '
    WRITE(*,*) 'WARNING! Default CH family stddev to be applied if needed.     '
    WRITE(*,*) '---------------------------------------------------------------'
    return
  ENDIF
!
! Read observation error std dev. from file obsinfo_chm for constituent data
! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
  NULSTAT=0
  IERR=FNOM(NULSTAT,'obsinfo_chm','SEQ',0)
  IF ( IERR .EQ. 0 ) THEN
    open(unit=nulstat, file='obsinfo_chm', status='OLD')
  ELSE
    CALL ABORT3D('chm_read_obs_err_stddev: COULD NOT OPEN FILE obsinfo_chm!')
  ENDIF

! Read error standard deviations for constituents if available.
! (CH family; ozone and others)
  
  ios=0
  read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne
  do while (trim(adjustl(ligne(1:12))).ne.'SECTION I:') 
      read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne
  end do    
  
! Read number of observation set sub-families (STNIDs and ...) and allocate space

  read(nulstat,*,iostat=ios,err=10,end=10) chm_std%n_stnid
  read(nulstat,*,iostat=ios,err=10,end=10) isize

  allocate(chm_std%stnids(chm_std%n_stnid))
  allocate(chm_std%std_type(chm_std%n_stnid),chm_std%n_lat(chm_std%n_stnid))
  allocate(chm_std%brp(chm_std%n_stnid),chm_std%ibegin(chm_std%n_stnid))
  allocate(chm_std%bfr(chm_std%n_stnid),chm_std%n_lvl(chm_std%n_stnid))
  allocate(chm_std%std1(isize),chm_std%std2(chm_std%n_stnid),chm_std%std3(chm_std%n_stnid))
  allocate(chm_std%levels(isize),chm_std%lat(isize))
 
  chm_std%bfr(:)=0
  chm_std%brp(:)=0
  chm_std%std_type(:)=0
  chm_std%n_lvl(:)=1
  chm_std%n_lat(:)=1

! Begin reading for each sub-family
! Important: Combination of STNID, BUFR element and number of vertical levels
!            to determine association to the observations.

  icount=0
  do jelm=1,chm_std%n_stnid
    chm_std%ibegin(jelm)=icount+1

    ! disregard line of dashes
    read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne

    ! Read STNID (* as wildcard)    
    read(nulstat,'(2X,A9)',iostat=ios,err=10,end=10) chm_std%stnids(jelm) 

!   Read (1) BUFR element,
!        (2) Flag indication if EOR provided from this ascii file or
!            to be read from the BURP file,
!        (3) Index specifying OER setup method,
!        (4) Number of vertical levels
!        (5) Number of latitudes
!
!   Important: Combination of STNID, BUFR element and number of vertical levels
!              to determine association to the observations.
!
    read(nulstat,*,iostat=ios,err=10,end=10) chm_std%bfr(jelm),chm_std%brp(jelm),  &
       chm_std%std_type(jelm), chm_std%n_lvl(jelm), chm_std%n_lat(jelm),  &
       chm_std%std2(jelm), chm_std%std3(jelm)

    if (chm_std%n_lvl(jelm).lt.1) chm_std%n_lvl(jelm)=1
    if (chm_std%n_lat(jelm).lt.1) chm_std%n_lat(jelm)=1
    
    if (icount+chm_std%n_lvl(jelm)*chm_std%n_lat(jelm).gt.isize) then
       write(*,'(10X,"Max array size exceeded: ",I6)') isize
       CALL ABORT3D('chm_read_obs_err_stddev: PROBLEM READING OBSERR STD DEV.')    
    end if

    ! disregard line of dashes
    read(nulstat,'(A)',iostat=ios,err=10,end=10) ligne
    
    if (chm_std%n_lvl(jelm).eq.1.and.chm_std%n_lat(jelm).eq.1) then
    
!      Read one value only (independent of level and latitude)
       
       icount=icount+1
       read(nulstat,*,iostat=ios,err=10,end=10) chm_std%std1(icount)

    else if (chm_std%n_lvl(jelm).eq.1.and.chm_std%n_lat(jelm).gt.1) then
    
!      Value dependent on latitude only
       
!      Read reference latitudes (must be in order of increasing size)
       
       read(nulstat,*,iostat=ios,err=10,end=10)                      &
              chm_std%lat(icount+1:icount+chm_std%n_lat(jelm))
      
!      Read OER-related values
  
       read(nulstat,*,iostat=ios,err=10,end=10)                 &
                 chm_std%std1(icount+1:icount+chm_std%n_lat(jelm))

       icount=icount+chm_std%n_lat(jelm)

    else if (chm_std%n_lvl(jelm).gt.1.and.chm_std%n_lat(jelm).eq.1) then
    
!      Value dependent on vertical level only
      
       do jlev=1,chm_std%n_lvl(jelm)
          icount=icount+1
          
!         Read vertical level and OER-related value.
          
          read(nulstat,*,iostat=ios,err=10,end=10)                 &
                 chm_std%levels(icount),chm_std%std1(icount)

       end do
   
    else if (chm_std%n_lvl(jelm).gt.1.and.chm_std%n_lat(jelm).gt.1) then
    
!      Value dependent on vertical level and latitude 
       
!      Read reference latitudes (must be in order of increasing size)
       read(nulstat,*,iostat=ios,err=10,end=10)                      &
              chm_std%lat(icount+1:icount+chm_std%n_lat(jelm))
!       write(*, '(10X,20F9.3)') chm_std%lat(icount+1:icount+chm_std%n_lat(jelm))
      
       do jlev=1,chm_std%n_lvl(jelm)
          
!         Read vertical level and OER-related lat-dependent values.
          
          read(nulstat,*,iostat=ios,err=10,end=10)                   &
                 chm_std%levels(icount+jlev),                           &
                 chm_std%std1(icount+(jlev-1)*chm_std%n_lat(jelm)+1:icount+jlev*chm_std%n_lat(jelm))

       end do
       icount=icount+chm_std%n_lat(jelm)*chm_std%n_lvl(jelm)
    end if
  end do
   
 10 if (ios.gt.0) then
       WRITE(*,*) 'File read error message number: ',ios
       CALL ABORT3D('chm_read_obs_err_stddev: PROBLEM READING OBSERR STD DEV.')    
    end if
 
 11 CLOSE(UNIT=NULSTAT)
    IERR=FCLOS(NULSTAT)    

  end subroutine chm_read_obs_err_stddev

!-----------------------------------------------------------------------------------------

  subroutine chm_obs_err_stddev_index(CSTNID,NLEV,ITYP,ZLAT,ISTNID,JINT)
!
!  s/r chm_set_obs_err_stddev_index - Returns the station ID and latitude 
!                                     indices corresponding to a measurement
!
!  Author   : M. Sitwell Feb 2015 
!             - Content moved from code originally in oer_fill_obs_erreurs.
!             
!  Revisions: 
!
!----------------------------------------------------------------------------------------

    implicit none

    CHARACTER(len=12), intent(in) :: CSTNID
    integer, intent(in)           :: NLEV,ITYP
    real(8), intent(in)           :: ZLAT
    integer, intent(out)          :: ISTNID,JINT
    integer                       :: JN,ilen1,ilen2,ji,ibegin
    logical                       :: iset


 ! Important: Combination of STNID, BUFR element and number of vertical levels
 !            to determine association to the observations.

 !            Find stnid with same number of vertical levels and same BUFR element.
 !            Note: * in cstd_stndi_chm stands for a wildcard
                
    ISTNID=0
    DO JN=1,chm_std%n_stnid

       ! First compare STNID values allowing for * and blanks in 
       ! chm_std%stnids(JN) as wildcards
       iset = stnid_equal(chm_std%stnids(JN),CSTNID)
                   
       IF (iset) THEN
          IF (NLEV .EQ. chm_std%n_lvl(JN) .AND. &
               ITYP .EQ. chm_std%bfr(JN) ) THEN
             ISTNID=JN
             exit
          END IF
       END IF

    END DO

    IF (ISTNID.EQ.0) THEN
       WRITE(*,'(1X,"Error std. dev. for STNID= ",A10," not found. Set to 5%.")') &
            CSTNID
    ELSE
       ! IF (chm_std%brp(ISTNID).NE.0) THEN
       
       !   Read initial error standard deviations from obs BURP file.
       !   Dimension must be equivalent to NLEV
       ! ...
       
       ! sigma(:) = ...
       
       ! END IF

       IF (chm_std%n_lat(ISTNID) .GT. 1) THEN

          ! Find latitude index for interpolation.
          ! Assuming increasing latitudes in chm_std%lat

          ibegin=chm_std%ibegin(ISTNID)-1
          IF (ZLAT .GE. chm_std%lat(ibegin+chm_std%n_lat(ISTNID))) THEN
             JINT=chm_std%n_lat(ISTNID)+1
          ELSE
             DO JINT=1,chm_std%n_lat(ISTNID)
                IF (ZLAT .LE. chm_std%lat(ibegin+JINT) ) exit
             END DO
          END IF
                                           
       END IF
    END IF

  end subroutine chm_obs_err_stddev_index

!----------------------------------------------------------------------------------------

  function chm_get_obs_err_stddev(CSTNID,NLEV,ITYP,ZLAT,ZVAL,ZLEV,IFIRST) result(obs_err_stddev) 
!
!  s/r chm_set_obs_err_stddev - Returns the observational error std for a CH family measurement
!
!  Author   : M. Sitwell, ARQI/AQRD, Feb 2015 
!             - Content moved from code originally in oer_fill_obs_erreurs.
!
!  Revisions: 
!
!----------------------------------------------------------------------------------------

    implicit none
    
    CHARACTER(len=12) :: CSTNID
    real(8)  :: ZVAL,ZLEV,ZLAT
    real(8)  :: obs_err_stddev
    real(8)  :: wgt,zwb
    integer  :: NLEV,ITYP,ibegin,ILEV,JN
    logical  :: IFIRST
    integer, save  :: ISTNID,JINT


    ! If this call is for the first level for this measurement, get
    ! the station ID and latitude indices corresponding to this measurement
    if (ifirst) call chm_obs_err_stddev_index(CSTNID,NLEV,ITYP,ZLAT,ISTNID,JINT)


    ! Identify level if needed
                   
    IF (ISTNID .EQ. 0) THEN
       
       ! Set error standard deviations as 5% default value.       
       obs_err_stddev = 0.05D0*ZVAL
       
    ELSE
             
       IF (chm_std%n_lvl(ISTNID) .GT. 1) THEN
                  
          ! Find nearest vertical level (no interpolation)
                 
          zwb=1.E10
          ibegin=chm_std%ibegin(ISTNID)-1
          DO JN=1,chm_std%n_lvl(ISTNID)
             IF (zwb .GT. abs(ZLEV-chm_std%levels(ibegin+JN)) ) THEN
                ILEV=JN
                zwb=abs(ZLEV-chm_std%levels(ibegin+JN))
             END IF
          END DO
          ILEV=ibegin+(ILEV-1)*chm_std%n_lat(ISTNID)+1
       ELSE
          ILEV=chm_std%ibegin(ISTNID)     
       END IF

       IF (chm_std%n_lat(ISTNID) .GT. 1) THEN
                
          ! Apply interpolation

          ILEV=ILEV+JINT-1
          ibegin=chm_std%ibegin(ISTNID)-1
          IF (JINT.EQ.1.OR.JINT.GT.chm_std%n_lat(ISTNID)) THEN
             wgt=chm_std%std1(ILEV)
          ELSE
             wgt=(chm_std%std1(ILEV-1)*(chm_std%lat(ibegin+JINT)-ZLAT)+ &
                  chm_std%std1(ILEV)*(ZLAT-chm_std%lat(ibegin+JINT-1)))/ &
                  (chm_std%lat(ibegin+JINT)-chm_std%lat(ibegin+JINT-1))
          END IF
       ELSE
          wgt=chm_std%std1(ILEV)                
       END IF
                                         
       IF (chm_std%brp(ISTNID).EQ.0) THEN
               
          ! Set error standard deviations from scratch using content of
          ! previously read content of the "obsinfo_chm" file.
                
          IF (chm_std%std_type(ISTNID).EQ. 0) THEN
             obs_err_stddev = wgt
          ELSE IF (chm_std%std_type(ISTNID).EQ. 1) THEN
             obs_err_stddev = min(chm_std%std3(ISTNID),max(chm_std%std2(ISTNID),wgt*ZVAL))
          ELSE IF (chm_std%std_type(ISTNID) .EQ. 2) THEN
             obs_err_stddev = sqrt(chm_std%std2(ISTNID)**2+(wgt*ZVAL)**2)
          ELSE 
!             IF (INDEX_BODY.EQ.IDATA)  &
!                  WRITE(*,'(1X,"EOR setup type ",I3," for STNID ",A10," is not recognized.")')     &
!                  chm_std%std_type(ISTNID) , CSTNID
             WRITE(*,'(1X,"EOR setup type ",I3," is not recognized.")')     &
                  chm_std%std_type(ISTNID)
          END IF

       ELSE
          
!                  Adjust error standard deviations read from BURP file if requested.
!                     
!          IF (chm_std%std_type(ISTNID).EQ. 0) THEN
!             obs_err_stddev = sigma(INDEX_BODY-IDATA+1)
!          ELSE IF (chm_std%std_type(ISTNID).EQ. 1) THEN
!             obs_err_stddev = max(chm_std%std2(ISTNID),wgt*sigma(INDEX_BODY-IDATA+1))
!          ELSE 
!             IF (INDEX_BODY.EQ.IDATA)  &
!                  WRITE(*,'(1X,"EOR setup type ",I3," for STNID ",A10," is not recognized.")')     &
!                  chm_std%std_type(ISTNID) , CSTNID
!          END IF
!       END IF
              
       END IF
    END IF

  end function chm_get_obs_err_stddev

!-----------------------------------------------------------------------------------------

  subroutine chm_dealloc_obs_err_stddev
!
! Author  : Y. Rochon  Nov 2014
! Revision: 
!
! Purpose: Deallocate temporary storage space used for observation errors for the CH family
!
!---------------------------------------------------------------------------------------
  
  if (chm_std%n_stnid.gt.0) then
      deallocate(chm_std%stnids)
      deallocate(chm_std%n_lvl,chm_std%std_type,chm_std%ibegin)
      deallocate(chm_std%bfr,chm_std%brp,chm_std%n_lat)
      deallocate(chm_std%std1,chm_std%std2,chm_std%std3)
      deallocate(chm_std%levels,chm_std%lat)
  end if
  
  end subroutine chm_dealloc_obs_err_stddev

!-----------------------------------------------------------------------------------------
!------------------- Miscellaneous utilities functions and routines ----------------------

  function stnid_equal(id1,id2) result(same)
!
! Author  : Y. Rochon  Nov 2014
! Revision: 
!           M. Sitwell, Feb 2015
!           - Code set as a function.
!
! Purpose: Compares STNID values allowing for * and blanks in id1 as wildcards
!
!-----------------------------------------------------------------------------------------
    
    implicit none

    logical :: same
    CHARACTER(len=12) :: id1,id2
    integer :: ilen1,ilen2,ji

    ilen1=len_trim(id1)
    ilen2=len_trim(id2)            
    IF (ilen1.le.ilen2) THEN          
       same = .TRUE.
       DO ji=1,ilen1
          IF ( id1(ji:ji).ne.'*' .AND. id2(ji:ji).ne.id1(ji:ji) ) THEN
             same = .FALSE.
             exit
          END IF
       END DO
    END IF
    
  end function stnid_equal
           
!-------------------------------------------------------------------------------------------

end module chem_mod
