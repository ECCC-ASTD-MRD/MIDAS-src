!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE GDOUT2(varName,pptrans,KLEV,lplok,kip1,FlipLatitude,statevector,field3d,zes,ztv,zgz,zhu)
#if defined (DOC)
*
***s/r GDOUT2  - Transfer of the content of COMGD0 on a RPN
*     .          standard file.
*
*Author  : P. Gauthier *ARMA/AES  June 9, 1992
*
*Arguments
*     i   varName : variable name
*     i   KLEV    : index of the level to be transferred
* OUTPUT
*     o   pptrans : vector containing the variable
*     o   lplok   : logical indicating if the variable has been
*                   implemented
*     o   kip1    : ip1 of the corresponding level
*
#endif
C
      use MathPhysConstants_mod
      use EarthConstants_mod
      use gridStateVector_mod
      IMPLICIT NONE
      INTEGER klev,kip1
      type(struct_gsv) :: statevector
      real*8 :: pptrans(statevector%ni,statevector%nj)
      real*8 :: zes(statevector%ni,statevector%nlev,statevector%nj)
      real*8 :: ztv(statevector%ni,statevector%nlev,statevector%nj)
      real*8 :: zgz(statevector%ni,statevector%nlev,statevector%nj)
      real*8 :: zhu(statevector%ni,statevector%nlev,statevector%nj)
      real*8 :: field3d(statevector%ni,statevector%nlev,statevector%nj)
      character(len=*) :: varName
      logical lplok, FlipLatitude
*
      INTEGER JLON, JGL
      REAL*8 ZTEMP, ZGEOP, ZDAM, ZCON, un, dix
C
      kiP1      =  statevector%vco%ip1_M(klev)
      un = 1.0D0
      dix = 1.0D1
C
C     2. Transfer of the fields of COMGD to an internal buffer
C     .  -----------------------------------------------------
C
c  SET DIAGNOSTIC VARIABLES ON IF FIRST VAR IS PP (for GENINCR branch)
c
      lplok = .true.
C
C     .  2.1 Fields associated with model variables
C
      IF(trim(varName).EQ.'VT') THEN
C
C     *  Virtual temperature field
C
        DO JLON = 1, statevector%ni
          DO JGL = 1, statevector%nj
            PPTRANS(JLON,JGL) = ZTV(JLON,KLEV,JGL)
          END DO
        END DO
      ELSE IF(trim(varName).EQ.'GZ') THEN
C
C     *  Geopotential field
C
        ZGEOP  = dix * RG
        ZDAM   = un/ZGEOP
        DO JLON = 1, statevector%ni
          DO JGL = 1, statevector%nj
            PPTRANS(JLON,JGL) = ZDAM * zgz(JLON,KLEV,JGL)
          END DO
        END DO
C
C     *  Zonal wind component (in Knots)
C
      ELSE IF(trim(varName).EQ.'UU') THEN
        DO JGL = 1, statevector%nj
          DO JLON = 1, statevector%ni
            PPTRANS(JLON,JGL) = field3d(JLON,KLEV,JGL)
     S           *MPC_KNOTS_PER_M_PER_S_R8
          END DO
        END DO
C
C     *  Meridional wind component (in Knots)
C
      ELSE IF(trim(varName).EQ.'VV') THEN
        DO JGL = 1, statevector%nj
          DO JLON = 1, statevector%ni
            PPTRANS(JLON,JGL) = field3d(JLON,KLEV,JGL)
     S           *MPC_KNOTS_PER_M_PER_S_R8
          END DO
        END DO
C
C     *  Humidity field
C
      ELSE IF(trim(varName).EQ.'ES') THEN
        DO JLON = 1, statevector%ni
          DO JGL = 1, statevector%nj
            PPTRANS(JLON,JGL) = zes(JLON,KLEV,JGL)
          END DO
        END DO
C
      ELSE IF(trim(varName).EQ.'LQ') THEN
        DO JLON = 1, statevector%ni
          DO JGL = 1, statevector%nj
            PPTRANS(JLON,JGL) = field3d(JLON,KLEV,JGL)
          END DO
        END DO
C
      ELSE IF(trim(varName).EQ.'HU') THEN
          DO JLON = 1, statevector%ni
            DO JGL = 1, statevector%nj
              PPTRANS(JLON,JGL) = zhu(JLON,KLEV,JGL)
            END DO
          END DO
C
C     *    Surface Pressure from units of Pascal to millibar
C
      ELSE IF(trim(varName).EQ.'P0') THEN
        kip1=0
        DO JLON = 1, statevector%ni
          DO JGL = 1, statevector%nj
            PPTRANS(JLON,JGL) = field3d(JLON,1,JGL)*MPC_MBAR_PER_PA_R8
          END DO
        END DO
C
C     *    All remaining 2D and 3D variables that do not require unit conversions
C
      else
        if(gsv_varExist(varName)) then
          if(vnl_vartypeFromVarname(varName).eq.'SF') then
            kip1=0
            do jlon = 1, statevector%ni
              do jgl = 1, statevector%nj
                pptrans(jlon,jgl) = field3d(jlon,1,jgl)
              enddo
            enddo
          else
            do jlon = 1, statevector%ni
              do jgl = 1, statevector%nj
                pptrans(jlon,jgl) = field3d(jlon,klev,jgl)
              enddo
            enddo
          endif
        else
          LPLOK = .FALSE.
          WRITE(*,*)' ****************************************'
          WRITE(*,'(" GDOUT2: THE FOLLOWING FIELD IS NOT "
     &         ,"SUPPORTED  varName= ",A2)')varName
          WRITE(*,*)' ****************************************'
        endif
      ENDIF
C
      IF (lplok .and. FlipLatitude) THEN
         DO JLON   = 1, statevector%ni
            DO JGL = 1, statevector%nj/2
               ZTEMP = pptrans(JLON,JGL)
               pptrans(JLON,JGL)                 = pptrans(JLON,statevector%nj-JGL+1)
               pptrans(JLON,statevector%nj-JGL+1)= ZTEMP
            end do
         end do
      END IF
C
      RETURN
      END
