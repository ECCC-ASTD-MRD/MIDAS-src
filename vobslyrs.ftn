!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE VOBSLYRS(lcolumnghr,lobsSpaceData)
#if defined (DOC)
*
***s/r  VOBSLYRS
*
*Author  : P. Koclas *CMC/AES  Sept 7 1994
*Revision:
*          P. Koclas *CMC/AES  February 1995
*          -Allow ROBDATA(NCM_XTR,JDATA)=0 when
*           level of data= Bottom layer of model (pressure case)
*
*          P. Koclas *CMC/AES  July 1995
*          -fix bugs
*          -( mobdata <---> robdata confusion)
*          -( IF ( NINT(ZLEV) .EQ. NINT(ZPB) ) THEN )
*          P. Koclas *CMC/AES  April 1996
*          - new definition of "NCM_LYR" to include reference levels of satem data
*          C. CHARETTE *CMC/AES OCT 1998
*          - Adapted for version on eta levels
*          C. CHARETTE *CMC/AES OCT 2000
*          - Adapted to process data with pressure vertical coordinate
*          D. Anselmo *ARMA/MSC OCT 2004
*          - Adapted to process atmospheric and surface ln specific humidity
**    Purpose:
*      Find which model levels to use for the vertical interpolation
*      of model fields to CMA data.
*
*Arguments
*
*       input:
*          none
#endif
      use MathPhysConstants_mod
      use obsSpaceData_mod
      use columnData_mod 
      use bufr
      IMPLICIT NONE
*implicits
#include "comlun.cdk"
#include "comdim.cdk"
#include "comdimo.cdk"
#include "cvcord.cdk"
*
      type(struct_columnData) :: lcolumnghr
      type(struct_obs) :: lobsSpaceData

      INTEGER J,JK,JDATA
      REAL*8 ZLEV,ZPREF,ZPT,ZPB,ZXI
      INTEGER IOBS,IDATYP,IBEGIN,ILAST,IK,ITYP
      LOGICAL LLOK, LLPRINT
      CHARACTER *2 CLFAM,cvar
C
C     --------
C
      LLPRINT = .FALSE.
C
 100  CONTINUE
C-----------------------------------------------------------------------
C
C
C         --------
C           ETA
C         --------
C
C     1. Find where extrapolation is needed
C        ----------------------------------
C
C     1.1 PPP Vertical coordinate
C
         DO JDATA= 1,obs_num_obstotal(lobsSpaceData)
            LLOK = ( (obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1     .OR.
     &                obs_elem_i(lobsSpaceData,'VNM ',JDATA) .EQ. BUFR_NEHU) .AND.
     &                obs_elem_i(lobsSpaceData,'VCO ',JDATA) .EQ. 2 )
            IF ( LLOK ) THEN
               IF(obs_elem_i(lobsSpaceData,'VNM ',JDATA) .NE. BUFR_NEDZ ) THEN
                  ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
               ELSE
                  ZLEV = obs_elem_r8(lobsSpaceData,'PRL ',JDATA)
               ENDIF
               IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
               ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
               CALL GETVARTYPE(ITYP,CVAR)
               IF (CVAR .EQ. 'NA') THEN
                 ZPT= LCOLUMNGHR%RPPOBS(1,IOBS)
                 ZPB= LCOLUMNGHR%RPPOBS(LCOLUMNGHR%NLEV,IOBS)
               ELSEIF (CVAR .EQ. 'MM' ) THEN
                 ZPT= LCOLUMNGHR%RPPOBS_M(1,IOBS)
                 ZPB= LCOLUMNGHR%RPPOBS_M(LCOLUMNGHR%NLEV,IOBS)
               ELSEIF (CVAR .EQ. 'TH' ) THEN
                 ZPT= LCOLUMNGHR%RPPOBS_T(1,IOBS)
                 ZPB= LCOLUMNGHR%RPPOBS_T(LCOLUMNGHR%NLEV,IOBS)
               ENDIF   
!               ZPB= LCOLUMNGHR%RPPOBS(LCOLUMNGHR%NFLEV,IOBS)+ 0.01D0 !still needed?
               IF ( ZLEV .LT. ZPT ) THEN
                  call obs_set_i(lobsSpaceData,'XTR ',JDATA,1)
               ELSE IF ( ZLEV .GT. ZPB ) THEN
                  call obs_set_i(lobsSpaceData,'XTR ',JDATA,2)
               ELSE
                  call obs_set_i(lobsSpaceData,'XTR ',JDATA,0)
               ENDIF
****************************************************************
               if (LLPRINT .AND. obs_elem_c9(lobsSpaceData,'STID',iobs) .eq. '72562') then
                 write(nulout,*)
     &                'vobslyrs PPP:jdata,stn,ielm,zlev,ZPT,ZPB'
     &                ,',MOB(XTR,),MOB(ASS,) ',jdata,obs_elem_c9(lobsSpaceData,'STID',iobs)
     &                ,ityp,zlev,ZPT,ZPB,obs_elem_i(lobsSpaceData,'XTR ',JDATA)
     &                ,obs_elem_i(lobsSpaceData,'ASS ',JDATA),CVAR
               endif
*****************************************************************
             ENDIF
         END DO
C
C     1.2 ZZZ Vertical coordinate
C
         DO JDATA= 1,obs_num_obstotal(lobsSpaceData)
            LLOK = (obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1 .AND.
     &              obs_elem_i(lobsSpaceData,'VCO ',JDATA) .EQ. 1 )
            IF ( LLOK ) THEN
               IF(obs_elem_i(lobsSpaceData,'VNM ',JDATA) .NE. BUFR_NEDZ ) THEN
                  ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
               ELSE
                  ZLEV = obs_elem_r8(lobsSpaceData,'PRL ',JDATA)
               ENDIF
               IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
               ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
               CALL GETVARTYPE(ITYP,CVAR)
               IF (CVAR .EQ. 'NA') THEN
                  ZPT= lcolumnghr%gz(1,IOBS)/RG
                  ZPB= lcolumnghr%gz(LCOLUMNGHR%NLEV,IOBS)/RG
               ELSEIF (CVAR .EQ. 'MM' ) THEN
                  ZPT= lcolumnghr%gz_M(1,IOBS)/RG
                  ZPB= lcolumnghr%gz_M(LCOLUMNGHR%NLEV_M,IOBS)/RG
               ELSEIF (CVAR .EQ. 'TH' ) THEN
                  ZPT= lcolumnghr%gz_T(1,IOBS)/RG
                  ZPB= lcolumnghr%gz_T(LCOLUMNGHR%NLEV_T,IOBS)/RG
               ENDIF   
!               ZPT= lcolumnghr%gz(1,IOBS)/RG
!               ZPB= lcolumnghr%gz(LCOLUMNGHR%NLEV,IOBS)/RG
               IF ( ZLEV .GT. ZPT ) THEN
                  call obs_set_i(lobsSpaceData,'XTR ',JDATA,1)
               ELSE IF ( ZLEV .LT. ZPB ) THEN
                  call obs_set_i(lobsSpaceData,'XTR ',JDATA,2)
               ELSE
                  call obs_set_i(lobsSpaceData,'XTR ',JDATA,0)
               ENDIF
****************************************************************
               if (LLPRINT .AND. obs_elem_c9(lobsSpaceData,'STID',iobs) .eq. '72562') then
                 write(nulout,*)
     &                'vobslyrs ZZZ:jdata,stn,ielm,zlev,ZPT,ZPB'
     &                ,',MOB(XTR,),MOB(ASS,),CVAR ',jdata,obs_elem_c9(lobsSpaceData,'STID',iobs)
     &                ,ityp,zlev,ZPT,ZPB,obs_elem_i(lobsSpaceData,'XTR ',JDATA)
     &                ,obs_elem_i(lobsSpaceData,'ASS ',JDATA),CVAR
               endif
*****************************************************************
             ENDIF
         END DO
C
C
C     2. FInd interpolation layer
C        ------------------------
C        (Model levels are assumed to be in increasing order in Mbs)
C        ...The SIGN and MAX intrinsincs are used for vectorization
C           purposes......
C
C     2.1  PPP Vertical coordinate
C
         DO JDATA=1,obs_num_obstotal(lobsSpaceData)
            call obs_set_i(lobsSpaceData,'LYR ',JDATA,0)
         END DO
C
         DO JDATA= 1,obs_num_obstotal(lobsSpaceData)
            LLOK = ( (obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1     .OR.
     &                obs_elem_i(lobsSpaceData,'VNM ',JDATA) .EQ. BUFR_NEHU) .AND.
     &                obs_elem_i(lobsSpaceData,'VCO ',JDATA) .EQ. 2 )
            IF ( LLOK ) THEN
               IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
               ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
               ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
               IK = 1
               CALL GETVARTYPE(ITYP,CVAR)
               IF (CVAR .EQ. 'NA') THEN
                  DO JK = 2,LCOLUMNGHR%NLEV - 1
                     ZPT = LCOLUMNGHR%RPPOBS(JK,IOBS)
                     IF( ZLEV .GT. ZPT ) IK = JK
                  END DO
                  ZPT = LCOLUMNGHR%RPPOBS(IK,IOBS)
                  ZPB = LCOLUMNGHR%RPPOBS(IK+1,IOBS) 
               ELSEIF (CVAR .EQ. 'MM' ) THEN
                  DO JK = 2,LCOLUMNGHR%NLEV_M - 1
                     ZPT = LCOLUMNGHR%RPPOBS_M(JK,IOBS)
                     IF( ZLEV .GT. ZPT ) IK = JK
                  END DO
                  ZPT = LCOLUMNGHR%RPPOBS_M(IK,IOBS)
                  ZPB = LCOLUMNGHR%RPPOBS_M(IK+1,IOBS) 
               ELSEIF (CVAR .EQ. 'TH' ) THEN
                  DO JK = 2,LCOLUMNGHR%NLEV_T - 1
                     ZPT = LCOLUMNGHR%RPPOBS_T(JK,IOBS)
                     IF( ZLEV .GT. ZPT ) IK = JK
                  END DO
                  ZPT = LCOLUMNGHR%RPPOBS_T(IK,IOBS)
                  ZPB = LCOLUMNGHR%RPPOBS_T(IK+1,IOBS) 
               ENDIF   
!               DO JK = 2,LCOLUMNGHR%NLEV - 1
!                 ZPT  = LCOLUMNGHR%RPPOBS(JK,IOBS)
!                 IF( ZLEV .GT. ZPT ) IK = JK
!               END DO
!               ZPT  = LCOLUMNGHR%RPPOBS(IK,IOBS)
!               zpb=LCOLUMNGHR%RPPOBS(IK+1,IOBS)
               call obs_set_i(lobsSpaceData,'LYR ',JDATA, IK)
****************************************************************
               if (LLPRINT .AND. obs_elem_c9(lobsSpaceData,'STID',iobs) .eq. '72562') then
                 write(nulout,*)
     &                'vobslyrs PPP:jdata,iobs,stn,ielm,ik,zlev'
     &                ,',pppobs(ik+1,),pppobs(ik,),rdata(lyr,) '
     &                ,jdata,iobs,obs_elem_c9(lobsSpaceData,'STID',iobs),ityp,ik,zlev,ZPB,ZPT
     &                ,obs_elem_i(lobsSpaceData,'LYR ',JDATA),CVAR
               endif
*****************************************************************
             ENDIF
           END DO
C
C     2.2  ZZZ Vertical coordinate and surface observations
C
         DO JDATA= 1,obs_num_obstotal(lobsSpaceData)
            LLOK = ( (obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1     .OR.
     &                obs_elem_i(lobsSpaceData,'VNM ',JDATA) .EQ. BUFR_NEHS) .AND.
     &                obs_elem_i(lobsSpaceData,'VCO ',JDATA) .EQ. 1 )
            IF ( LLOK ) THEN
               IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
               ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
               ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
               IK = 1
               CALL GETVARTYPE(ITYP,CVAR)
               IF (CVAR .EQ. 'NA') THEN
                  DO JK = 2,LCOLUMNGHR%NLEV - 1
                     ZPT = lcolumnghr%gz(JK,IOBS)/RG
                     IF( ZLEV .LT. ZPT ) IK = JK
                  END DO
               ELSEIF (CVAR .EQ. 'MM' ) THEN
                  DO JK = 2,LCOLUMNGHR%NLEV_M - 1
                     ZPT = lcolumnghr%gz_M(JK,IOBS)/RG
                     IF( ZLEV .LT. ZPT ) IK = JK
                  END DO
               ELSEIF (CVAR .EQ. 'TH' ) THEN
                  DO JK = 2,LCOLUMNGHR%NLEV_T - 1
                     ZPT = lcolumnghr%gz_T(JK,IOBS)/RG
                     IF( ZLEV .LT. ZPT ) IK = JK
                  END DO
               ENDIF
!               DO JK = 2,LCOLUMNGHR%NLEV - 1
!                 ZPT  = lcolumnghr%gz(JK,IOBS)/RG
!                 IF( ZLEV .LT. ZPT ) IK = JK
!               END DO
               IF((ITYP.EQ.BUFR_NEPS .or. ityp .eq. BUFR_NEPN) ) THEN
                 IK=0
               ELSEIF(ITYP.EQ.BUFR_NETS .or. ityp .eq. BUFR_NESS .OR.
     &                ITYP.EQ.BUFR_NEUS .or. ityp .eq. BUFR_NEVS .OR.
     &                ITYP.EQ.BUFR_NEHS ) THEN
                 IK=LCOLUMNGHR%NLEV-1
               ENDIF
               call obs_set_i(lobsSpaceData,'LYR ',JDATA, IK)
****************************************************************
                   if (LLPRINT .AND. obs_elem_c9(lobsSpaceData,'STID',iobs) .eq. '72562') then
                     ZPB  = lcolumnghr%gz(IK+1,IOBS)/RG
                     write(nulout,*) 'vobslyrs ZZZ:jdata,iobs,stn,ielm,ik,zlev'
     &                ,',GZ(ik,),GZ(ik+1,),rdata(lyr,) '
     &                    ,jdata,iobs,obs_elem_c9(lobsSpaceData,'STID',iobs),ityp,ik,zlev,ZPT,ZPB
     &                    ,obs_elem_i(lobsSpaceData,'LYR ',JDATA)
                   endif
*****************************************************************
             ENDIF
           END DO
C
C     2.3   Reference ppp level of thickness data (SATEMS)
C           -----
C
            DO J = 1,NFILES
               IF ((CFAMTYP(J) .EQ. 'ST').AND.(NBEGINTYP(J) .GT. 0))THEN
                  IBEGIN=NBEGINTYP(J)
                  ILAST=NENDTYP(J)
                  DO JDATA= IBEGIN,ILAST
                     LLOK = (obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1 .AND.
     &                       obs_elem_i(lobsSpaceData,'VCO ',JDATA) .EQ. 2 )
                     IF ( LLOK ) THEN
                        IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
                        ZLEV = obs_elem_r8(lobsSpaceData,'PRL ',JDATA)
                        IK = 1
                        DO JK = 2,LCOLUMNGHR%NLEV - 1
                          ZPT  = LCOLUMNGHR%RPPOBS(JK,IOBS)
                          IF( ZLEV .GT. ZPT ) IK = JK
                        END DO
                        call obs_set_i(lobsSpaceData,'LYR ',JDATA, obs_elem_i(lobsSpaceData,'LYR ',JDATA)
     &                       + 1000 * IK)
                     ENDIF
****************************************************************
c       write(nulout,*) 'vobslyrs PRL:JDATA,iobs,IK,zlev,ZPT,ZPB '
c     &         ,JDATA,iobs,IK,ZLEV,LCOLUMNGHR%RPPOBS(IK,IOBS),LCOLUMNGHR%RPPOBS(IK+1,IOBS)
*****************************************************************
                  END DO
               ENDIF
            END DO
 300  CONTINUE
C
      RETURN
      END

