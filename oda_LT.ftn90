!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
subroutine oda_LT
  use mod4dv, only : l4dvar
  USE mpi_mod
  implicit none
  !
  !Purpose: Adjoint of Localisation (3D) / Adjoint Model (4D) operator
  !Compute adjoint grided increments from adjoint profiled increments
  !  ->In 3D mode : Call the adjoint of the bilinear interpolator
  !  ->In 4D mode : Send adjoint profiled increments to the ADJM and wait
  !    for the grided adjoint increments
  !  ->Results are saved in COMGD
  !
  !Author  : S. Pellerin *ARMA/MRB January 2009
  !
  !Revision:
  !
  ! Luc Fillion - ARMA/EC - 5 May 2009 - Upgrade 3dvar LU/GU to v_10_2_2.
  ! Bin HE     - ARMA/MRB  - Oct. 2009 - Implemented MPI to 3DVAR. 
  !
#include "comdim.cdk"
#include "comcva.cdk"
#include "comgd0.cdk"
  ! Local declarations
  integer :: nl_ilev,nl_err
  integer :: ierr,tgsize,sizegd 
  integer :: jlat,jlon,jlev
  real*8 :: zmax,zmean
   
  call tmg_start(51,'VAR_CH') !
  call apreobs
  call tmg_stop(51)        !

  call tmg_start(76,'GD<->PROF')
  GD=0.0D0
  sizegd=size(GD) 
  if(l4dvar) then
     !
     !     Communicate adjoint profiles to the adjoint model
     !     
!modular1     call putprofad
     !     
     !     and wait for its backward integration (gridded) results
     !     
!modular1     if(mpi_myid == 0) call getdx('A')
     CALL rpn_comm_bcast(GD,sizegd,"mpi_double_precision",0,"GRID",ierr)
     CALL gd2mvoad('TG',1)
  else
     CALL NEWBILINAD
  endif
  call tmg_stop (76)

  zmax=0.0d0
  zmean=0.0d0
  do jlat=1,nj
    do jlev=1,nkgdim
      do jlon=1,ni
        if(abs(gd(jlon,jlev,jlat)).gt.zmax) zmax=abs(gd(jlon,jlev,jlat))
        zmean=zmean+gd(jlon,jlev,jlat)/dble(nkgdim*ni*nj)
      enddo
    enddo
  enddo
  write(*,*) 'END OF ODA_LT, max,mean(gd)=',zmax,zmean


end subroutine oda_LT
