!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE SUCOVO(lobsSpaceData)
*
*s/r SUCOVO -READ AND SET OBSERVATION ERROR COVARIANCES
*
*Author  : M. Buehner  August 2012
*
**    Purpose:
*             -initialize observation error standard deviations
*              and vertical error correlation matrices
*             ***NOTE: "contains" subroutines READCOVO and SETERR
*Arguments
*     none
*
      use EarthConstants_mod
      use MathPhysConstants_mod
      use obsSpaceData_mod
      use bufr
      IMPLICIT NONE
      type(struct_obs) :: lobsSpaceData
      logical :: usenewerr
C
C ---------------------------------
C Previous contents of comstato.cdk:
C
      INTEGER  JPRLEV,JPBANDS,JPCORBANDS
      INTEGER  JPSATLV,JPNTYP,JPIDBRP
      INTEGER  JPRALEV,JPHLEV,JPSALEV
      INTEGER  JPMAXILEV,JPZLEV
C
      PARAMETER(JPRLEV=16,JPBANDS=3,JPCORBANDS=1)
      PARAMETER(JPSATLV=8,JPNTYP=2)
      PARAMETER(JPRALEV=17,JPHLEV=7,JPSALEV=7)
      PARAMETER(JPMAXILEV=47,JPIDBRP=254)
      PARAMETER(JPZLEV=63)
C
C     OBSERVATION  ERROR CORRELATIONS
C 1.  SATEMS
*     ---------
      INTEGER  NISLV(JPSATLV)
      REAL*8     DZOBSCOR(JPMAXILEV,JPMAXILEV,JPNTYP)
      REAL*8     XSATDEV(JPSALEV,JPNTYP)
C
C 2.  UPPER AIR
C     ---------
      INTEGER  NILV(JPRLEV)
      REAL*8     GZOBSCOR(JPMAXILEV,JPMAXILEV,JPBANDS)
      REAL*8     UUOBSCOR(JPMAXILEV,JPMAXILEV,JPBANDS)
      REAL*8     ESOBSCOR(JPMAXILEV,JPMAXILEV,JPBANDS)
      REAL*8     XOSTDEV(57,JPRLEV,JPBANDS)
C
C 3.  HUMSAT
C     ---------
      INTEGER  NIHULV(JPHLEV)
      REAL*8     HUOBSCOR(JPMAXILEV,JPMAXILEV)
C
C 4.  AIREP : ASDAR : SATOB
C     ---------------------
      REAL*8 XSTDEV(5,4)
      REAL*8 XSTDEVLV(10,2)
C
C     For new error file
C
      REAL*8 XSTDALL(20,11)
C
C 5.  SURFACE
C     ---------
      REAL*8     XSFCOBERR(57,1,JPIDBRP)
C
C 6.  PROFILER
C     ---------
      INTEGER    NILZ(JPZLEV)
      REAL*8     XPRSTDEV(JPZLEV)
C
C ---------------------------------
C     AIREP : ASDAR : SATOB
C     ---------------------
C     STANDARD DEVIATIONS  TABLES (FROM OI CODE:DORES)
C     -----------------------------------------------------
C                            Kts**2     Dam**2 DEG**2 DEG**2
C
      INTEGER J
      DATA (XSTDEV(J,1),J=1,5)/25.0D0,100.0D0,-5000.D0,4.50D0,-5000.D0/
      DATA (XSTDEV(J,2),J=1,5)/36.0D0,49.0D0,-5000.D0,3.00D0,9.0D0/
      DATA (XSTDEV(J,3),J=1,5)/25.0D0,36.0D0,-5000.D0,1.50D0,5.0D0/
      DATA (XSTDEV(J,4),J=1,5)/49.D0,49.D0,  .36D0,   2.25D0, 9.0D0/
C
      DATA (XSTDEVLV(J,1),J=1,10)/2.5D0,2.5D0,3.0D0,4.0D0,4.5D0,
     &                            5.0D0,5.5D0,5.5D0,5.5D0,6.0D0/
      DATA (XSTDEVLV(J,2),J=1,10)/1000.0D0,850.0D0,700.0D0,500.0D0,
     &                             400.0D0,300.0D0,250.0D0,200.0D0,
     &                             150.0D0,100.0D0/
C
C Read in the stddev (and possibly correlations) from statistics file
C
      call readcovo
C
C Set obs error information in obsSpaceData object
C
      call seterr

      CONTAINS  ! readcovo and seterr

      SUBROUTINE READCOVO
      IMPLICIT NONE
      REAL*8 ZEIGENV(JPRLEV),ZEIGEN(JPRLEV,JPRLEV),ZEIGMIN,ZALPHA
      REAL*8 ZPROJ(JPRLEV,JPRLEV)
      REAL*8 ZVCOR(JPRLEV,JPRLEV),UVCOR(JPRLEV,JPRLEV),
     $       ESVCOR(JPRLEV,JPRLEV)
      REAL*8 PHISTD(JPRLEV,JPBANDS),USTD(JPRLEV,JPBANDS),
     $       ESSTD(JPRLEV,JPBANDS),TTSTD(JPRLEV,JPBANDS)
      REAL*8 DZCOR(JPSALEV,JPSALEV)
      REAL*8 HUCOR(JPHLEV ,JPHLEV)
*
      INTEGER     IDUM,IERR,IKEY,JTYP
      INTEGER     INI,INJ,INK,IDATE,ISTAMP,IDT,INP
      INTEGER     IP1,IP2,IP3
      INTEGER     IJ,JI
      REAL*8      DHEURES
      CHARACTER*2 CTYPVAR
      CHARACTER*1 CGRTYP
      CHARACTER*4 CNOMVAR
      CHARACTER*12 CETIKET,CETIKETV
      CHARACTER*2 CTVAR
      CHARACTER*4 CNVAR
      LOGICAL     LLPRESNT,LLOK,LLPROB,LLTT
      INTEGER     FNOM,FSTOUV,FCLOS,FSTFRM,FSTLIR,VFSTLIR,FSTPRM
      EXTERNAL    FNOM,FSTOUV,FCLOS,FSTFRM,FSTLIR,VFSTLIR,FSTPRM
C
      INTEGER JPMXIDUA
      PARAMETER (JPMXIDUA=23)
      INTEGER IDLISTUA(JPMXIDUA)
      DATA    IDLISTUA/ 32, 33, 34, 35, 36, 37, 38, 135, 136, 137, 138
     &                ,139, 140 ,141 ,142 ,150, 151, 152, 153
     &                ,159, 160, 161, 162 /
C
      INTEGER JLEV,JBAND,JN,JELM,JID,IID
      INTEGER ILYR,ILEMU,ILEMV,ILEMGZ,ILEMTT,ILEMES
      INTEGER ILEMUS,ILEMVS,ILEMTS,ILEMESS,ILEMPS,ILEMPN
      REAL*8 ZLYR, ZLEV, ZCONGZ
      INTEGER :: nulstat,nulstat2
      LOGICAL :: isExist_L
      character*128 ligne
C
C     OPEN THE FILE WITH THE STATISTICS
C
      INQUIRE(FILE='./obscov',EXIST=isExist_L)
      IF ( isExist_L )then
        NULSTAT=0
        IERR=FNOM(NULSTAT,'./obscov','RND+OLD+R/O',0)
        IF ( IERR .EQ. 0 ) THEN
          write(*,*) 'READCOVO: File =  ./obscov'
          write(*,*) ' opened as unit file ',nulstat
          ierr =  fstouv(nulstat,'RND+OLD')
        ELSE
          CALL ABORT3D('READCOVO:COULD NOT OPEN FILE obscov!!')
        ENDIF
      ELSE
          CALL ABORT3D('READCOVO:NO OBSERVATION STAT FILE!!')
      ENDIF
C
C     OPEN THE NEW FILE WITH STATISTICS
C
      INQUIRE(FILE='./obserr',EXIST=isExist_L)
      IF ( isExist_L )then
        NULSTAT2=0
        IERR=FNOM(NULSTAT2,'./obserr','SEQ',0)
        IF ( IERR .EQ. 0 ) THEN
          write(*,*) 'READCOVO: File =  ./obserr'
          write(*,*) ' opened as unit file ',nulstat2
          open(unit=nulstat2, file='./obserr', status='OLD')
          USENEWERR=.true.
        ELSE
          CALL ABORT3D('SUCOVO:COULD NOT OPEN FILE obserr!!')
        ENDIF
      ELSE
        USENEWERR=.false.
        WRITE(*,*) '*****WARNING*****WARNING*****WARNING*****'
        WRITE(*,*) 'READCOVO: NO NEW OBSERVATION STAT FILE!!'
        WRITE(*,*) 'READCOVO: USING OLD STAT FILE ONLY!!'
        WRITE(*,*) '*****WARNING*****WARNING*****WARNING*****'
      ENDIF
C
C     CONVERSION FACTORS:
C
C     TO GEOPOTENTIAL
C     ---------------
      ZCONGZ=RG
C     ---------------
C
C*0.  DEFAULT VALUES
C     ----------------
C
      ILEMGZ=obs_get_obs_index_for_bufr_element ( BUFR_NEGZ )
       ILEMU=obs_get_obs_index_for_bufr_element ( BUFR_NEUU )
       ILEMV=obs_get_obs_index_for_bufr_element ( BUFR_NEVV )
      ILEMTT=obs_get_obs_index_for_bufr_element ( BUFR_NETT )
      ILEMES=obs_get_obs_index_for_bufr_element ( BUFR_NEES )
C
      ILEMUS=obs_get_obs_index_for_bufr_element ( BUFR_NEUS )
      ILEMVS=obs_get_obs_index_for_bufr_element ( BUFR_NEVS )
      ILEMTS=obs_get_obs_index_for_bufr_element ( BUFR_NETS )
      ILEMESS=obs_get_obs_index_for_bufr_element( BUFR_NESS )
      ILEMPS=obs_get_obs_index_for_bufr_element ( BUFR_NEPS )
      ILEMPN=obs_get_obs_index_for_bufr_element ( BUFR_NEPN )
C
      DO JELM =1,OBS_JPNBRELEM
        DO JID  =1,JPIDBRP
          XSFCOBERR(JELM,1,JID) = -1
         END DO
      END DO
C
      DO JBAND =1,JPBANDS
         DO JLEV  =1,JPRLEV
            IF(ILEMU  .NE. -1) XOSTDEV( ILEMU, JLEV,JBAND)=  2.235764D0
            IF(ILEMV  .NE. -1) XOSTDEV( ILEMV, JLEV,JBAND)=  2.235764D0
            IF(ILEMGZ .NE. -1) XOSTDEV( ILEMGZ,JLEV,JBAND)=  0.75D0
            IF(ILEMTT .NE. -1) XOSTDEV( ILEMTT,JLEV,JBAND)=  .82462113D0
            IF(ILEMES .NE. -1) XOSTDEV( ILEMES,JLEV,JBAND)=  3.00D0
         END DO
      END DO
C
C  The following std(us,vs,ts,ps,pn)  are taken or are derived from
C  ECMWF Tech. Memo no.241
C  "The ECMWF implementation of three dimensional variational
C  assimilation Part I: Formulation" (P.Courtier and al. 1997)
C  Units are: US,VS---> M/S
C             TS   ---> K
C             ESS  ---> K
C             PS,PN---> PA
C  We assume that the values for wind in the ECMWF document are
C  for the wind vector. We want values for the wind component.
      DO JELM =1,OBS_JPNBRELEM
            IF(ILEMUS .NE. -1 .AND. ILEMVS .NE. -1) THEN
              XSFCOBERR( ILEMUS,1,12) =  3.0D0/SQRT(2.0D0)
              XSFCOBERR( ILEMVS,1,12) =  3.0D0/SQRT(2.0D0)
              XSFCOBERR( ILEMUS,1,13) =  3.0D0/SQRT(2.0D0)
              XSFCOBERR( ILEMVS,1,13) =  3.0D0/SQRT(2.0D0)
              XSFCOBERR( ILEMUS,1,14) =  2.4D0/SQRT(2.0D0)
              XSFCOBERR( ILEMVS,1,14) =  2.4D0/SQRT(2.0D0)
              XSFCOBERR( ILEMUS,1,18) =  2.4D0/SQRT(2.0D0)
              XSFCOBERR( ILEMVS,1,18) =  2.4D0/SQRT(2.0D0)
              XSFCOBERR( ILEMUS,1,145)=  3.0D0/SQRT(2.0D0)
              XSFCOBERR( ILEMVS,1,145) = 3.0D0/SQRT(2.0D0)
              XSFCOBERR( ILEMUS,1,146) = 3.0D0/SQRT(2.0D0)
              XSFCOBERR( ILEMVS,1,146) = 3.0D0/SQRT(2.0D0)
              XSFCOBERR( ILEMUS,1,147) = 2.4D0/SQRT(2.0D0)
              XSFCOBERR( ILEMVS,1,147) = 2.4D0/SQRT(2.0D0)
              XSFCOBERR( ILEMUS,1,254) = 2.4D0/SQRT(2.0D0)
              XSFCOBERR( ILEMVS,1,254) = 2.4D0/SQRT(2.0D0)

              DO JID  =1,JPMXIDUA
                IID = IDLISTUA(JID)
                XSFCOBERR( ILEMUS,1,IID) =  3.0D0/SQRT(2.0D0)
                XSFCOBERR( ILEMVS,1,IID) =  3.0D0/SQRT(2.0D0)
              END DO
            ENDIF
            IF(ILEMTS .NE. -1 ) THEN
              XSFCOBERR( ILEMTS,1,12) = 2.0D0
              XSFCOBERR( ILEMTS,1,13) = 1.8D0
              XSFCOBERR( ILEMTS,1,14) = 1.8D0
              XSFCOBERR( ILEMTS,1,18) = 1.8D0
              XSFCOBERR( ILEMTS,1,145)= 1.8D0
              XSFCOBERR( ILEMTS,1,146)= 2.0D0
              XSFCOBERR( ILEMTS,1,147)= 1.8D0
              DO JID  =1,JPMXIDUA
                IID = IDLISTUA(JID)
                XSFCOBERR( ILEMTS,1,IID) =  1.8D0
              END DO
            ENDIF
            IF(ILEMESS .NE. -1 ) THEN
              XSFCOBERR( ILEMESS,1,12) =  3.0D0
              XSFCOBERR( ILEMESS,1,13) =  3.0D0
              XSFCOBERR( ILEMESS,1,14) =  3.0D0
              XSFCOBERR( ILEMESS,1,18) =  3.0D0
              XSFCOBERR( ILEMESS,1,145)=  3.0D0
              XSFCOBERR( ILEMESS,1,146)=  3.0D0
              XSFCOBERR( ILEMESS,1,147)=  3.0D0
              DO JID  =1,JPMXIDUA
                IID = IDLISTUA(JID)
                XSFCOBERR( ILEMESS,1,IID) =  3.0D0
              END DO
            ENDIF
            IF(ILEMPS .NE. -1 ) THEN
ccc          XSFCOBERR( ILEMPS,1,12) = SQRT((0.7*0.7)/(0.8*0.8))*100.
             XSFCOBERR( ILEMPS,1,12) =
     $                       SQRT((0.6D0*0.6D0)/(0.8D0*0.8D0))*100.D0
              XSFCOBERR( ILEMPS,1,13) =
     $                       SQRT((1.4D0*1.4D0)/(0.8D0*0.8D0))*100.D0
              XSFCOBERR( ILEMPS,1,14) =
     $                       SQRT((1.15D0*1.15D0)/(0.8D0*0.8D0))*100.D0
              XSFCOBERR( ILEMPS,1,18) =
     $                       SQRT((1.15D0*1.15D0)/(0.8D0*0.8D0))*100.D0
              XSFCOBERR( ILEMPS,1,145)=
     $                       SQRT((1.4D0*1.4D0)/(0.8D0*0.8D0))*100.D0
ccc          XSFCOBERR( ILEMPS,1,146)= SQRT((0.7*0.7)/(0.8*0.8))*100.
              XSFCOBERR( ILEMPS,1,146)=
     $                       SQRT((0.6D0*0.6D0)/(0.8D0*0.8D0))*100.D0
              XSFCOBERR( ILEMPS,1,147)=
     $                       SQRT((1.4D0*1.4D0)/(0.8D0*0.8D0))*100.D0
              DO JID  =1,JPMXIDUA
                IID = IDLISTUA(JID)
                XSFCOBERR( ILEMPS,1,IID) =
     $                       SQRT((0.7D0*0.7D0)/(0.8D0*0.8D0))*100.D0
              END DO
            ENDIF
            IF(ILEMPN .NE. -1 ) THEN
              XSFCOBERR( ILEMPN,1,12) =
     $                       SQRT((0.7D0*0.7D0)/(0.8D0*0.8D0))*100.D0
              XSFCOBERR( ILEMPN,1,13) =
     $                       SQRT((1.4D0*1.4D0)/(0.8D0*0.8D0))*100.D0
              XSFCOBERR( ILEMPN,1,14) =
     $                       SQRT((1.15D0*1.15D0)/(0.8D0*0.8D0))*100.D0
              XSFCOBERR( ILEMPN,1,18) =
     $                       SQRT((1.15D0*1.15D0)/(0.8D0*0.8D0))*100.D0
              XSFCOBERR( ILEMPN,1,145)=
     $                       SQRT((1.4D0*1.4D0)/(0.8D0*0.8D0))*100.D0
              XSFCOBERR( ILEMPN,1,146)=
     $                       SQRT((0.7D0*0.7D0)/(0.8D0*0.8D0))*100.D0
              XSFCOBERR( ILEMPN,1,147)=
     $                       SQRT((1.4D0*1.4D0)/(0.8D0*0.8D0))*100.D0
              DO JID  =1,JPMXIDUA
                IID = IDLISTUA(JID)
                XSFCOBERR( ILEMPN,1,IID) =
     $                       SQRT((0.7D0*0.7D0)/(0.8D0*0.8D0))*100.D0
              END DO
            ENDIF
      END DO
      LLPROB=.FALSE.
      LLTT  = .TRUE.
      IP1=-1
      IP2=-1
      IP3=1
C
C*1.  READ LEVELS FROM FILE
C     ---------------------
C
 100  CONTINUE
C
      CETIKET='RAOBOERR'
      CTYPVAR='K'
      CNOMVAR='LV'
      IKEY=FSTLIR(NILV,NULSTAT,INI,INJ,INK,-1,CETIKET,IP1,IP2,IP3,
     +            CTYPVAR,CNOMVAR)
      LLPRESNT = (IKEY .GE. 0)
      if(llpresnt) then
        IERR = FSTPRM (IKEY,ISTAMP,IDT,INP,INI,INJ,INK,IDUM,IDUM,
     +       IDUM,IDUM,IDUM,CTVAR,CNVAR,CETIKET,CGRTYP,IDUM,
     +       IDUM,IDUM,IDUM,IDUM,IDUM,IDUM,IDUM,IDUM,IDUM,IDUM)
C
        DHEURES = DBLE(INP*IDT/3600)
        CALL INCDATR(IDATE,ISTAMP,DHEURES)
C
        DO JLEV = 1,JPRLEV
          NILV(JLEV) = NILV(JLEV)*MPC_PA_PER_MBAR_R8
        END DO
C
C     SORT LEVELS SO THAT THEY ARE STORED IN INCREASING ORDER
C     FOR 3D-VAR
C
C     ========================
        CALL ISORT(NILV,JPRLEV)
C     ========================
C
C     ------------------------------------------------------------
C      READ DATA FROM STATISTICS FILE
C     ------------------------------------------------------------
C     -----------
        CTYPVAR='O'
C     -----------
C
        CNOMVAR='GZ'
        CETIKET='RAOBSTD'
        IERR=VFSTLIR(PHISTD,NULSTAT,INI,INJ,INK,IDATE,CETIKET,IP1,IP2,IP3
     +       ,CTYPVAR,CNOMVAR)
        LLPRESNT = (IERR .GE. 0)
        CETIKET='RAOBVCOR'
        IERR=VFSTLIR(ZVCOR,NULSTAT,INI,INJ,INK,IDATE,CETIKET,IP1,IP2,IP3
     +       ,CTYPVAR,CNOMVAR)
        LLPRESNT = (IERR .GE. 0) .AND. LLPRESNT
C
        CNOMVAR='TT'
        CETIKET='RAOBSTD'
        IERR=VFSTLIR(TTSTD,NULSTAT,INI,INJ,INK,IDATE,CETIKET,IP1,IP2,IP3
     +       ,CTYPVAR,CNOMVAR)
        IF ( IERR .LT. 0 ) LLTT=.FALSE.
C
        CNOMVAR='ES'
        CETIKET='RAOBSTD'
        IERR=VFSTLIR(ESSTD,NULSTAT,INI,INJ,INK,IDATE,CETIKET,IP1,IP2,IP3
     +       ,CTYPVAR,CNOMVAR)
        LLPRESNT = (IERR .GE. 0) .AND. LLPRESNT
        CETIKET='RAOBVCOR'
        IERR=VFSTLIR(ESVCOR,NULSTAT,INI,INJ,INK,IDATE,CETIKET,IP1,IP2,IP3
     +       ,CTYPVAR,CNOMVAR)
        LLPRESNT = (IERR .GE. 0) .AND. LLPRESNT
C
C
        CNOMVAR='UU'
        CETIKET='RAOBSTD'
        IERR=VFSTLIR(USTD,NULSTAT,INI,INJ,INK,IDATE,CETIKET,IP1,IP2,IP3
     +       ,CTYPVAR,CNOMVAR)
        LLPRESNT = (IERR .GE. 0) .AND. LLPRESNT
        CETIKET='RAOBVCOR'
        IERR=VFSTLIR(UVCOR,NULSTAT,INI,INJ,INK,IDATE,CETIKET,IP1,IP2,IP3
     +       ,CTYPVAR,CNOMVAR)
        LLPRESNT = (IERR .GE. 0) .AND. LLPRESNT
      endif
C     ------------------------------------------------------------
C
C Read the new obserr file
C
      if(usenewerr) then
        write(*, '(A)') ' '
        read(nulstat2, '(A)') ligne
        write(*, '(A)') ligne
        read(nulstat2, '(A)') ligne
        write(*, '(A)') ligne
        read(nulstat2, '(A)') ligne
        write(*, '(A)') ligne

        do jlev = 1, 19
          read(nulstat2, * ) (xstdall(jlev,jelm), jelm=1,11)
          write(*, '(f6.0,10f6.1)' )  (xstdall(jlev,jelm), jelm=1,11)
        enddo
        write(*, '(A)') ' '
      endif
C
C     -------------------------------------
C     FILTER AND FILL CORRELATION MATRICES
C     -------------------------------------
C
      CALL ZERO(JPMAXILEV*JPMAXILEV*JPCORBANDS,GZOBSCOR)
      CALL ZERO(JPMAXILEV*JPMAXILEV*JPCORBANDS,ESOBSCOR)
      CALL ZERO(JPMAXILEV*JPMAXILEV*JPCORBANDS,UUOBSCOR)
      if(llpresnt) then
        DO JBAND =1,JPCORBANDS
          WRITE(*,*) " "
          WRITE(*,*) " -----------------------------"
          WRITE(*,*) " BAND NUMBER IS : ",JBAND
          WRITE(*,*) " -----------------------------"
          WRITE(*,*) " "
C
C    FILTER THE MATRICES "TO REMOVE SINGULARITIES..."
C
C     1. GEOPOTENTIAL
C        ------------
          ZEIGMIN=0.2
          ZALPHA=0.1
          WRITE(*,*) " filtering GZ correlation matrix"
          CALL FILTMATRIX(ZVCOR,ZPROJ,ZEIGEN,ZEIGENV,
     &         JPRLEV,ZEIGMIN,ZALPHA)
C
C     2. T-Td
C        -----
          ZEIGMIN=0.0
          ZALPHA=0.0
          WRITE(*,*) " filtering ES correlation matrix"
          CALL FILTMATRIX(ESVCOR,ZPROJ,ZEIGEN,ZEIGENV,
     &         JPRLEV,ZEIGMIN,ZALPHA)
C
          DO JI=1,JPRLEV
            DO J=1,JPRLEV
              GZOBSCOR(JI,J,JBAND)= ZVCOR(JI,J)
              ESOBSCOR(JI,J,JBAND)=ESVCOR(JI,J)
              UUOBSCOR(JI,J,JBAND)= UVCOR(JI,J)
            END DO
          END DO
        END DO
      endif
C
C    -------------------------------------------------------------------
C     -------------------------------------
C     PRINT FINAL CORRELATION MATRICES
C     -------------------------------------
C
      DO JBAND =1,JPCORBANDS
         WRITE(*,*) " "
         WRITE(*,*) " -----------------------------"
         WRITE(*,*) " BAND NUMBER IS : ",JBAND
         WRITE(*,*) " -----------------------------"
         WRITE(*,*) " "
         WRITE(*,*) " GZ     correlation matrix"
         WRITE(*,*) " -------------------------------------------------"
         WRITE(*,1245)( (GZOBSCOR(JI,J,JBAND),JI=1,JPRLEV),J=1,JPRLEV)
         WRITE(*,*) " -------------------------------------------------"
C
C    -------------------------------------------------------------------
C
         WRITE(*,*) " UU-VV  correlation matrix"
         WRITE(*,*) " -------------------------------------------------"
         WRITE(*,1245)( (UUOBSCOR(JI,J,JBAND),JI=1,JPRLEV),J=1,JPRLEV)
         WRITE(*,*) " -------------------------------------------------"
C
C    -------------------------------------------------------------------
C
         WRITE(*,*) " T-Td   correlation matrix"
         WRITE(*,*) " -------------------------------------------------"
         WRITE(*,1245)( (ESOBSCOR(JI,J,JBAND),JI=1,JPRLEV),J=1,JPRLEV)
         WRITE(*,*) " -------------------------------------------------"
      END DO
C
C
C*3. Initialize observation standard deviation errors
C    -------------------------------------------------------------------
C
      LLOK= (    LLPRESNT .AND. ( ILEMU .NE. -1 ) )
     &   .AND. ( LLPRESNT .AND. ( ILEMV .NE. -1 ) )
     &   .AND. ( LLPRESNT .AND. ( ILEMES.NE. -1 ) )
     &   .AND. ( LLPRESNT .AND. ( ILEMGZ.NE. -1 ) )
C
      IF ( LLOK ) THEN
C
C    COMPUTE OBSERVATION STANDARD DEVIATION ERRORS
C
         DO JBAND =1,JPBANDS
            DO JLEV  =1,JPRLEV
               ILYR=0
               ZLEV=FLOAT(NILV(JLEV))
               DO JN =1,JPRLEV
                  ZLYR=SIGN(1.0D0,(ZLEV- FLOAT(NILV(JN)) ) )
                  ILYR=ILYR + MAX(0.0D0,ZLYR)
               END DO
*pik
               XOSTDEV(ILEMGZ,ILYR,JBAND)= RG*PHISTD(ILYR,JBAND)
               XOSTDEV(ILEMU, ILYR,JBAND)= USTD(ILYR,JBAND)
               XOSTDEV(ILEMV, ILYR,JBAND)= USTD(ILYR,JBAND)
               XOSTDEV(ILEMES,ILYR,JBAND)= ESSTD(ILYR,JBAND)
               IF( LLTT ) THEN
                  XOSTDEV(ILEMTT,ILYR,JBAND)= TTSTD(ILYR,JBAND)
               ELSE
                  write(*,*) ' DEFAULT VALUES FOR TT RAOB OBS ERRORS'
               ENDIF
*pik
            END DO
         END DO
      ELSE
         LLPROB=.TRUE.
         WRITE(*,*)" DEFAULT VALUES ARE USED FOR RAOBS ERRORS  "
      ENDIF
C
C
      IF ( .NOT. LLPROB ) THEN
         WRITE(*,*)" ----------------- "
         WRITE(*,*)" SUBROUTINE READCOVO:"
         WRITE(*,*)" RAOBS ERRORS SET  "
         WRITE(*,*)" ----------------- "
      ELSE
         WRITE(*,*)" ------------------------------- "
         WRITE(*,*)" SUBROUTINE READCOVO:"
         WRITE(*,*)" PROBLEM WITH STATISTICS FILE    "
         WRITE(*,*)" DEFAULT VALUES FOR RAOBS ERRORS "
         WRITE(*,*)" ------------------------------- "
      ENDIF
C
C================================================================
C
C     SATEM OBSERVATION ERRORS
C
C================================================================
C
      IP1=-1
      IP2=-1
      IP3=1
C
C
C*1.  READ LEVELS FROM FILE
C     ---------------------
C
      CTYPVAR='K'
      CNOMVAR='LV'
      CETIKET='SATMOERR'
      IKEY=FSTLIR(NISLV,NULSTAT,INI,INJ,INK,-1,CETIKET,IP1,IP2,IP3,
     +            CTYPVAR,CNOMVAR)
      LLPRESNT = (IKEY .GE. 0)
      IERR = FSTPRM (IKEY,ISTAMP,IDT,INP,INI,INJ,INK,IDUM,IDUM,
     +               IDUM,IDUM,IDUM,CTVAR,CNVAR,CETIKET,CGRTYP,IDUM,
     +               IDUM,IDUM,IDUM,IDUM,IDUM,IDUM,IDUM,IDUM,IDUM,IDUM)
C
      DO JLEV = 1,JPSATLV
         NISLV(JLEV) =NISLV(JLEV)*MPC_PA_PER_MBAR_R8
      END DO
C
C     =========================
      CALL ISORT(NISLV,JPSATLV)
C     =========================
C
      CTYPVAR='O'
      CNOMVAR='DZ'
      IP3=7
      DO JTYP =1,JPNTYP
         IF ( JTYP .EQ. 1) THEN
           CETIKET= 'STMCLRCR'
           CETIKETV='STMCLRST'
         ELSE
           CETIKET= 'STMCLOCR'
           CETIKETV='STMCLOST'
         ENDIF
C-----------------------------------------------------------------------
         IKEY=VFSTLIR(DZCOR,NULSTAT,INI,INJ,INK,IDATE,CETIKET,IP1,IP2,IP3
     +              ,CTYPVAR,CNOMVAR)
         LLPRESNT = (IKEY .GE. 0) .AND. LLPRESNT
         LLOK     =LLPRESNT .AND. (INI.EQ.JPSALEV) .AND.(INJ.EQ.JPSALEV)
         IKEY=VFSTLIR(XSATDEV(1,JTYP),NULSTAT,INI,INJ,INK,IDATE,CETIKETV
     +             ,IP1,IP2,IP3,CTYPVAR,CNOMVAR)
         LLOK     = (IKEY .GE. 0) .AND. LLOK
C-----------------------------------------------------------------------
C
         IF ( LLOK ) THEN
C
C       MOVE INTO FULL  CORRELATION MATRIX
C
           DO J = 1, JPSALEV
              DO JI=1,JPSALEV
                 DZOBSCOR(JI,J,JTYP) = DZCOR(JI,J)
              END DO
           END DO
           WRITE(*,*)" correlation matrix for satems with TYPE:",CETIKET
           WRITE(*,*)" ------------------------------------------------"
           WRITE(*,1244)((DZOBSCOR(JI,J,JTYP),JI=1,JPSALEV),J=1,JPSALEV)
           WRITE(*,*)" ------------------------------------------------"
         ELSE
           LLPROB=.TRUE.
           WRITE(*,*) " PROBLEM WITH SATEM STATISTICS  "
        ENDIF
      END DO
C
C=======================================================================
C
C     HUMSAT CORRELATION MATRIX (7x7 matrix )
C     STORED FROM 300-1000 MB
C
C     JPHLEV = 7
C================================================================
C
C
C
C*1.  READ LEVELS FROM FILE
C     ---------------------
C
      CTYPVAR='K'
      CNOMVAR='LV'
      CETIKET='HUMOERR '
      IP1=-1
      IP2=-1
      IP3=-1
      IKEY=FSTLIR(NIHULV,NULSTAT,INI,INJ,INK,-1,CETIKET,IP1,IP2,IP3,
     +            CTYPVAR,CNOMVAR)
      LLPRESNT = (IKEY .GE. 0)
C
      DO JLEV = 1,JPHLEV
         NIHULV(JLEV) = NIHULV(JLEV)*MPC_PA_PER_MBAR_R8
      END DO
C-----------------------------------------------------------------------
      CTYPVAR='O'
      CNOMVAR='ES'
      CETIKET='HUMVCOR '
      IKEY=VFSTLIR(HUCOR,NULSTAT,INI,INJ,INK,IDATE,CETIKET,IP1,IP2,IP3
     +           ,CTYPVAR,CNOMVAR)
      LLOK     =LLPRESNT .AND. (INI.EQ.JPHLEV) .AND.(INJ.EQ.JPHLEV)
      LLOK = (IKEY .GE. 0) .AND. LLOK
C-----------------------------------------------------------------------
C
C     MOVE INTO FULL  CORRELATION MATRIX
C
      IF ( LLOK) THEN
         CALL ZERO(JPMAXILEV*JPMAXILEV,HUOBSCOR)
         DO J = 1, JPHLEV
            DO JI=1,JPHLEV
               HUOBSCOR(JI,J) = HUCOR(JI,J)
            END DO
         END DO
         WRITE(*,*) " correlation matrix for humsat "
         WRITE(*,*)" ------------------------------------------------"
         WRITE(*,1244)( (HUOBSCOR(JI,J),JI=1,JPHLEV),J=1,JPHLEV)
         WRITE(*,*)" ------------------------------------------------"
      ELSE
         LLPROB=.TRUE.
         WRITE(*,*) " PROBLEM WITH HUMSAT STATISTICS   "
      ENDIF
C
      IF ( .NOT. LLPROB ) THEN
         WRITE(*,*)" ----------------------- "
         WRITE(*,*)" SUBROUTINE READCOVO:"
         WRITE(*,*)" OBSERVATION ERRORS SET  "
         WRITE(*,*)" ----------------------- "
      ELSE
         WRITE(*,*)" ------------------------------- "
         WRITE(*,*)" SUBROUTINE READCOVO:"
         WRITE(*,*)" PROBLEM WITH STATISTICS FILE    "
         WRITE(*,*)" DEFAULT VALUES FOR RAOBS ERRORS "
         WRITE(*,*)" ------------------------------- "
      ENDIF

      IERR=FSTFRM(NULSTAT)  
      IERR=FCLOS(NULSTAT)  
      IF(USENEWERR) THEN
        CLOSE(UNIT=NULSTAT2)
        IERR=FCLOS(NULSTAT2)    
      ENDIF
C
 1244 FORMAT( 7(1x,f5.2))
 1245 FORMAT(16(1x,f5.2))
      RETURN
      END SUBROUTINE READCOVO



      SUBROUTINE SETERR
*
*s/r SETERR -SET OBSERVATION ERROR
*
*Author  : P. Koclas *CMC/AES  February 1995
*
**    Purpose:
*             -set observation errors for each data
*              in CMA.
*
      IMPLICIT NONE
*implicits
#include "partov.cdk"
#include "comtov.cdk"
#include "comtovst.cdk"
#include "comgpsgb.cdk"
*
C
C NOTE: YSFERRWGT IN COMGPSGB.CDK (FROM NML FILE) IS USED HERE FOR ERROR WEIGHTING
C       OF TIME SERIES (FGAT) GPS MET OBSERVATIONS PS, TS, DPDS (ORIGINALLY DESIGNED
C       FOR SHIFTPROF OPTION (NOT USED -- LSHIFT = .FALSE. IN NML)
C-----------------------------------------------------------------------
C
      INTEGER JN,INDEX_BODY,INDEX_HEADER
      INTEGER ITYP,IFLG,IASS,ILEM,ilyr
      INTEGER IDATA,IDATEND,IDBURP,ITECH,ISAT,ILVL
      INTEGER ILAT1,ILAT2
      INTEGER ILANSEA,ISRCHEQ,INDXREG,INDXCLD,INDXM
      INTEGER INDXSAT,ISATNO
      INTEGER ICHN,IPLATF,INSTR,IPLATFORM,INSTRUM
      REAL*8 DELTAP, DELTAPMIN
      REAL*8 ZLAT, ZLON, ZFACTOR, H, NAPP, NERR
      REAL*8 ZLEV,ZLVL,ZCONGZ,ZVAL,zpb,zpt,zwb,zwt,zcof1,zcof2
      logical llinterp, LLBAD
      CHARACTER(len=2) :: SENSORTYPE,CFAM
      integer ielem
C
C     FOR GB-GPS OBSERVATIONS
C     ==========================================================================
      LOGICAL LLCZTDE, LLFER, LLFZTDE, LLZTD, LLRZTDE
      REAL*8  ZTDERR, ZZTD, ZMINZDE
      INTEGER IZTDJ
C
C     REGRESSION EQUATION CONSTANTS FOR ZTD ERROR (SD(O-P)) -- CUBIC FIT
C     - FROM OCTOBER 2004 SD(O-P) AND MEAN ZTD STATISTICS OF NOAA/FSL SITES
C     ---------------------------------------------------------------------------
C
      REAL*8 Z3, Z2, Z1, ZC
      DATA Z3, Z2, Z1, ZC /160.38, -1009.1, 2115.4, -1464.6/
C
C     ZZDERMIN = MIN ZTD OER VALUE (M), ZZFERREJ = MAX FERR VALUE (M) FOR REJECTION
C     ZTDERFAC = MULTIPLICATION FACTOR FOR FORMAL ZTD MEASUREMENT ERROR
C     ZOPEFAC  = FRACTION OF REGRESSION EQUATION SD(O-P) TO USE AS ZTD OBSERVATION ERROR
C     ----------------------------------------------------------------------------------
C
      REAL*8 ZZDERMIN, ZZFERREJ, ZTDERFAC, ZOPEFAC
      DATA ZZDERMIN /0.012D0/
      DATA ZZFERREJ /0.015D0/
      DATA ZTDERFAC /3.0D0/
      DATA ZOPEFAC  /1.0D0/
C     ==========================================================================
C
 221  CONTINUE
C
      WRITE(*,'(10X,"SUBROUTINE SETERR")')
      WRITE(*,'(10X,"-----------------",/)')
      WRITE(*,'(10X,"***********************************")')
      WRITE(*,'(10X," SET OBSERVATION ERRORS:",/)')
      WRITE(*,'(10X,"***********************************")')
C
      LLCZTDE = .FALSE.
      LLRZTDE = .FALSE.
      LLFZTDE = .FALSE.
      IF (YZTDERR .LT. 0.0) THEN
         LLFZTDE = .TRUE.
      ELSE IF (YZTDERR .GT. 0.0) THEN
         LLCZTDE = .TRUE.
      ELSE
         LLRZTDE = .TRUE.
      ENDIF
C
C
C     SET STANDARD DEVIATION ERRORS FOR EACH DATA FAMILY
C     ---------------------------------------------------
C
 100  CONTINUE
      ZCONGZ=10.D0*RG
      LLBAD = .FALSE.
      DO INDEX_HEADER = 1, obs_numheader(lobsSpaceData)
         IDATA     = obs_headElem_i(lobsSpaceData,NCM_RLN,INDEX_HEADER)
         IDATEND   = obs_headElem_i(lobsSpaceData,NCM_NLV,INDEX_HEADER) + IDATA - 1
         CFAM      = obs_getFamily(lobsSpaceData,INDEX_HEADER)
         ILANSEA   = obs_headElem_i(lobsSpaceData,NCM_OFL,INDEX_HEADER)
         ZLAT      = obs_headElem_r(lobsSpaceData,NCM_LAT,INDEX_HEADER)
         ZLON      = obs_headElem_r(lobsSpaceData,NCM_LON,INDEX_HEADER)
         IDBURP    = obs_headElem_i(lobsSpaceData,NCM_ITY,INDEX_HEADER)
         IPLATF    = obs_headElem_i(lobsSpaceData,NCM_SAT,INDEX_HEADER)
         ITECH     = obs_headElem_i(lobsSpaceData,NCM_TEC,INDEX_HEADER)
         INSTR     = obs_headElem_i(lobsSpaceData,NCM_INS,INDEX_HEADER)
         LLZTD     = .FALSE.
         LLFER     = .FALSE.
         ZTDERR    = -1.0
         DO INDEX_BODY  = IDATA, IDATEND
            ITYP   = obs_bodyElem_i(lobsSpaceData,NCM_VNM,INDEX_BODY)
            IFLG   = obs_bodyElem_i(lobsSpaceData,NCM_FLG,INDEX_BODY)
            IASS   = obs_bodyElem_i(lobsSpaceData,NCM_ASS,INDEX_BODY)
            ILEM   = obs_get_obs_index_for_bufr_element(ITYP)
            ZVAL   = obs_bodyElem_r(lobsSpaceData,NCM_VAR,INDEX_BODY)
C
            IF ( IASS .EQ. 1 .OR. CFAM .EQ. 'GP') THEN
C
C***********************************************************************
C   UPPER AIR DATA
C***********************************************************************
C
              IF ( (CFAM .EQ. 'UA') ) THEN
                  CALL LATID(ZFACTOR,ILAT1,ILAT2,ZLAT)
                  ZLEV=obs_bodyElem_r(lobsSpaceData,NCM_PPP,INDEX_BODY)
C
                  IF ( (ITYP .EQ. BUFR_NEUS) .OR. (ITYP .EQ. BUFR_NEVS) )THEN
                    call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, XSFCOBERR(ILEM,1,IDBURP))
                  ELSE IF (ITYP .EQ. BUFR_NETS) THEN
                    call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                  ELSE IF (ITYP .EQ. BUFR_NESS) THEN
                    call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                  ELSE IF (ITYP .EQ. BUFR_NEPS ) THEN
                    call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                  ELSE IF (ITYP .EQ. BUFR_NEPN ) THEN
                    call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                  ELSE
C
C New code...
C
                    IF(USENEWERR) THEN
                    IF ((ITYP .EQ. BUFR_NEUU) .OR. (ITYP .EQ. BUFR_NEVV))THEN
                      ielem=4
                    else if (ITYP .EQ. BUFR_NETT) then
                      ielem=2
                    else if (ITYP .EQ. BUFR_NEES) then
                      ielem=3
                    else if (ITYP .EQ. BUFR_NEGZ) then
                      ielem=5
                    endif

                    if ( (ZLEV*MPC_MBAR_PER_PA_R8) >= XSTDALL(1,1) ) then
                      call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSTDALL(1,ielem))
                    else if ( (ZLEV*MPC_MBAR_PER_PA_R8) <= XSTDALL(19,1) ) then
                      call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSTDALL(19,ielem))
                    else
                      do jn = 1,18
                        if ( (ZLEV*MPC_MBAR_PER_PA_R8) >= XSTDALL(jn+1,1) ) exit
                      end do

                      zwb = log((ZLEV*MPC_MBAR_PER_PA_R8)/XSTDALL(JN,1)) / log(XSTDALL(JN+1,1)/XSTDALL(JN,1))
                      zwt = 1.0D0 - zwb

                      call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,
     +                               zwt*XSTDALL(JN,ielem) + zwb*XSTDALL(JN+1,ielem))
                    endif

                    ELSE
C
C Old code...
C                  *****************************************************************
C                  INTERPOLATE VERTICALLY AND HORIZONTALLY THE RAOB ERROR STATISTICS
C                  *****************************************************************
C
C    ----------------------------
C 2. FIND THE INTERPOLATION LAYER
C    ----------------------------
                    if ( zlev .le. nilv(1) ) then
                     ilyr=1
                     llinterp=.false.
                    else if ( zlev .ge. nilv(jprlev) ) then
                     ilyr=jprlev
                     llinterp=.false.
                    else
                     DO JN =1,JPRLEV-1
                       if ( float(nilv(jn)) .le.  zlev .and. float(nilv(jn+1)) .gt. zlev )  then
                         ilyr=jn
                         llinterp=.true.
                      endif
                     END DO
                    endif
C    ---------------------------
C 2. DO THE INTERPOLATIONS
C    ---------------------------
                    if ( llinterp) then
                       ZPT  = nilv(ilyr)
                       ZPB  = nilv(ilyr+1)
                       ZWB  = LOG(ZLEV/ZPT)/LOG(ZPB/ZPT)
                       ZWT  = 1.0D0 - ZWB
                       zcof1=zwt*XOSTDEV(ILEM,ilyr,ILAT1) + zwb*XOSTDEV(ILEM,ilyr+1,ILAT1)
                       zcof2=zwt*XOSTDEV(ILEM,ilyr,ILAT2) + zwb*XOSTDEV(ILEM,ilyr+1,ILAT2)
                       call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,(1.0D0-ZFACTOR)*zcof1 + ZFACTOR*zcof2)
                    else
                       call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,(1.0D0-ZFACTOR)*XOSTDEV
     +                                (ILEM,ilyr,ILAT1) + ZFACTOR*XOSTDEV(ILEM,ilyr,ILAT2))
                    endif
                    ENDIF ! USENEWERR

                  ENDIF

                  IF(.NOT.USENEWERR) THEN
                  IF( (ITYP .EQ. BUFR_NEES) .AND. (NINT(ZVAL) .EQ. 30) )THEN
                    call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, 
     +                             obs_bodyElem_r(lobsSpaceData,NCM_OER,INDEX_BODY)
     +                             *SQRT(1.8D0))
                  ENDIF
                  ENDIF
C
C***********************************************************************
C   TOVS DATA
C***********************************************************************
C
               ELSE IF ( CFAM .EQ. 'TO' ) THEN
                  IF ( ITYP .EQ. BUFR_NBT1 .OR.
     S                 ITYP .EQ. BUFR_NBT2 .OR.
     S                 ITYP .EQ. BUFR_NBT3     )THEN
                     ICHN    = NINT(obs_bodyElem_r(lobsSpaceData,NCM_PPP,INDEX_BODY))
                     INDXM = ILANSEA
                     IF (INDXM .EQ. 2 ) INDXM = 0
                     INDXREG = ISRCHEQ(MLISREG,NREGST,INDXM)
                     INDXCLD = ISRCHEQ(MLISCLD,NCLDST,ITECH)
                     CALL MAP_SAT(IPLATF,IPLATFORM,ISAT)
                     CALL MAP_INSTRUM(INSTR,INSTRUM,SENSORTYPE)
                     DO JN = 1, NSENSORS
                        IF ( IPLATFORM .EQ. PLATFORM  (JN) .AND.
     &                       ISAT      .EQ. SATELLITE (JN) .AND.
     &                       INSTRUM   .EQ. INSTRUMENT(JN)      ) THEN
                           call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,
     S                         TOVERRST(ICHN,INDXCLD,INDXREG,JN))

                        ENDIF
                     ENDDO
                  ENDIF
C
C***********************************************************************
C   GPS RO DATA
C***********************************************************************
C
               ELSE IF ( CFAM .EQ. 'RO' ) THEN
C     
C     *              Process only refractivity data (codtyp 169)
C
                  IF ( obs_headElem_i(lobsSpaceData,NCM_ITY,INDEX_HEADER) .EQ. 169 ) THEN
                     IF ( ITYP .EQ. BUFR_NEPS ) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, 50.D0)
                     ENDIF
                     IF ( ITYP .EQ. BUFR_NETT) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, 10.D0)
                     ENDIF
                     IF ( ITYP .EQ. BUFR_NERF) THEN
C     
C     *                 Observation-estimated geopotential height:
C
cc                        H = obs_bodyElem_r(lobsSpaceData,NCM_PPP,INDEX_BODY)
C
C     *                 Gross approximation to the refractivity:
C
cc                        IF ( H .LE. 10000 ) THEN
cc                           NAPP = EXP( 5.75 - H/8000. )
cc                        ELSE
cc                           NAPP = EXP( 4.5 - (H-10000.)/6400. )
cc                        ENDIF
C     
C     *                 Observation error    S
C     
cc                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, 0.05 * NAPP)
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,1001.D0)
                     ENDIF
                  ENDIF
C
C***********************************************************************
C   ALL GPS GROUND-BASED DATA (SFC MET AND ZTD) ASSIMILATED OR NOT
C***********************************************************************
C
C
C   GPS SFC MET ERRORS ARE SET TO SYNO SFC OBS ERRORS FROM S/R SUCOVO
C   AND WEIGHTED BY FACTOR YSFERRWGT FOR 3D-VAR FGAT OR 4D-VAR ASSIM.
C   OF TIME-SERIES (YSFERRWGT = 1.0 FOR NORMAL 3D-VAR WITH 3D THINNING)
C
               ELSE IF ( CFAM .EQ. 'GP' ) THEN
C*                Psfc Error (Pa)
                  IF ( ITYP .EQ. BUFR_NEPS ) THEN
                     call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, 75.D0 *  YSFERRWGT)
                  ENDIF
C*                Tsfc Error (K)
                  IF ( ITYP .EQ. BUFR_NETS ) THEN
                     call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, 2.0D0 * YSFERRWGT)
                  ENDIF
C*                T-Td Error (K)
                  IF ( ITYP .EQ. BUFR_NESS ) THEN
                     call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, 3.0D0 * YSFERRWGT)
                  ENDIF
C*                ZTD Error Error (DUMMY VALUE so 3DVar won't abort)
                  IF ( ITYP .EQ. BUFR_NEFE ) THEN
                     call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, 0.001D0)
                     LLFER = .TRUE.
                     ZTDERR = ZVAL
                  ENDIF
C*                ZTD Error
                  IF ( ITYP .EQ. BUFR_NEZD ) THEN
                     IF ( LLCZTDE) call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,dble(YZTDERR))
                     ZZTD = ZVAL
                     IZTDJ = INDEX_BODY
                     LLZTD = .TRUE.
                  ENDIF
C
C***********************************************************************
C   ACARS, ASDAR,ADS, SATOB AIREP DATA
C***********************************************************************
C
               ELSE IF ( CFAM .EQ. 'AI'
     &              .OR. CFAM .EQ. 'SW') THEN
                  ZLEV=obs_bodyElem_r(lobsSpaceData,NCM_PPP,INDEX_BODY)
                  IF(USENEWERR) THEN
C
C    SATOB
C
                  IF ( IDBURP .EQ. 188 ) THEN
                    IF ((ITYP .EQ. BUFR_NEUU) .OR. (ITYP .EQ. BUFR_NEVV))THEN
                      ielem = 11
                    endif
C
C    AIREP
C
                  ELSE IF (IDBURP .EQ. 128 ) THEN
                    IF ((ITYP .EQ. BUFR_NEUU) .OR. (ITYP .EQ. BUFR_NEVV))THEN
                      ielem = 7
                    else if ( ITYP .EQ. BUFR_NETT ) then
                      ielem = 6
                    endif
C
C    AMDAR ACARS ADS
C
                  ELSE IF (IDBURP .EQ. 42 .OR. IDBURP .EQ. 157 .OR. IDBURP .EQ. 177) THEN
                    IF ((ITYP .EQ. BUFR_NEUU) .OR. (ITYP .EQ. BUFR_NEVV))THEN
                      ielem = 10
                    else if ( ITYP .EQ. BUFR_NETT ) then
                      ielem = 8
                    else if ( ITYP .EQ. BUFR_NEES ) then
                      ielem = 9
                    end if
C
                  ENDIF

                  if ( (ZLEV*MPC_MBAR_PER_PA_R8) >= XSTDALL(1,1) ) then
                    call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSTDALL(1,ielem))
                  else if ( (ZLEV*MPC_MBAR_PER_PA_R8) <= XSTDALL(19,1) ) then
                    call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSTDALL(19,ielem))
                  else
                    do jn = 1,18
                      if ( (ZLEV*MPC_MBAR_PER_PA_R8) >= XSTDALL(jn+1,1) ) exit
                    end do

                    zwb = log((ZLEV*MPC_MBAR_PER_PA_R8)/XSTDALL(JN,1)) / log(XSTDALL(JN+1,1)/XSTDALL(JN,1))
                    zwt = 1.0D0 - zwb 

                    call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,
     +                        zwt*XSTDALL(JN,ielem) + zwb*XSTDALL(JN+1,ielem))
                  endif

                  ELSE !USENEWERR
C
C    SATOB
C
                  IF ( IDBURP .EQ. 88 .OR. IDBURP .EQ. 188 ) THEN

                    DELTAPMIN = ABS(LOG(ZLEV*MPC_MBAR_PER_PA_R8)-LOG(XSTDEVLV(1,2)))
                    ILYR = 1
                    DO JN = 2, 10
                      DELTAP = ABS(LOG(ZLEV*MPC_MBAR_PER_PA_R8)-LOG(XSTDEVLV(JN,2)))
                      IF ( DELTAP < DELTAPMIN ) THEN
                        DELTAPMIN = DELTAP
                        ILYR = JN
                      END IF
                    END DO

                    IF ((ITYP .EQ. BUFR_NEUU) .OR. (ITYP .EQ. BUFR_NEVV))THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSTDEVLV(ILYR,1))
                    ELSE IF (ITYP .EQ. BUFR_NETT )THEN
                         call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, SQRT(XSTDEV(4,1)))
                    ENDIF
C
C     AIREP
C
                  ELSE IF (IDBURP .EQ. 128 ) THEN
                      IF ((ITYP .EQ. BUFR_NEUU) .OR. (ITYP .EQ. BUFR_NEVV))THEN
                        IF (  ZLEV .LT. 500.*MPC_PA_PER_MBAR_R8 ) THEN
                          call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,MPC_M_PER_S_PER_KNOT_R8*SQRT(XSTDEV(2,2)))
                        ELSE
                          call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,MPC_M_PER_S_PER_KNOT_R8*SQRT(XSTDEV(1,2)))
                        ENDIF
                      ELSE IF (ITYP .EQ. BUFR_NETT )THEN
                         call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, SQRT(XSTDEV(4,2)))
                      ELSE IF (ITYP .EQ. BUFR_NEES )THEN
                         call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, SQRT(XSTDEV(5,2)))
                      ENDIF
C
C     ASDAR, ACARS + ADS
C
                  ELSE IF (IDBURP .EQ. 42 .OR. IDBURP .EQ. 157 .OR. IDBURP .EQ. 177) THEN
                     IF ((ITYP .EQ. BUFR_NEUU) .OR. (ITYP .EQ. BUFR_NEVV))THEN
                        IF (  ZLEV .LT. 500.*MPC_PA_PER_MBAR_R8 ) THEN
                          call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,MPC_M_PER_S_PER_KNOT_R8*SQRT(XSTDEV(2,3)))
                        ELSE
                          call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,MPC_M_PER_S_PER_KNOT_R8*SQRT(XSTDEV(1,3)))
                       ENDIF
                     ELSE IF (ITYP .EQ. BUFR_NETT )THEN
                          call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, SQRT(XSTDEV(4,3)))
                     ELSE IF (ITYP .EQ. BUFR_NEES )THEN
                          call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, SQRT(XSTDEV(5,3)))
                     ENDIF
                  ENDIF

                  ENDIF ! USENEWERR
C
C***********************************************************************
C   SURFACE DATA
C***********************************************************************
C
               ELSE IF ( CFAM .EQ. 'SF' ) THEN
C
C                 SYNOP AND SHIP NON-AUTOMATIQUE
C
ccc debug debut
ccc          print *,' seterr:IDBURP,ITYP,ILEM,XSFCOBERR ',IDBURP,ITYP,ILEM
ccc     &           ,XSFCOBERR(ILEM,1,IDBURP)
ccc debug fin
                  IF ( (IDBURP .EQ. 12) .OR. (IDBURP .EQ. 13) ) THEN
                     IF ( (ITYP .EQ. BUFR_NEUS) .OR. (ITYP .EQ. BUFR_NEVS) )THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NETS) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NESS) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NEPS ) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NEPN ) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF ( (ITYP .EQ. BUFR_NEUU) .OR. (ITYP .EQ. BUFR_NEVV) )THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,MPC_M_PER_S_PER_KNOT_R8*SQRT(XSTDEV(1,4)))
                     ELSE IF (ITYP .EQ. BUFR_NEGZ) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,ZCONGZ*SQRT(XSTDEV(3,4)))
                     ELSE IF (ITYP .EQ. BUFR_NETT) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,SQRT(XSTDEV(4,4)))
                     ELSE IF (ITYP .EQ. BUFR_NEES) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,SQRT(XSTDEV(5,4)))
                     ENDIF
C
C                 DRIBU AND DRIFTER
C
                  ELSE IF( (IDBURP .EQ. 14) .OR. (IDBURP .EQ. 18) )THEN
                     IF ( (ITYP .EQ. BUFR_NEUS) .OR. (ITYP .EQ. BUFR_NEVS) )THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NETS) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NESS) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NEPS ) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NEPN ) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF ( (ITYP .EQ. BUFR_NEUU) .OR. (ITYP .EQ. BUFR_NEVV) )THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,MPC_M_PER_S_PER_KNOT_R8*SQRT(XSTDEV(1,4)))
                     ELSE IF (ITYP .EQ. BUFR_NEGZ) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,ZCONGZ*SQRT(XSTDEV(3,4)))
                     ELSE IF (ITYP .EQ. BUFR_NETT) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,SQRT(XSTDEV(4,4)))
                     ELSE IF (ITYP .EQ. BUFR_NEES) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,SQRT(XSTDEV(5,4)))
                     ENDIF
C
C                 STATION AUTOMATIQUE, PATROL SHIPS
C
                  ELSE IF((IDBURP .GE. 145) .AND. (IDBURP .LE. 147))THEN
                     IF ( (ITYP .EQ. BUFR_NEUS) .OR. (ITYP .EQ. BUFR_NEVS) )THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NETS) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NESS) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NEPS ) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF (ITYP .EQ. BUFR_NEPN ) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,XSFCOBERR(ILEM,1,IDBURP))
                     ELSE IF ( (ITYP .EQ. BUFR_NEUU) .OR. (ITYP .EQ. BUFR_NEVV) )THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,MPC_M_PER_S_PER_KNOT_R8*SQRT(XSTDEV(1,4)))
                     ELSE IF (ITYP .EQ. BUFR_NEGZ) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,ZCONGZ*SQRT(XSTDEV(3,4)))
                     ELSE IF (ITYP .EQ. BUFR_NETT) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,SQRT(XSTDEV(4,4)))
                     ELSE IF (ITYP .EQ. BUFR_NEES) THEN
                        call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,SQRT(XSTDEV(5,4)))
                     ENDIF
                  ENDIF
               ELSE IF ( CFAM .EQ. 'SC' ) THEN
                 call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, XSFCOBERR(ILEM,1,IDBURP))
               ELSE IF ( CFAM .EQ. 'TO' ) THEN
                 call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, 1.0D0)
               ELSE IF ( CFAM .EQ. 'OZ' ) THEN
                 call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,
     s                0.6D0*obs_bodyElem_r(lobsSpaceData,NCM_VAR,INDEX_BODY))
C
C                 SATEMS
C
               ELSE IF ( CFAM .EQ. 'ST' ) THEN
                  ILVL=0
                  ZLEV=obs_bodyElem_r(lobsSpaceData,NCM_PPP,INDEX_BODY)
                  DO JN =1,JPSALEV
                     ZLVL=SIGN(1.0D0,(ZLEV-NISLV(JN)) )
                     ILVL=ILVL + MAX(0.0D0,ZLVL)
                  END DO
                  IF ( (ITECH .EQ. 1) .OR. (ITECH .EQ. 4) ) THEN
                     call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, XSATDEV(ILVL,1))
                  ELSE IF ( (ITECH .EQ. 2) .OR. (ITECH .EQ. 3) ) THEN
                     call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, XSATDEV(ILVL,2))
                  ELSE
                     call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, XSATDEV(ILVL,1))
                  ENDIF
               ELSE IF ( CFAM .EQ. 'HU' ) THEN
               ELSE IF ( CFAM .EQ. 'PR' ) THEN
                     call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY,2.2D0)
               ELSE
                  WRITE(*,*)' UNKNOWN DATA FAMILY:',CFAM
               ENDIF
C
C***********************************************************************
C              Check for case where error should have been set but was
C              not. 3dvar will abort in this case.
C***********************************************************************
C
               IF (CFAM .NE. 'GP') THEN
                 IF(obs_bodyElem_r(lobsSpaceData,NCM_OER,INDEX_BODY) .LE. 0.0) THEN
                    LLBAD = .TRUE.
                 ENDIF
C
               ELSE
C  GP FAMILY CASE
                 IF (IASS .EQ. 1) THEN
                   IF ((.NOT. LLZTD) .AND. obs_bodyElem_r(lobsSpaceData,NCM_OER,INDEX_BODY) .LE. 0.0) THEN
                     LLBAD = .TRUE.
                   ENDIF
                   IF ((LLZTD .AND. LLCZTDE) .AND. obs_bodyElem_r(lobsSpaceData,NCM_OER,INDEX_BODY) .LE. 0.0) THEN
                     LLBAD = .TRUE.
                   ENDIF
                 ENDIF
               ENDIF
C
               IF (LLBAD) THEN
                 WRITE(*,*)'  PROBLEM OBSERR VARIANCE FAM= '
     &              ,CFAM
                  WRITE(*,
     &               '(1X,"STNID= ",A10,"IDBURP= ",I5," LAT= ",F10.2
     &              ," LON = ",F10.2)')
     &              obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),IDBURP,ZLAT*MPC_DEGREES_PER_RADIAN_R8,ZLON*MPC_DEGREES_PER_RADIAN_R8
                  WRITE(*,'(1X,"ELEMENT= ",I6," LEVEL= ",F10.2,
     &              " OBSERR = ",E10.2)')
     &              ITYP,obs_bodyElem_r(lobsSpaceData,NCM_PPP,INDEX_BODY),obs_bodyElem_r(lobsSpaceData,NCM_OER,INDEX_BODY)
               ENDIF

            ELSE

c  set artificial obs errors for ln q.
              IF ( CFAM .EQ. 'UA'  .AND.
     &             ( ITYP          .EQ. BUFR_NEHU  .OR.
     &               ITYP          .EQ. BUFR_NEHS ) ) THEN
                 call obs_bodySet_r(lobsSpaceData,NCM_OER,INDEX_BODY, 888.0d0)
              ENDIF
C           end of assim=1 or GP family IF
            ENDIF
C
C        end of INDEX_BODY loop 
         END DO
C
C    ------------------------------------------------------
C    SET THE GB-GPS ZTD ERROR
C    ------------------------------------------------------
C
         IF ( CFAM .EQ. 'GP' ) THEN
            IF ( .NOT. LLCZTDE ) THEN
              IF (LLZTD) THEN
C             Compute minimum ZTD error as a function of ZTD using regression
C             statistics SD(O-P)
              ZMINZDE = Z3*ZZTD**3 + Z2*ZZTD**2 + Z1*ZZTD + ZC
              ZMINZDE = ZMINZDE * ZOPEFAC * 0.001
                IF (LLRZTDE) THEN
                  call obs_bodySet_r(lobsSpaceData,NCM_OER,IZTDJ, MAX(ZZDERMIN, ZMINZDE))
                ELSE
                  IF (LLFER) THEN
                    call obs_bodySet_r(lobsSpaceData,NCM_OER,IZTDJ, MAX(ZZDERMIN, ZTDERR*ZTDERFAC))
                  ELSE
                    call obs_bodySet_r(lobsSpaceData,NCM_OER,IZTDJ, MAX(ZZDERMIN, ZMINZDE))
                  ENDIF
                ENDIF
              ENDIF
            ENDIF
C  *** APPLY TIME-SERIES WEIGHTING FACTOR TO OBSERVATION ERROR (YZDERRWGT=1 FOR 3D-VAR)
            IF (LLZTD) call obs_bodySet_r(lobsSpaceData,NCM_OER,IZTDJ, obs_bodyElem_r(lobsSpaceData,NCM_OER,IZTDJ)*YZDERRWGT)
         ENDIF
C     end of INDEX_HEADER loop
      END DO
C
 400  CONTINUE
      IF(LLBAD) THEN
        WRITE(*,*)'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
        WRITE(*,*)' Warning 3DV:seterr: PROBLEM OBSERR VARIANCE'
     &       ,' SEE LISTING FOR MORE DETAILS'
        WRITE(*,*)'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
        CALL ABORT3D('SETERR:PROBLEM OBSERR VARIANCE.')
      ENDIF
      WRITE(*,'(10X,"DONE SETERR")')
      WRITE(*,'(10X,"-----------------",/)')
      RETURN
      END SUBROUTINE SETERR

      END SUBROUTINE SUCOVO


