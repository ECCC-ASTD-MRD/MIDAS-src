module topLevelControl_mod
!
! ***NOTE:*** The compilation script will automatically create topLevelControl_mod.ftn90 from this file
!
!     Control variables for the job - constant within job
!
!     TOP_CREVISION : string parameter that will be replaced by the compilation
!                     script to contain the latest SVN global revision number 
!                     (trailing "M" indicates working directory is "modified" 
!                     relative to the repository version)
!     TOP_NCONF     : configuration of the job
!
  implicit none
  save
  private

  ! public variables
  public :: top_crevision
  ! public procedures
  public :: top_setup,top_AnalysisMode,top_BgckIrMode,top_BgckConvMode,top_OmpMode,top_BurpSplitMode

  character(len=len('XXXXX')),parameter :: top_crevision='XXXXX'
  integer :: top_nconf

  logical :: burp_split_L

  contains

    subroutine top_setup
      implicit none
      integer :: nconf
      NAMELIST /NAMCT0/NCONF
      integer nulnam,ierr,fnom,fclos 

      character(len=256) :: BURP_SPLIT_VAR
      integer :: length_burp_split, status

      ! Set the default values
      nconf  = 141

      ! Read the NAMELIST to modify these values
      nulnam=0
      ierr=fnom(nulnam,'./flnml','FTN+SEQ+R/O',0)
      if(ierr.ne.0) call abort3d('top_setup: Error opening file flnml')
      read(nulnam,nml=namct0,iostat=ierr)
      if(ierr.ne.0) call abort3d('top_setup: Error reading namelist')
      write(*,nml=namct0)
      ierr=fclos(nulnam)

      top_nconf = nconf

      !
      !- Determine if the observation files are already split by subdomain
      !
      status = 0
      burp_split_L = .false.
      call get_environment_variable('ARMA_BURP_SPLIT',BURP_SPLIT_VAR,length_burp_split,status,.true.)
      if (status.gt.1) then
        write(*,*) 'top_setup: Problem when getting the environment variable ARMA_BURP_SPLIT'
      end if
      if (status.eq.1) then !! The variable 'ARMA_BURP_SPLIT' does not exist so we didn't split the observations
        write(*,*) 'top_setup: The environment variable ARMA_BURP_SPLIT has not been detected so we read global observation files'
        burp_split_L = .false.
      else
        write(*,*) 'top_setup: The environment variable ARMA_BURP_SPLIT has been detected so we read splitted observation files'
        burp_split_L = .true.
      end if

    end subroutine top_setup

    function top_AnalysisMode() result(analysisMode)
      implicit none
      logical :: analysisMode

      analysisMode= (top_nconf.eq.141)
        
    end function top_AnalysisMode

    function top_OmpMode() result(ompMode)
      implicit none
      logical :: ompMode

      ompMode= (top_nconf.eq.121)
        
    end function top_OmpMode

    function top_BgckIrMode() result(bgckMode)
      implicit none
      logical :: bgckMode

      bgckMode= (top_nconf.eq.111)
        
    end function top_BgckIrMode

    function top_BgckConvMode() result(bgckMode)
      implicit none
      logical :: bgckMode

      bgckMode= (top_nconf.eq.101)
        
    end function top_BgckConvMode

    function top_BurpSplitMode() result(BurpSplitMode)
      implicit none
      logical :: BurpSplitMode

    BurpSplitMode = burp_split_L
        
    end function top_BurpSplitMode

end module topLevelControl_mod
