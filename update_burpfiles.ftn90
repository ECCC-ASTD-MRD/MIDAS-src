!--------------------------------------- LICENCE BEGIN -----------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------

SUBROUTINE UPDATE_BURPFILES(obsSpaceData)
!
!     PURPOSE: READ OBSDAT AND UPDATE CMC BURP FILES
!
!     ARGUMENTS:
!                   obsSpaceData   - obsdat-file object
!
!       AUTHOR: P. KOCLAS(CMC CMDA)
!
!       Revision:
!                Ping Du, CMDA, Feb-Mar 2015
!                - Added scaling for CH family data
!                  from use of 8090 element when required.
!
!     NOTE:
!     BURP FILES ARE ASSUMED TO BE PRESENT IN CURRENT WORKING DIRECTORY
!
      use topLevelControl_mod
      use mpivar_mod
      use ObsSpacedata_mod
      use burp_read
      use burpFiles_mod
      IMPLICIT NONE
      type (struct_obs), intent(inout) :: obsSpaceData

      INTEGER J
      INTEGER FILENUMB,IBRP1,IER,INRECS,ISTAT,LNMX
      INTEGER  FNOM,FCLOS,MRFCLS,MRFOPN,MRFMXL
      EXTERNAL FNOM,FCLOS,MRFCLS,MRFOPN,MRFMXL
      character(len=256) :: BURP_SPLIT_VAR
      integer length_burp_split

      integer   :: nstn1, nstn2, kmode, headerIndex

      call tmg_start(93,'POST_UPDATEBRP')

      KMODE=1  ! Request power of 10 exponent determination for 
               ! scaling of the CH family data. Flag set to apply inverse 
               ! scaling of values (as compared to kmode=0) before storage
               ! to BURP files.

      if(top_AnalysisMode()) call vint3dfd(obs_oma,obsSpaceData)
      call vint3dfd(obs_omp,obsSpaceData)
      if(top_AnalysisMode()) call setassflg(obsSpaceData)
      call flaguvtofd_obsdat(obsSpaceData)
!
!  ------NOTE----------
! currently supported families of data 'UA' 'AI' 'SC' 'SF' 'SW' 'TO' 'CH'
!
!     READ DATA FROM FILES CONTAINED IN ARRAY CLVAL.
!
      WRITE(*,*)' '
      WRITE(*,*)'================================================='
      WRITE(*,*)'                UPDATE_BURP BEGIN                '
      WRITE(*,*)'================================================='
      WRITE(*,*)' '

      if ( .not. top_BurpSplit() ) then 
         write(*,*) 'update_burpfiles: We read/write global observation files'
         CALL obs_expandToMpiGlobal(obsSpaceData)
         IF(mpi_myid /= 0) then
           call tmg_stop(93)
           RETURN
         endif
      else
         ! redistribute obs data to how it was just after reading the files
         call obs_MpiRedistribute(obsSpaceData,OBS_IPF)
      end if

!     CH family: Scaling of the obs related values to be stored in the BURP files

      print *, 'Scaling of obs related values for CH observation values'

      call obs_set_current_header_list(obsSpaceData,'CH')
      nstn1=0
      nstn2=0
      HEADER: do
         headerIndex = obs_getHeaderIndex(obsSpaceData)
         if (headerIndex < 0) exit HEADER

         ! Identify start and accumulate number of points over reports
      
         if (nstn1.eq.0) nstn1 = headerIndex
         nstn2 = headerIndex
         
      enddo HEADER
            
      if (nstn2.gt.0) CALL SET_SCAL_CHM(obsSpaceData,nstn1,nstn2,kmode)

!     Storage to BURP files.
        
      DO J =1,burp_nfiles
         call UPDATE_BURP(obsSpaceData,burp_cfamtyp(J),burp_cfilnam(J),J)
      END DO

      WRITE(*,*)' '
      WRITE(*,*)'================================================='
      WRITE(*,*)'                UPDATE_BURP    END               '
      WRITE(*,*)'================================================='
      WRITE(*,*)' '

      call tmg_stop(93)

END SUBROUTINE UPDATE_BURPFILES
