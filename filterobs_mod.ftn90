module filterObs_mod
  use mpi
  use EarthConstants_mod
  use MathPhysConstants_mod
  use obsSpaceData_mod
  use columnData_mod
  use bufr
  use tovs_mod ,only :  tvs_Is_idburp_tovs
  use modgpsztd_mod
  implicit none
  save
  private
  
  public :: filt_setup,filt_topo,filt_suprep
  public :: filt_rlimlvhu

  integer filt_nelems,filt_nlist(30)
  integer filt_nflags,filt_nlistflg(15)
  logical ltopofilt
  real*8 filt_rlimlvhu

contains

  subroutine filt_setup

    implicit none

    integer :: nulnam,ierr,jelem,jelem2,jflag,ibit,itotelem,ielem
    integer :: fnom,fclos
    integer nelems,nlist(30)
    integer nflags,nlistflg(15)
    real*8 rlimlvhu
    character(len=35) :: CREASON(-8:13)
    data creason/'JACOBIAN IMPORTANT ABOVE MODEL TOP', &
                 'ABS OROGRAPH-PHI                  ', &
                 'MASQUE TERRE-MER                  ', &
                 'OROGRAPHIE                        ', &
                 'REJECTED BY QCVAR                 ', &
                 'REJECTED BY BACKGROUND GCHECK     ', &
                 'BACKGROUND CHECK  LEVEL 3         ', &
                 'BACKGROUND CHECK  LEVEL 2         ', &
                 'BACKGROUND GHECK  LEVEL 1         ', &
                 'RESERVED                          ', &
                 'REJECTED BY SELECTION PROCESS     ', &
                 'GENERATED BY OI                   ', &
                 'REJECTION BY  OI                  ', &
                 'ELEMENT ON BLACK LIST             ', &
                 'RESERVED                          ', &
                 'CORRECTED ELEMENT                 ', &
                 'INTERPOLATED ELEMENT              ', &
                 'DOUBTFUL ELEMENT                  ', &
                 'POSSIBLY ERRONEOUS ELEMENT        ', &
                 'ERRONEOUS ELEMENT                 ', &
                 'ELEMENT EXCEEDS CLIMATE EXTREME   ', &
                 'ELEMENT MODIFIED OR GEN BY  ADE   '/

    namelist /namfilt/nelems,nlist,nflags,nlistflg,ltopofilt,rlimlvhu

    ! set default values for namelist variables
    do jelem = 1, 30
      nlist(jelem) = 0
    enddo
    nelems = 6
    nlist(1)=11003
    nlist(2)=11004
    nlist(3)=10194
    nlist(4)=12192
    nlist(5)=12062
    nlist(6)=12063
    do jflag = 1, 15
      nlistflg(jflag) = 0
    enddo
    nflags=6
    nlistflg(1)=2
    nlistflg(2)=4
    nlistflg(3)=5
    nlistflg(4)=9
    nlistflg(5)=11
    nlistflg(6)=12

    ltopofilt = .true.

    filt_rlimlvhu = 300.

    nulnam=0
    ierr=fnom(nulnam,'./flnml','FTN+SEQ+R/O',0)
    read(nulnam,nml=namfilt,iostat=ierr)
    if(ierr.ne.0) call abort3d('filt_setup: Error reading namelist')
    if(mpi_myid.eq.0) write(*,nml=namfilt)
    ierr=fclos(nulnam)

    ! Force nlist to be in the same sequence as NVNUMB for invariance in
    ! matrix-vector product done in matvec.
    itotelem = 0
    do jelem2 = 1, filt_nelems
      jelem=obs_get_obs_index_for_bufr_element(nlist(jelem2))
      if (jelem .ne. -1) then
        itotelem = itotelem + 1
        ielem = nlist(itotelem)
        nlist(itotelem) = nlist(jelem2)
        nlist(jelem2) = ielem
      else 
        if(mpi_myid.eq.0) write(*,*) 'ELEMENT NOT FOUND IN NVNUMB LIST:',nlist(jelem2)
      endif
    enddo

    filt_rlimlvhu    = rlimlvhu
    filt_nelems      = nelems
    filt_nlist(:)    = nlist(:)
    filt_nflags      = nflags
    filt_nlistflg(:) = nlistflg(:)

    if(mpi_myid.eq.0) then
      write(*,'(1X,"***********************************")')
      write(*,'(1X," ELEMENTS SELECTED FOR ASSIMILATION:",/)')
      write(*,'(1X,"***********************************")')
      do jelem=1,filt_nelems
       write(*,'(15X,I5)') filt_nlist(jelem)
      enddo
      write(*,'(1X,"***********************************")')
      write(*,*) ' REJECT ELEMENTS WITH REJECT FLAG '
      write(*,*)'           BIT :  '
      do jflag=1,filt_nflags
        ibit= filt_nlistflg(jflag)
        write(*,*) ibit,' ',creason(ibit)
      enddo
      write(*,'(1X,"***********************************")')
    endif

  end subroutine filt_setup


  subroutine filt_suprep(lobsSpaceData)
!
!s/r SUPREP -FILTER obsSpaceData BEFORE 3D-VAR ANALYSIS
!
!Author  : P. Koclas *CMC/AES  September 1994
!
!*    Purpose:
!             -Select the data in the CMA file which is to be assimilated
!              by the 3D-var.
!
    IMPLICIT NONE
#include "comct0.cdk"
    type(struct_obs) :: lobsSpaceData
    integer, parameter :: numFamily = 9
    INTEGER INDEX_BODY,INDEX_HEADER
    INTEGER IPRES,IVCO,IERR,JD
    INTEGER IJ,IDBURP,ITYP,IFLG,IBAD,IKNT
    INTEGER IDATA,IDATEND
    INTEGER ILANSEA
    LOGICAL LLOK,LLREJ,LLBOGUS

    if(mpi_myid.eq.0) WRITE(*,*) 'starting subroutine filt_suprep'

    !
    ! Set the header index in the body of obsSpaceData
    !
    IJ=0
    DO INDEX_HEADER = 1, obs_numheader(lobsSpaceData)
      IDATA   = obs_headElem_i(lobsSpaceData,OBS_RLN,INDEX_HEADER)
      IDATEND = obs_headElem_i(lobsSpaceData,OBS_NLV,INDEX_HEADER) + IDATA - 1
      DO INDEX_BODY= IDATA, IDATEND
        IJ   = IJ+1
        call obs_bodySet_i(lobsSpaceData,OBS_HIND,IJ, INDEX_HEADER)
      ENDDO
    ENDDO

    IKNT=0

    BODY: do index_body=1,obs_numbody(lobsSpaceData)
      INDEX_HEADER = obs_bodyElem_i(lobsSpaceData,OBS_HIND,INDEX_BODY)
      ITYP = obs_bodyElem_i(lobsSpaceData,OBS_VNM,INDEX_BODY)
      IFLG = obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY)
      IPRES= NINT(obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY))
      IVCO = obs_bodyElem_i(lobsSpaceData,OBS_VCO,INDEX_BODY)
      IDBURP=obs_headElem_i(lobsSpaceData,OBS_ITY,INDEX_HEADER)
      !
      ! Unwanted data types via types specified in NLIST
      !
      LLOK = .FALSE.
      LLBOGUS=( IDBURP.eq.150 .or. IDBURP.eq.151 .or. IDBURP.eq.152 .or. IDBURP.eq.153 )
      DO JD =1,FILT_NELEMS
        LLOK=( ITYP .EQ. FILT_NLIST(JD) )  .OR. LLOK
      ENDDO
      !
      ! ALLOW GZ FOR BOGUS DATA ONLY in analysis case (nconf=141)
      !
      if  ( nconf.eq.141 .and. llok .and. ityp.eq.BUFR_negz .and. .not.llbogus ) then
        llok=.false.
      endif
      !
      ! Ground-based GPS (GP) data (codtyp 189)
      ! LLOK = .TRUE. DY DEFAULT IF ELEMENT IS IN NLIST
      ! If LASSMET = .FALSE. don't want to assimilate Ps (BUFR_NEPS),
      ! Ts (BUFR_NETS), or (T-Td)s (BUFR_NESS)
      !
      IF ( IDBURP .EQ. 189 ) THEN
        IF (.NOT.LASSMET .AND. (ITYP .EQ. BUFR_NEPS .OR.  &
            ITYP .EQ. BUFR_NETS .OR. ITYP .EQ. BUFR_NESS)) THEN
          LLOK = .FALSE.
        ENDIF
      ENDIF
      !
      ! Exclude T-Td above level RLIMLVHU (mbs)
      !
      IF ( (IVCO .EQ. 2) .AND. (ITYP .EQ. BUFR_NEES) .AND.  &
           (IPRES .LT. NINT(FILT_RLIMLVHU*100)) ) THEN
        LLOK=.FALSE.
      ENDIF
      !
      ! Bad data with quality control flags via bit list specified in NLISTFLG
      !
      LLREJ = .FALSE.
      DO JD=1,FILT_NFLAGS
        IBAD= 13-FILT_NLISTFLG(JD)
        LLREJ=( BTEST(IFLG,IBAD) ) .OR. LLREJ
      ENDDO
      !
      ! Filter TOVS data
      !
      ITYP = obs_bodyElem_i(lobsSpaceData,OBS_VNM,INDEX_BODY)
      IF ( ITYP .EQ. BUFR_NBT1 .OR. ITYP .EQ. BUFR_NBT2 .OR. &
           ITYP .EQ. BUFR_NBT3 .AND. tvs_Is_idburp_tovs(IDBURP) ) THEN
        !
        ! Invalid land/sea/sea-ice flag
        !
        ILANSEA  = obs_headElem_i(lobsSpaceData,OBS_OFL,INDEX_HEADER)
        IF (ILANSEA .LT. 0 .OR. ILANSEA .GT. 2  ) THEN
          LLOK = .FALSE.
        ENDIF

      ENDIF

      IF (LLOK .AND. .NOT. LLREJ) THEN
        call obs_bodySet_i(lobsSpaceData,OBS_ASS,INDEX_BODY,1)
        IKNT= IKNT + 1
      ELSE
        call obs_bodySet_i(lobsSpaceData,OBS_ASS,INDEX_BODY,0)
      ENDIF

    ENDDO BODY

    call rpn_comm_allreduce(iknt,iknt,1,"MPI_INTEGER","MPI_SUM","GRID",ierr)
    if(mpi_myid.eq.0) WRITE(*,*) '  Number of data assimilated by 3d-var:',IKNT

    if(mpi_myid.eq.0) WRITE(*,*) 'end of filt_suprep'

    ! ABORT IF THERE IS NO DATA TO BE ASSIMILATED
    IF (IKNT.EQ.0 ) THEN
      call abort3d('SUPREP. NO DATA TO BE ASSIMILATED')
    ENDIF

  end subroutine filt_suprep

  subroutine filt_topo(lcolumnhr,lobsSpaceData)
    implicit none

    type(struct_columnData) :: lcolumnhr
    type(struct_obs) :: lobsSpaceData

    integer :: index_header, index_body

    if (ltopofilt) then
      if(mpi_myid.eq.0) write(*,*)' *****************************************'
      if(mpi_myid.eq.0) write(*,*)' *    filt_topo:                         *'
      if(mpi_myid.eq.0) write(*,*)' *                                       *'
      if(mpi_myid.eq.0) write(*,*)' *    FILTER OF OBS DUE TO TOPOGRAPHY    *'
      if(mpi_myid.eq.0) write(*,*)' *                                       *'
      if(mpi_myid.eq.0) write(*,*)' *****************************************'
      CALL filt_toposfc(lcolumnhr,lobsSpaceData)
      CALL filt_toporaob(lcolumnhr,lobsSpaceData)
      CALL filt_topoaisw(lcolumnhr,lobsSpaceData)
      CALL filt_topoprof(lcolumnhr,lobsSpaceData)
      CALL filt_topocsbt(lcolumnhr,lobsSpaceData)
    else
      if(mpi_myid.eq.0) write(*,*)' *****************************************'
      if(mpi_myid.eq.0) write(*,*)' *    filt_topo:                         *'
      if(mpi_myid.eq.0) write(*,*)' *                                       *'
      if(mpi_myid.eq.0) write(*,*)' * NO FILTER OF OBS DUE TO TOPOGRAPHY    *'
      if(mpi_myid.eq.0) write(*,*)' *                                       *'
      if(mpi_myid.eq.0) write(*,*)' *****************************************'
    endif
  end subroutine filt_topo


      SUBROUTINE filt_topoSFC(lcolumnhr,lobsSpaceData)
!*
!***s/r  filt_topoSFC
!*
!*Author  : P. Koclas *CMC/AES  October  1998
!*
!**    Purpose:
!*      Refuse elements which are too far away from the surface.
!*      Replace the pressure of elements which are slightly below
!*      the model surface by the pressure of the trial field.
!*
      implicit none
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData

      integer :: index_header, index_body
      INTEGER JPINEL
      PARAMETER(JPINEL=10)
      INTEGER J,JD,JID,JDATA,IBAD,IFLG
      LOGICAL LLREJ, LLPRINT, LLOK
      REAL(8) :: ZVAL,ZLEV,ZLEV2,ZDIFF,ZHHH,ZMODEL
      INTEGER ITYP,IDBURP
      INTEGER ILEM,ICRIT
      INTEGER ILISTEL(JPINEL)
      INTEGER IKOUNTREA(JPINEL),IKOUNTREJ(JPINEL),IKOUNTT
      REAL(8) :: RLISTCRIT(JPINEL)

      character(len=2), dimension(3) :: list_family
      integer :: index_family

      DATA    RLISTCRIT/50.,50.,50.,50.,50.,800.,800.,800.,800.,1000. /
!C
!C
!C     RESET DZMAX FOR GB GPS ZTD TO VALUE IN NAMELIST FILE
!C
      RLISTCRIT(10) = DZMAX

      ILISTEL(1)=BUFR_NEDS
      ILISTEL(2)=BUFR_NEFS
      ILISTEL(3)=BUFR_NEUS
      ILISTEL(4)=BUFR_NEVS
      ILISTEL(5)=BUFR_NESS
      ILISTEL(6)=BUFR_NETS
      ILISTEL(7)=BUFR_NEPS
      ILISTEL(8)=BUFR_NEPN
      ILISTEL(9)=BUFR_NEGZ
      ILISTEL(10)=BUFR_NEZD

      WRITE(*,* ) ' '
      WRITE(*,* ) ' SUBROUTINE filt_topoSFC '
      WRITE(*,* ) ' '
      WRITE(*,* ) '*****************************************************'
      WRITE(*,222)'ELEMENTS                  ',(  ILISTEL(J),J=1,jpinel)
      WRITE(*,223)'REJECTION BOUNDARY(METRE) ',(RLISTCRIT(J),J=1,jpinel)
      WRITE(*,* ) '*****************************************************'
      WRITE(*,* ) ' '
      LLPRINT = .FALSE.
      !
      ! Loop over the families of interest
      !
      list_family(1) = 'SF'
      list_family(2) = 'UA'
      list_family(3) = 'GP'
      FAMILY: do index_family = 1,3

!C       SET COUNTERS TO ZERO
         IKOUNTREJ(:)=0
         IKOUNTREA(:)=0
         !
         ! loop over all header indices of each family
         !
                                        ! Set the header list
                                        ! (& start at the beginning of the list)
         call obs_set_current_header_list(lobsSpaceData, &
                                          list_family(index_family))
         HEADER: do
            index_header = obs_getHeaderIndex(lobsSpaceData)
            if (index_header < 0) exit HEADER

            ! loop over all body indices (still in the same family)
                                        ! Set the body list
                                        ! (& start at the beginning of the list)
            call obs_set_current_body_list(lobsSpaceData, index_header)
            BODY: do 
               index_body = obs_getBodyIndex(lobsSpaceData)
               if (index_body < 0) exit BODY

               LLOK = obs_bodyElem_i(lobsSpaceData,OBS_VCO,INDEX_BODY) .EQ. 1
               IF (.not. LLOK) THEN
                  cycle BODY ! Proceed to the next index_body
               end if

               IFLG     = obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY)
               ITYP=obs_bodyElem_i(lobsSpaceData,OBS_VNM,INDEX_BODY)
               IDBURP = obs_headElem_i(lobsSpaceData,OBS_ITY,INDEX_HEADER)
               ZDIFF=99999.

               IF ( (ITYP .eq. BUFR_NEGZ)  ) THEN
                  LLREJ = .FALSE.
                  IF ( .NOT. LLREJ ) THEN
                     ZVAL=obs_bodyElem_r(lobsSpaceData,OBS_VAR,INDEX_BODY)
                     ZDIFF= ABS( ( ZVAL-col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'), &
                                                     INDEX_HEADER,'MM') &
                                 )/RG )
                     ZLEV=obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY)
                  ENDIF

               ELSE
                  ZHHH=obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY)
                  ITYP=obs_bodyElem_i(lobsSpaceData,OBS_VNM,INDEX_BODY)
                  ZDIFF= ABS( ZHHH- col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM') &
                                    /RG )
                  ZLEV=obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY)
               ENDIF

               ZVAL=obs_bodyElem_r(lobsSpaceData,OBS_VAR,INDEX_BODY)
               ITYP=obs_bodyElem_i(lobsSpaceData,OBS_VNM,INDEX_BODY)
               ZLEV2=obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY)
!C
!C                APPLY FILTER TO SELECTED ELEMENTS
!C
               FILTER: DO J=1,JPINEL
                  ICRIT=RLISTCRIT(J)
                  ILEM=ILISTEL(J)
                  IF (ZLEV .EQ. ZLEV2 .AND. ITYP .EQ. ILEM ) THEN
                    ZDIF: IF ( ZDIFF .LE. ICRIT) THEN
                      IF (obs_bodyElem_i(lobsSpaceData,OBS_ASS,INDEX_BODY) .EQ. 1)THEN
                        IKOUNTREA(J)=IKOUNTREA(J)+1
                        IF(LLPRINT) THEN
                          ZMODEL =col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
                          write(*,*)'Keep OBS:stnid,index_header,ityp,',&
                               'icrit,zlev,zhhh,zmodel,zdiff ', &
                               obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER)&
                               ,INDEX_HEADER,ITYP,ICRIT,zlev,zhhh,zmodel,zdiff
                        ENDIF
                      ENDIF
                    ELSE
                      ASSIMILATED: IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS, &
                                                   INDEX_BODY) &
                                        .EQ. 1) THEN
                        call obs_bodySet_i(lobsSpaceData,OBS_FLG,INDEX_BODY,  &
                                       ibset(obs_bodyElem_i(lobsSpaceData, &
                                                        OBS_FLG,INDEX_BODY), &
                                             18 ) &
                                      )
                        IF(LLPRINT) THEN
                          WRITE(*,225) 'Reject OBS ',INDEX_HEADER,ITYP, &
                              obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),&
                              IDBURP,  &
                              obs_headElem_r(lobsSpaceData,OBS_LAT,INDEX_HEADER),&
                              obs_headElem_r(lobsSpaceData,OBS_LON,INDEX_HEADER)
                        ENDIF
                        call obs_bodySet_i(lobsSpaceData,OBS_ASS,INDEX_BODY,0)
                        IKOUNTREJ(J)=IKOUNTREJ(J)+1
                      ENDIF ASSIMILATED
                    ENDIF ZDIF
                  ENDIF
               ENDDO FILTER
            ENDDO BODY
         ENDDO HEADER

         WRITE(*,* ) ' '
         WRITE(*,* ) '*****************************************************'
         WRITE(*,*) 'FAMILY = ',list_family(index_family)
         WRITE(*,222 )'ELEMENTS            ', (  ILISTEL(J),J=1,JPINEL)
         WRITE(*,222)'ACCEPTED  ',(IKOUNTREA(J),J=1,JPINEL)
         WRITE(*,222)'REJECTED  ',(IKOUNTREJ(J),J=1,JPINEL)
         WRITE(*,* ) '*****************************************************'
         WRITE(*,* ) ' '
  222    FORMAT(2x,a29,10(2x,i5))
  223    FORMAT(2x,a29,10(2x,f5.0))
  225    FORMAT(2x,a13,2x,I6,2X,I5,1x,a9,1x,I6,1x,4(2x,f9.2))

      ENDDO FAMILY

      IKOUNTT=0
      DO JDATA=1,obs_numbody(lobsSpaceData)
         IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,JDATA) .EQ. 1) IKOUNTT=IKOUNTT+1
      ENDDO
      WRITE(*,'(1X," NUMBER OF DATA ASSIMILATED BY 3D-VAR AFTER ADJUSTMENTS: ",i10)') IKOUNTT
      WRITE(*,* ) ' '

      RETURN
      END subroutine filt_toposfc


      SUBROUTINE filt_topoRAOB(lcolumnhr,lobsSpaceData)
!*
!***s/r  filt_topoRAOB
!*
!*Author  : P. Koclas *CMC/AES  October  1998
!*
!**    Purpose:
!*      Refuse elements which are too far away from the surface of the model
!*      Refuse elements which are considered in the free atmosphere of
!*      the RAOB but fall in the surface boundary layer of the model atmosphere.
!*
      implicit none
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData

      integer :: index_header, index_body
      INTEGER JPINEL,JPRANGE
      PARAMETER(JPINEL=7,JPRANGE=10)
      INTEGER IJ,J,JD,JDATA,IFLG
      LOGICAL LLREJ,LLNOIR,LLSFC(JPINEL),LLALTOK(JPINEL),LLFOUND
      REAL*8 ZVAL,ZLEV,ZCRIT,ZDIFF,ZDIFALT,ZPCRIT,ZPMAX(JPINEL)
      REAL*8 ZLAT,ZLON,ZGZG,ZSTNALT,ZPB,ZPT,ZDELP
      INTEGER ITYP,IASS,ICOUNT
      INTEGER ICOUNTAL,ICOUNTAH,ICOUNTBL,ICOUNTBH
      INTEGER ILEM,IELGZ
      INTEGER ILISTEL(JPINEL),INDXEL(JPINEL)
      INTEGER ITOTACC(JPINEL),ITOTREJ(JPINEL),IKOUNTT
      INTEGER ISFCACC(JPINEL),ISFCREJ(JPINEL),ISBLREJ(JPINEL)
      INTEGER IGZACC(JPINEL),IGZREJ(JPINEL),IBNDREJ(JPINEL)
      INTEGER INEARACC(JPINEL),IRANGE(JPRANGE)
      REAL*8    ZLMINF(JPRANGE),ZLMSUP(JPRANGE),ZDIFGZ
      REAL*8    RLISTCRIT(JPINEL),RSBLCRIT(JPINEL),JPMAX(JPINEL)
      LOGICAL LLPRINT,LLOK

      DATA    RLISTCRIT/50.,50.,50.,50.,50.,50.,800./
      DATA    RSBLCRIT /5000.0,5000.0,5000.0,5000.0,5000.0,5000.0,5000.0 /
      DATA    ZLMINF /-9999.,-300.,-200.,-100.,-50.,0.,50.,100.,200.,300./
      DATA    ZLMSUP /-300.,-200.,-100.,-50.,0.,50.,100.,200.,300.,9999./
      ILISTEL(1)=BUFR_NEDD
      ILISTEL(2)=BUFR_NEFF
      ILISTEL(3)=BUFR_NEUU
      ILISTEL(4)=BUFR_NEVV
      ILISTEL(5)=BUFR_NEES
      ILISTEL(6)=BUFR_NETT
      ILISTEL(7)=BUFR_NEGZ

      LLPRINT = .FALSE.

      WRITE(*,* ) ' '
      WRITE(*,* ) ' SUBROUTINE filt_topoRAOB '
      WRITE(*,* ) ' '
      WRITE(*,* ) '************************************************'
      WRITE(*,222)' ELEMENTS                  ',(  ILISTEL(J),J=1,jpinel)
      WRITE(*,223)' REJECTION BOUNDARY(METRE) ',(RLISTCRIT(J),J=1,jpinel)
      WRITE(*,223)' REJECTION SBL (PASCAL) ',(RSBLCRIT(J),J=1,jpinel)
      WRITE(*,* ) '************************************************'
      WRITE(*,* ) ' '
      IELGZ =  ILISTEL(JPINEL)
!C
!C     SET COUNTERS TO ZERO
!C
      DO J=1,JPRANGE
         IRANGE(J) = 0
      ENDDO
      DO J=1,JPINEL
         ITOTREJ(J)=0
         ITOTACC(J)=0
         ISFCACC(J)=0
         INEARACC(J)=0
         ISFCREJ(J)=0
         ISBLREJ(J)=0
         IGZACC(J)=0
         IGZREJ(J)=0
         IBNDREJ(J)=0
      ENDDO
      IKOUNTT=0
      ICOUNT   =0
      ICOUNTAL =0
      ICOUNTAH =0
      ICOUNTBL =0
      ICOUNTBH =0

      !
      ! loop over all header indices of the 'UA' family
      !
                                        ! Set the header list
                                        ! (& start at the beginning of the list)
      call obs_set_current_header_list(lobsSpaceData, 'UA')
      HEADER: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER

         ZLAT=obs_headElem_r(lobsSpaceData,OBS_LAT,INDEX_HEADER) &
                                                      * MPC_DEGREES_PER_RADIAN_R8
         ZLON=obs_headElem_r(lobsSpaceData,OBS_LON,INDEX_HEADER) &
                                                      * MPC_DEGREES_PER_RADIAN_R8
         ZSTNALT=obs_headElem_r(lobsSpaceData,OBS_ALT,INDEX_HEADER)
         ZDIFALT=  ZSTNALT- col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
         DO J=1,JPINEL
            LLALTOK(J) = .FALSE.
            IF(ABS(ZDIFALT).LE.RLISTCRIT(J)) LLALTOK(J)=.TRUE.
         ENDDO
!C
!C--------HEIGHT GZ
         !
         ! loop over all body indices (still in the 'UA' family)
         !
                                        ! Set the body list
                                        ! (& start at the beginning of the list)
         call obs_set_current_body_list(lobsSpaceData, index_header)
         BODY: do 
            index_body = obs_getBodyIndex(lobsSpaceData)
            if (index_body < 0) exit BODY

            ITYP=obs_bodyElem_i(lobsSpaceData,OBS_VNM,INDEX_BODY)
            IASS=obs_bodyElem_i(lobsSpaceData,OBS_ASS,INDEX_BODY)

            LLOK = obs_bodyElem_i(lobsSpaceData,OBS_VCO,INDEX_BODY) .EQ. 2  &
                   .AND. ITYP.EQ.ILISTEL(JPINEL) .AND. IASS.EQ.1
            IF (.not. LLOK )  THEN
               cycle BODY ! Proceed with the next index_body
            end if

            IKOUNTT=IKOUNTT+1
            IFLG= obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY)
            ITYP= obs_bodyElem_i(lobsSpaceData,OBS_VNM,INDEX_BODY)
            ZDIFF=99999.
            ZLEV=obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY)
            IASS=obs_bodyElem_i(lobsSpaceData,OBS_ASS,INDEX_BODY)
            ZVAL=obs_bodyElem_r(lobsSpaceData,OBS_VAR,INDEX_BODY)
            ZDIFF= ( ZVAL-col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM') )/RG
            ZCRIT= -RLISTCRIT(JPINEL)
            IF ( ZDIFF .LT. 0.0 ) THEN
               ZDIF: IF(ZDIFF .GE. ZCRIT) THEN
                  ITOTACC(JPINEL)=ITOTACC(JPINEL)+1
                  IGZACC(JPINEL)=IGZACC(JPINEL)+1
                  IF(LLPRINT) THEN
                     WRITE(*,*) 'Keep GZ BELOW MODEL SFC '  &
                           ,INDEX_HEADER,ITYP &
                           ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER) &
                           ,ZLAT,ZLON,ZLEV,ZVAL/RG  &
                           ,col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG &
                           ,ZDIFF,ZCRIT
                  ENDIF
               ELSE
                  IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,INDEX_BODY) .EQ. 1) THEN
                     call obs_bodySet_i(lobsSpaceData,OBS_FLG,INDEX_BODY,  &
                           ibset( obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY), 18 ))
                     IF(LLPRINT) THEN
                        WRITE(*,*)'REJ GZ BELOW MODEL SFC '  &
                         ,INDEX_HEADER,ITYP &
                         ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER)  &
                         ,ZLAT,ZLON,ZLEV,ZVAL/RG &
                         ,col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG &
                         ,ZDIFF,ZCRIT
                     ENDIF
                     call obs_bodySet_i(lobsSpaceData,OBS_ASS,INDEX_BODY,0)
                     ITOTREJ(JPINEL)=ITOTREJ(JPINEL)+1
                     IGZREJ(JPINEL)=IGZREJ(JPINEL)+1
                  ENDIF
               ENDIF ZDIF
            ENDIF
         ENDDO BODY
!C
!C       REJECT ELEMENTS OF U,V,T-TD,T BELOW THE MODEL SURFACE
!C       AND THOSE NON SURFACE ELEMENTS PRESENT IN THE SURFACE
!C       BOUNDARY LAYER OF THE RAOB OR OF THE MODEL.
!C       AT THIS POINT WE WANT TO KEEP OBSERVATIONS IN THE FREE
!C       ATMOSPHERE
!C
!C
!C--------------Special case if station elevation is above model elevation
!C              we want to define zpt at a level above the station.
!C              To approximate that value, we will transform the difference
!C              between the 2 elevations into a difference in pressure using
!C              the rule of thumb (1Mb =8 metres)
!C--------------Even though TT(element=12001) is not assimmilated
!C              it is treated as if it were for the evaluation step.
!C              Otherwise we use observations of TT that are too far
!C              from the model topography in the verification.

                                        ! Set the body list
                                        ! (& start at the beginning of the list)
         call obs_set_current_body_list(lobsSpaceData, index_header)
         BODY2: do 
            index_body = obs_getBodyIndex(lobsSpaceData)
            if (index_body < 0) exit BODY2

            ITYP=obs_bodyElem_i(lobsSpaceData,OBS_VNM,INDEX_BODY)
            IJ = -1
            DO J=1,JPINEL-1
               IF(ITYP.EQ.ILISTEL(J))IJ = J
            ENDDO
            LLOK = obs_bodyElem_i(lobsSpaceData,OBS_VCO,INDEX_BODY) .EQ. 2  &
                  .AND. ITYP .NE.ILISTEL(JPINEL) .AND. IJ .NE. -1
            IF (LLOK )  THEN
               ZLEV=obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY)
               ZPB =col_getElem(lcolumnhr,1,INDEX_HEADER,'P0')
               ZPT =ZPB-RSBLCRIT(IJ)
               ZDELP = 999999.0
               IF (ZDIFALT .GT. 0.0) THEN
                  ZDELP = ZDIFALT * 100. / 8.0
                  ZPT   = ZPB-(ZDELP+RSBLCRIT(IJ))
               ENDIF
               IF(LLALTOK(IJ)) THEN
!C--------------------Model surface and station altitude are very close
!C              Accept observation if zlev is within the domain
!C              of the trial field
                 ZPB = col_getElem(lcolumnhr,1,INDEX_HEADER,'P0')
                 ZPT = col_getPressure(LCOLUMNHR,col_getNumLev(LCOLUMNHR,'MM')-1,INDEX_HEADER,'MM')
                 IF(LLPRINT) THEN
                   WRITE(*,*) 'LLALTOK .EQ. .TRUE. ',INDEX_HEADER,ITYP  &
                       ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT  &
                       ,ZLON,ZLEV,ZPB,ZPT,ZDIFALT
                 ENDIF
               ENDIF
               IF(ZLEV .GT. ZPB ) THEN
                  call obs_bodySet_i(lobsSpaceData,OBS_FLG,INDEX_BODY,  &
                              ibset(obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY),&
                                    18 ))
                  ZGZG = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
                  IF(LLPRINT) THEN
                     WRITE(*,*) 'Rej Obs below model sfc '  &
                          ,INDEX_HEADER,ITYP &
                          ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT  &
                          ,ZLON,ZLEV,ZPB
                  ENDIF
                  call obs_bodySet_i(lobsSpaceData,OBS_ASS,INDEX_BODY,0)
                  ITOTREJ(IJ)=ITOTREJ(IJ)+1
                  IBNDREJ(IJ)=IBNDREJ(IJ)+1
               ELSEIF(ZLEV.LE.ZPB .AND. ZLEV.GT.ZPT ) THEN
                  call obs_bodySet_i(lobsSpaceData,OBS_FLG,INDEX_BODY,  &
                       ibset( obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY), 18 ))
                  ZGZG = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
                  IF(LLPRINT) THEN
                     WRITE(*,*) ' REJ SBL ITYP,DALT ',ITYP,ZDIFALT
                     WRITE(*,*) 'Reject LEV IN SBL LYR '  &
                          ,INDEX_HEADER,ITYP,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT,ZLON,ZLEV  &
                          ,ZPB,ZPT,RSBLCRIT(IJ),ZDELP,ZDIFALT
                  ENDIF
                  call obs_bodySet_i(lobsSpaceData,OBS_ASS,INDEX_BODY,0)
                  ITOTREJ(IJ)=ITOTREJ(IJ)+1
                  ISBLREJ(IJ)=ISBLREJ(IJ)+1
               ENDIF
            ENDIF
         ENDDO BODY2
      ENDDO HEADER

      WRITE(*,* ) ' '
      WRITE(*,* ) '***************************************'
      WRITE(*,*) 'FAMILY = UA'
      WRITE(*,222)' ELEMENTS          ', (  ILISTEL(J),J=1,JPINEL)
      WRITE(*,222)' ACC OB NEAR ',(INEARACC(J),J=1,JPINEL)
      WRITE(*,222)' ACC GZ EXT  ',(IGZACC(J),J=1,JPINEL)
      WRITE(*,222)' ACC TOTAL   ',(ITOTACC(J),J=1,JPINEL)
      WRITE(*,* ) '***************'
      WRITE(*,222)' REJ GZ EXT  ',(IGZREJ(J),J=1,JPINEL)
      WRITE(*,222)' REJ OUT BND ',(IBNDREJ(J),J=1,JPINEL)
      WRITE(*,222)' REJ SBL     ',(ISBLREJ(J),J=1,JPINEL)
      WRITE(*,222)' REJ TOTAL   ',(ITOTREJ(J),J=1,JPINEL)
      WRITE(*,* ) '***************************************'
      WRITE(*,* ) ' '
 222  FORMAT(2x,a29,7(2x,i5))
 223  FORMAT(2x,a29,7(2x,f6.0))

      IKOUNTT=0
      DO JDATA=1,obs_numbody(lobsSpaceData)
         IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,JDATA) .EQ. 1) IKOUNTT=IKOUNTT+1
      ENDDO
      WRITE(*,'(1X," NUMBER OF DATA ASSIMILATED BY 3D-VAR AFTER ADJUSTMENTS:",i10)') IKOUNTT
      WRITE(*,* ) ' '

      RETURN
      END subroutine filt_toporaob


      SUBROUTINE filt_topoAISW(lcolumnhr,lobsSpaceData)
!*
!***s/r  filt_topoAISW
!*
!*Author  : R. Sarrazin *CMC/AES  February 2000
!*
!**    Purpose:
!*      Refuse elements which are too close to the surface.
!*
      implicit none
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData

      integer :: index_header, index_body
      INTEGER JPINEL
      PARAMETER(JPINEL=4)
      INTEGER J,JDATA
      LOGICAL LLPRINT
      REAL*8 ZVAL,ZDIFF
      INTEGER ITYP
      INTEGER ILEM
      INTEGER IKOUNTREJ(JPINEL),IKOUNTT
      INTEGER ILISTEL(JPINEL)
      DATA    ILISTEL/11003,11004,12001,12192/
      REAL*8    RLISTCRIT
      character(len=2), dimension(2) :: list_family
      integer :: index_family

      DATA    RLISTCRIT/-50./

      WRITE(*,* ) ' '
      WRITE(*,* ) ' SUBROUTINE filt_topoAISW '
      WRITE(*,* ) ' '
      WRITE(*,* ) '****************************************************'
      WRITE(*,222)'ELEMENTS                 ', (  ILISTEL(J),J=1,jpinel)
      WRITE(*,223)'REJECTION BOUNDARY(HPA)  ', RLISTCRIT
      WRITE(*,* ) '****************************************************'
      WRITE(*,* ) ' '
      LLPRINT = .FALSE.
      !
      ! Loop over the families of interest
      !
      list_family(1) = 'AI'
      list_family(2) = 'SW'
      FAMILY: do index_family = 1,2

!        SET COUNTERS TO ZERO
         IKOUNTREJ(:)=0

         ! loop over all body indices of each family
         call obs_set_current_body_list(lobsSpaceData, list_family(index_family))
         BODY: do 
            index_body = obs_getBodyIndex(lobsSpaceData)
            if (index_body < 0) exit BODY
!C
!C          REJECT DATA TOO CLOSE TO THE MODEL OROGRAPHY ,PUT TO
!C          MODEL OROGRAPHY, DATA WHICH IS BELOW , BUT CLOSE TO THE SURFACE.
!C
            ZVAL=obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY)
            INDEX_HEADER = obs_bodyElem_i(lobsSpaceData,OBS_HIND,INDEX_BODY)
            ZDIFF=  (ZVAL- col_getElem(lcolumnhr,1,INDEX_HEADER,'P0') )/100.
            IF ( ZDIFF .GT. RLISTCRIT ) THEN
               ITYP=obs_bodyElem_i(lobsSpaceData,OBS_VNM,INDEX_BODY)
               DO J=1,JPINEL
                  ILEM=ILISTEL(J)
                  IF ( ITYP .EQ. ILEM ) THEN
                     IF(LLPRINT) THEN
                        WRITE(*,224) 'Reject OBS ',index_header,ITYP &
                          ,obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY),ZDIFF
                     ENDIF
                     call obs_bodySet_i(lobsSpaceData,OBS_ASS,INDEX_BODY,0)
                     IKOUNTREJ(J)=IKOUNTREJ(J)+1
                     call obs_bodySet_i(lobsSpaceData,OBS_FLG,INDEX_BODY,  &
                           ibset(obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY),&
                                 18 ))
                  ENDIF
               ENDDO
            ENDIF
         ENDDO BODY

         WRITE(*,* ) ' '
         WRITE(*,* ) &
           '*****************************************************************'
         WRITE(*,*)' FAMILY = ',list_family(index_family)
         WRITE(*,222 )'ELEMENTS            ', (  ILISTEL(J),J=1,JPINEL)
         WRITE(*,222)'REJECTED  ',(IKOUNTREJ(J),J=1,JPINEL)
         WRITE(*,* ) &
           '*****************************************************************'
         WRITE(*,* ) ' '

      ENDDO FAMILY

      IKOUNTT=0
      DO JDATA=1,obs_numbody(lobsSpaceData)
         IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,JDATA) .EQ. 1) IKOUNTT=IKOUNTT+1
      ENDDO
      WRITE(*  &
           ,'(1X," NUMBER OF DATA ASSIMILATED BY 3D-VAR AFTER ADJUSTMENTS:",i10)')IKOUNTT
      WRITE(*,* ) ' '

  222 FORMAT(2x,a29,4(2x,i5))
  223 FORMAT(2x,a29,4(2x,f5.0))
  224 FORMAT(2x,a13,2x,I6,2X,I5,2(2x,f9.2))

      RETURN
      END subroutine filt_topoaisw


      SUBROUTINE filt_topoPROF(lcolumnhr,lobsSpaceData)
!*
!***s/r  filt_topoPROF
!*
!*Author  : J. St-James October 2002
!*          - Based on the subroutine filt_toporaob.  Adapt to
!*            Profiler data
!*
!**    Purpose:
!*      Refuse elements which are too far away from the surface of the model
!*      Refuse elements which are considered in the free atmosphere of
!*      the RAOB but fall in the surface boundary layer of the model atmosphere.
!*
      implicit none
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData

      integer :: index_header, index_body
      INTEGER JPINEL,JPRANGE
      PARAMETER(JPINEL=7,JPRANGE=10)
      INTEGER IJ,J,JD,JDATA,IFLG
      LOGICAL LLREJ,LLNOIR,LLSFC(JPINEL),LLALTOK(JPINEL),LLFOUND
      REAL*8 ZVAL,ZLEV,ZCRIT,ZDIFF,ZDIFALT,ZPCRIT,ZPMAX(JPINEL)
      REAL*8 ZLAT,ZLON,ZGZG,ZSTNALT,ZPB,ZPT,ZDELP
      INTEGER ITYP,IASS,ICOUNT
      INTEGER ICOUNTAL,ICOUNTAH,ICOUNTBL,ICOUNTBH
      INTEGER ILEM,IELGZ
      INTEGER ILISTEL(JPINEL),INDXEL(JPINEL)
      INTEGER ITOTACC(JPINEL),ITOTREJ(JPINEL),IKOUNTT
      INTEGER ISFCACC(JPINEL),ISFCREJ(JPINEL),ISBLREJ(JPINEL)
      INTEGER IGZACC(JPINEL),IGZREJ(JPINEL),IBNDREJ(JPINEL)
      INTEGER INEARACC(JPINEL),IRANGE(JPRANGE)
      REAL*8    ZLMINF(JPRANGE),ZLMSUP(JPRANGE),ZDIFGZ
      REAL*8    RLISTCRIT(JPINEL),RSBLCRIT(JPINEL),JPMAX(JPINEL)
      LOGICAL LLPRINT,LLOK
      logical :: list_is_empty

      DATA    RLISTCRIT/50.,50.,50.,50.,50.,50.,800./
      DATA    RSBLCRIT /400.0,400.0,400.0,400.0,400.0,400.0,400.0 /
      DATA    ZLMINF /-9999.,-300.,-200.,-100.,-50.,0.,50.,100.,200.,300./
      DATA    ZLMSUP /-300.,-200.,-100.,-50.,0.,50.,100.,200.,300.,9999./
      ILISTEL(1)=BUFR_NEDD
      ILISTEL(2)=BUFR_NEFF
      ILISTEL(3)=BUFR_NEUU
      ILISTEL(4)=BUFR_NEVV
      ILISTEL(5)=BUFR_NEES
      ILISTEL(6)=BUFR_NETT
      ILISTEL(7)=BUFR_NEGZ

      LLPRINT = .FALSE.

      WRITE(*,* ) ' '
      WRITE(*,* ) ' SUBROUTINE filt_topoPROF '
      WRITE(*,* ) ' '
      WRITE(*,* ) '************************************************'
      WRITE(*,222)' ELEMENTS                  ',(  ILISTEL(J),J=1,jpinel)
      WRITE(*,223)' REJECTION BOUNDARY(METRE) ',(RLISTCRIT(J),J=1,jpinel)
      WRITE(*,223)' REJECTION SBL (METRE) ',(RSBLCRIT(J),J=1,jpinel)
      WRITE(*,* ) '************************************************'
      WRITE(*,* ) ' '
      IELGZ =  ILISTEL(JPINEL)
!C
!C     SET COUNTERS TO ZERO
!C
      DO J=1,JPRANGE
         IRANGE(J) = 0
      ENDDO
      DO J=1,JPINEL
         ITOTREJ(J)=0
         ITOTACC(J)=0
         ISFCACC(J)=0
         INEARACC(J)=0
         ISFCREJ(J)=0
         ISBLREJ(J)=0
         IGZACC(J)=0
         IGZREJ(J)=0
         IBNDREJ(J)=0
      ENDDO
      IKOUNTT=0
      ICOUNT   =0
      ICOUNTAL =0
      ICOUNTAH =0
      ICOUNTBL =0
      ICOUNTBH =0

      !
      ! loop over all header indices of the 'PR' family
      !
                                        ! Set the header list
                                        ! (& start at the beginning of the list)
      call obs_set_current_header_list(lobsSpaceData, 'PR')
      HEADER: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER

                                        ! Set the body list
                                        ! (& start at the beginning of the list)
         call obs_set_current_body_list(lobsSpaceData, index_header, &
                                        list_is_empty)
         if (list_is_empty) then
           cycle HEADER                 ! Proceed to the next HEADER
         end if

         ZLAT=obs_headElem_r(lobsSpaceData,OBS_LAT,INDEX_HEADER) &
                                                      * MPC_DEGREES_PER_RADIAN_R8
         ZLON=obs_headElem_r(lobsSpaceData,OBS_LON,INDEX_HEADER) &
                                                      * MPC_DEGREES_PER_RADIAN_R8
         ZSTNALT=obs_headElem_r(lobsSpaceData,OBS_ALT,INDEX_HEADER)
         ZDIFALT=  ZSTNALT- col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
         DO J=1,JPINEL
            LLALTOK(J) = .FALSE.
            IF(ABS(ZDIFALT).LE.RLISTCRIT(J)) LLALTOK(J)=.TRUE.
         ENDDO
!C
!C       REJECT ELEMENTS OF U,V,T-TD,T BELOW THE MODEL SURFACE
!C       AND THOSE NON SURFACE ELEMENTS PRESENT IN THE SURFACE
!C       BOUNDARY LAYER OF THE RAOB OR OF THE MODEL.
!C       AT THIS POINT WE WANT TO KEEP OBSERVATIONS IN THE FREE
!C       ATMOSPHERE
!C
!C
!C--------------Special case if station elevation is above model elevation
!C              we want to define zpt at a level above the station.
!C              To approximate that value, we will transform the difference
!C              between the 2 elevations into a difference in pressure using
!C              the rule of thumb (1Mb =8 metres)
!C--------------Even though TT(element=12001) is not assimmilated
!C              it is treated as if it were for the evaluation step.
!C              Otherwise we use observations of TT that are too far
!C              from the model topography in the verification.

         !
         ! loop over all body indices (still in the 'PR' family)
         !
         BODY: do 
            index_body = obs_getBodyIndex(lobsSpaceData)
            if (index_body < 0) exit BODY

            ITYP=obs_bodyElem_i(lobsSpaceData,OBS_VNM,INDEX_BODY)
            IJ = -1
            DO J=1,JPINEL-1
               IF(ITYP.EQ.ILISTEL(J))IJ = J
            ENDDO
            LLOK = obs_bodyElem_i(lobsSpaceData,OBS_VCO,INDEX_BODY) .EQ. 1  &
                .AND. ITYP .NE.ILISTEL(JPINEL) .AND. IJ .NE. -1
            IF (.not. LLOK )  THEN
               cycle BODY ! Proceed to the next index_body
            end if

            ZLEV=obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY)
            ZPB =col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
            ZPT =col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG + RSBLCRIT(IJ)
            IF (ZDIFALT .GT. 0.0) THEN
               ZPT=  col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG &
                   + (ZDIFALT+RSBLCRIT(IJ))
            ENDIF
            IF(LLALTOK(IJ)) THEN
!C--------------------Model surface and station altitude are very close
!C                    Accept observation if zlev is within the domain
!C                    of the trial field
               ZPB = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
               ZPT = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM')-1,INDEX_HEADER,'MM')/RG
               IF(LLPRINT) THEN
                  WRITE(*,*) 'LLALTOK .EQ. .TRUE. ',INDEX_HEADER,ITYP  &
                       ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT &
                       ,ZLON,ZLEV  &
                       ,col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG  &
                       ,col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM')-1,INDEX_HEADER,'MM')/RG &
                       ,ZDIFALT
               ENDIF
            ENDIF
            IF(ZLEV .LT. ZPB ) THEN
               call obs_bodySet_i(lobsSpaceData,OBS_FLG,INDEX_BODY,  &
                    ibset( obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY), 18 ))
               ZGZG = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
               IF(LLPRINT) THEN
                  WRITE(*,*) 'Rej Obs below model sfc ',INDEX_HEADER,ITYP  &
                       ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT  &
                       ,ZLON,ZLEV &
                       ,col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM')-1,INDEX_HEADER,'MM')/RG,ZPT  &
                       ,INDEX_BODY,ZPB,ZDIFALT
               ENDIF
               call obs_bodySet_i(lobsSpaceData,OBS_ASS,INDEX_BODY,0)
               ITOTREJ(IJ)=ITOTREJ(IJ)+1
               IBNDREJ(IJ)=IBNDREJ(IJ)+1

            ELSEIF(ZLEV.GE.ZPB .AND. ZLEV.LT.ZPT ) THEN
               call obs_bodySet_i(lobsSpaceData,OBS_FLG,INDEX_BODY,  &
                    ibset( obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY), 18 ))
               ZGZG = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
               IF(LLPRINT) THEN
                  WRITE(*,*) ' REJ SBL ITYP,DALT ',ITYP,ZDIFALT
                  WRITE(*,*) 'Reject LEV IN SBL LYR '   &
                       ,INDEX_HEADER,ITYP,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT,ZLON,ZLEV  &
                       ,ZPB,ZPT,RSBLCRIT(IJ),ZDELP,ZDIFALT
               ENDIF
               call obs_bodySet_i(lobsSpaceData,OBS_ASS,INDEX_BODY,0)
               ITOTREJ(IJ)=ITOTREJ(IJ)+1
               ISBLREJ(IJ)=ISBLREJ(IJ)+1
            ENDIF
         ENDDO BODY
      ENDDO HEADER

      WRITE(*,*) ' '
      WRITE(*,*) '***************************************'
      WRITE(*,*) 'FAMILY = PR'
      WRITE(*,222)' ELEMENTS          ', (  ILISTEL(J),J=1,JPINEL)
      WRITE(*,222)' ACC OB NEAR ',(INEARACC(J),J=1,JPINEL)
      WRITE(*,222)' ACC TOTAL   ',(ITOTACC(J),J=1,JPINEL)
      WRITE(*,* ) '************'
      WRITE(*,222)' REJ OUT BND ',(IBNDREJ(J),J=1,JPINEL)
      WRITE(*,222)' REJ SBL     ',(ISBLREJ(J),J=1,JPINEL)
      WRITE(*,222)' REJ TOTAL   ',(ITOTREJ(J),J=1,JPINEL)
      WRITE(*,* ) '***************************************'
      WRITE(*,* ) ' '
 222  FORMAT(2x,a29,7(2x,i5))
 223  FORMAT(2x,a29,7(2x,f6.0))

      IKOUNTT=0
      DO JDATA=1,obs_numbody(lobsSpaceData)
         IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,JDATA) .EQ. 1) IKOUNTT=IKOUNTT+1
      ENDDO
      WRITE(*,'(1X," NUMBER OF DATA ASSIMILATED BY 3D-VAR AFTER ADJUSTMENTS:",i10)') IKOUNTT
      WRITE(*,* ) ' '

      RETURN
      END subroutine filt_topoprof


      SUBROUTINE filt_topoCSBT(lcolumnhr,lobsSpaceData)
!*
!***s/r  filt_topoCSBT
!*
!*Author  : R. Sarrazin *CMC/AES  June 2008
!*Revision: A. Beaulne  CMDA      October 2012
!*          Set bit 9 in addition to the already setting of bit 18
!*
!**    Purpose:
!*      Refuse data which are too close to the surface.
!*
      implicit none
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData

      integer :: index_header, index_body
      INTEGER JPINEL
      PARAMETER(JPINEL=1)
      INTEGER J,JDATA
      LOGICAL LLPRINT
      REAL*8 ZVAL,ZDIFF
      INTEGER ITYP,IDATYP
      INTEGER ILEM
      INTEGER IKOUNTREJ(JPINEL),IKOUNTT
      INTEGER ILISTEL(JPINEL)
      DATA    ILISTEL/12163/
      REAL*8  RLISTCRIT

      DATA    RLISTCRIT/800./

      WRITE(*,* ) ' '
      WRITE(*,* ) ' SUBROUTINE filt_topoCSBT '
      WRITE(*,* ) ' '
      WRITE(*,* ) '****************************************************'
      WRITE(*,222)'ELEMENTS                 ', (  ILISTEL(J),J=1,jpinel)
      WRITE(*,223)'REJECTION BOUNDARY(HPA)  ', RLISTCRIT
      WRITE(*,* ) '****************************************************'
      WRITE(*,* ) ' '
      LLPRINT = .FALSE.
!C
!C     SET COUNTERS TO ZERO
!C
      DO J=1,JPINEL
         IKOUNTREJ(J)=0
      ENDDO
      IKOUNTT=0

      !
      ! loop over all header indices of the 'TO' family
      !
                                        ! Set the header list
                                        ! (& start at the beginning of the list)
      call obs_set_current_header_list(lobsSpaceData, 'TO')
      HEADER: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER

         IDATYP   = obs_headElem_i(lobsSpaceData,OBS_ITY,INDEX_HEADER)
         IF (IDATYP .NE. 185) THEN
            cycle HEADER ! Proceed to the next index_header
         end if

!C
!C        REJECT DATA TOO CLOSE TO THE OROGRAPHY
!C
         !
         ! loop over all body indices (still in the 'TO' family)
         !
                                        ! Set the body list
                                        ! (& start at the beginning of the list)
         call obs_set_current_body_list(lobsSpaceData, index_header)
         BODY: do 
            index_body = obs_getBodyIndex(lobsSpaceData)
            if (index_body < 0) exit BODY

            IKOUNTT=IKOUNTT+1
            ZDIFF= col_getElem(lcolumnhr,1,INDEX_HEADER,'P0') /100.
            IF ( ZDIFF .LT. RLISTCRIT ) THEN
              ITYP=obs_bodyElem_i(lobsSpaceData,OBS_VNM,index_body)
               DO J=1,JPINEL
                 ILEM=ILISTEL(J)
                 IF ( ITYP .EQ. ILEM ) THEN
                    IF(LLPRINT) THEN
                       WRITE(*,224) 'Reject OBS ',INDEX_HEADER,ITYP, &
                                  obs_bodyElem_r(lobsSpaceData,OBS_PPP,index_body), &
                                  ZDIFF
                    ENDIF
                    call obs_bodySet_i(lobsSpaceData,OBS_ASS,index_body,0)
                    IKOUNTREJ(J)=IKOUNTREJ(J)+1
                    call obs_bodySet_i(lobsSpaceData,OBS_FLG,index_body, &
                           IBSET(obs_bodyElem_i(lobsSpaceData,OBS_FLG,index_body),9))
                    call obs_bodySet_i(lobsSpaceData,OBS_FLG,index_body, &
                           IBSET(obs_bodyElem_i(lobsSpaceData,OBS_FLG,index_body),18))
                 ENDIF
               ENDDO
            ENDIF
         ENDDO BODY
      ENDDO HEADER

      WRITE(*,* ) ' '
      WRITE(*,* )  &
           '*****************************************************************'
      WRITE(*,*)' FAMILY = TO'
      WRITE(*,222 )'ELEMENTS            ', (  ILISTEL(J),J=1,JPINEL)
      WRITE(*,222)'REJECTED  ',(IKOUNTREJ(J),J=1,JPINEL)
      WRITE(*,* )  &
           '*****************************************************************'
      WRITE(*,* ) ' '
  222 FORMAT(2x,a29,1(2x,i5))
  223 FORMAT(2x,a29,1(2x,f5.0))
  224 FORMAT(2x,a13,2x,I6,2X,I5,2(2x,f9.2))

      IKOUNTT=0
      DO JDATA=1,obs_numbody(lobsSpaceData)
        IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,JDATA) .EQ. 1) IKOUNTT=IKOUNTT+1
      ENDDO
      WRITE(*  &
           ,'(1X," NUMBER OF DATA ASSIMILATED BY 3D-VAR AFTER ADJUSTMENTS:",i10)')IKOUNTT
      WRITE(*,* ) ' '

      END subroutine filt_topocsbt

end module filterObs_mod

