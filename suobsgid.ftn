!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      subroutine suobsgid(lobsSpaceData,lcolumng,nobsgid,notag,nobs)
#if defined (DOC)
*
***s/r suobsgid  initialize observation Y grid handle.
*
*Author  : S. Pellerin *ARMA/AES  Nov., 1999
*
*Revision:
*         JM Belanger CMDA/SMC  Aug 2000
*                   . 32 bits conversion
*         S. Pellerin *ARMA/SMC Nov. 2001
*                   . Management of first guess at appropriate time
*         S. Pellerin *ARMA/SMC Feb. 2002
*                   . Writing of PRM_STOB in lalo.prof file
*         M. Buehner *ARMA/SMC Aug. 2002
*                   . Changed filename from lalo.prof to init.prof
*                   . Added simulation number to init.prof (for restart)
*                   . Write numseg for SV job
*         L. Fillion ARMA/EC May 2006: LAM4d upgrade to v10_0_0.
*         L. Fillion ARMA/EC 15 Aug 2007: LAM4d upgrade to v10_0_3.
*         Bin He     *ARMA/MRB  May,2009 
*                   . Implementation of MPI Parallelization  
*         L. Fillion ARMA/EC 4 May 2010: Upgrade on v_11_01_2b.
*Arguments: none
*
#endif
      use MathPhysConstants_mod
      use minimization_mod
      use mpi
      use obsSpaceData_mod
      use columnData_mod
      IMPLICIT NONE
*implicits
#include "comlun.cdk"
#include "comgdpar.cdk"
#include "cvcord.cdk"
#include "comfilt.cdk"
#include "comvfiles.cdk"
*
      type(struct_columnData) :: lcolumng
      type(struct_obs) :: lobsSpaceData
      integer :: nobsgid(:)
      integer :: notag(:,:)
      integer :: nobs(:)
      integer jobs, ig1obs, ig2obs, ig3obs, ig4obs
      integer vezgdef,jstep,jfile
      integer :: istepobs
      integer :: idata,idatend,jdata,itimeout,iobs
      real*8 zig1,zig2,zig3,zig4,stepObsIndex
*
      real*8, allocatable, dimension(:,:) ::  dlatfld, dlonfld
      integer :: ntimeout(nfiles)

      write(nulout,*) ' '
      write(nulout,*) '-------- ENTERING SUOBSGID ---------'
      write(nulout,*) ' '

      allocate(dlatfld(obs_numheader(lobsSpaceData),col_getNumStep(lcolumng)))
      allocate(dlonfld(obs_numheader(lobsSpaceData),col_getNumStep(lcolumng)))

! CMC date time stamp of the step obs time

      do jfile = 1, nfiles
        ntimeout(jfile) = 0
      enddo

      do jstep = 1, col_getNumStep(lcolumng)
        nobs(jstep) = 0
      enddo

      do jobs=1, obs_numheader(lobsSpaceData)
!
!       return the step stamp associated whit date and time of the observation

        call getStepObsIndex(stepObsIndex,obs_get_datestamp(lobsSpaceData),obs_elem_i(lobsSpaceData,'DAT ',jobs)
     &       ,obs_elem_i(lobsSpaceData,'ETM ',jobs),nstepobs)
        if(stepObsIndex.lt.0.0d0) then
          ntimeout(obs_elem_i(lobsSpaceData,'OTP ',jobs))=
     &                  ntimeout(obs_elem_i(lobsSpaceData,'OTP ',jobs))+1

! Put the wrong data in the central bin
          jstep = (col_getNumStep(lcolumng) + 1) / 2
          nobs(jstep) = nobs(jstep) + 1

! .. flag it as out of (time) domain (bit #5 of header flag
! .. and turn off its assimilation flag

          idata = obs_elem_i(lobsSpaceData,'RLN ',jobs)
          idatend = obs_elem_i(lobsSpaceData,'NLV ',jobs) + idata -1
          do jdata = idata, idatend
            call obs_set_i(lobsSpaceData,'ASS ',JDATA, 0)
          enddo
          call obs_set_i(lobsSpaceData,'ST1 ',jobs, 
     &      ibset( obs_elem_i(lobsSpaceData,'ST1 ',jobs), 05))
        else
          jstep = nint(stepObsIndex)
          nobs(jstep) = nobs(jstep) + 1
        endif

! building the lat, long and tag vectors for each step

        dlatfld(nobs(jstep),jstep) = obs_elem_r4(lobsSpaceData,'LAT ',jobs)
        dlonfld(nobs(jstep),jstep) = obs_elem_r4(lobsSpaceData,'LON ',jobs)
        notag(nobs(jstep),jstep) = jobs

! Converting lat long to radian units

        if(dlonfld(nobs(jstep),jstep).lt.0)
     &       dlonfld(nobs(jstep),jstep) = dlonfld(nobs(jstep),jstep) +
     &       2*rpi
        if(dlonfld(nobs(jstep),jstep).ge.2.*rpi)
     &       dlonfld(nobs(jstep),jstep) =dlonfld(nobs(jstep),jstep) -
     &       2*rpi
        dlatfld(nobs(jstep),jstep)=dlatfld(nobs(jstep),jstep)*180./rpi
        dlonfld(nobs(jstep),jstep)=dlonfld(nobs(jstep),jstep)*180./rpi
      enddo

      itimeout = 0
      do jfile = 1,nfiles
        itimeout = ntimeout(jfile) + itimeout
      enddo

      if(itimeout > 0) then
        write(nulout,*) 'Number of reports with time out of range (innovation):',
     &       itimeout
        write(nulout,*) '  FAMILY       No. of reports'
        do jfile = 1,nfiles
          write(nulout,'(4x,a2,11x,i10)') CFAMTYP(jfile),ntimeout(jfile)
        enddo
      endif

      zig1 = 0.0D0
      zig2 = 0.0D0
      zig3 = 1.0D0
      zig4 = 1.0D0

      call vcxgaig('L',ig1obs, ig2obs, ig3obs, ig4obs,
     .             zig1, zig2, zig3, zig4)

      do jstep = 1,col_getNumStep(lcolumng)
        if (nobs(jstep) .gt. 0) then
          nobsgid(jstep) = vezgdef(nobs(jstep),1,'Y','L',ig1obs,ig2obs,
     &         ig3obs,ig4obs,dlonfld(1:nobs(jstep),jstep)
     &         ,dlatfld(1:nobs(jstep),jstep))
        else
          nobsgid(jstep) = -999
        endif
      enddo

      deallocate(dlatfld)
      deallocate(dlonfld)

      write(nulout,*) ' '
      write(nulout,*) '-------- END OF SUOBSGID ---------'
      write(nulout,*) ' '

      return
      end

