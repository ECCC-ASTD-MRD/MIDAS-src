subroutine sobs_all(lcolumnhr,lobsSpaceData)
  use EarthConstants_mod
  use MathPhysConstants_mod
  use obsSpaceData_mod
  use columnData_mod
  use bufr
  implicit none
#include "comfilt.cdk"
#include "comgpsgb.cdk"

  type(struct_columnData) :: lcolumnhr
  type(struct_obs) :: lobsSpaceData

  integer :: index_header, index_body

  CALL SOBSSFC
  CALL SOBSRAOB
  CALL SOBSAISW
  CALL SOBSPROF
  CALL SOBSCSBT

  CONTAINS

      SUBROUTINE SOBSSFC
!*
!***s/r  SOBSSFC
!*
!*Author  : P. Koclas *CMC/AES  October  1998
!*
!**    Purpose:
!*      Refuse elements which are too far away from the surface.
!*      Replace the pressure of elements which are slightly below
!*      the model surface by the pressure of the trial field.
!*
      INTEGER JPINEL,JPIDLND
      PARAMETER(JPINEL=10,JPIDLND=10)
      INTEGER J,JD,JID,JDATA,IBAD,IFLG
      LOGICAL LLREJ, LLPRINT, LLOK
      REAL(8) :: ZVAL,ZLEV,ZLEV2,ZDIFF,ZHHH,ZMODEL
      INTEGER ITYP,IDBURP
      INTEGER ILEM,ICRIT
      INTEGER ILISTEL(JPINEL),IDLND(JPIDLND)
      INTEGER IKOUNTREA(JPINEL),IKOUNTREJ(JPINEL),IKOUNTT
      REAL(8) :: RLISTCRIT(JPINEL)

      character(len=2), dimension(3) :: list_family
      integer :: index_family

      DATA    RLISTCRIT/50.,50.,50.,50.,50.,800.,800.,800.,800.,1000. /
!C                     SYNOP(3)     TEMP/PILOT(6)             GPS MET(1)
      DATA    IDLND / 12, 14, 146, 32, 35, 135, 136, 137, 138, 189 /
!C
!C
!C     RESET DZMAX FOR GB GPS ZTD TO VALUE IN NAMELIST FILE
!C
      RLISTCRIT(10) = DZMAX

      ILISTEL(1)=BUFR_NEDS
      ILISTEL(2)=BUFR_NEFS
      ILISTEL(3)=BUFR_NEUS
      ILISTEL(4)=BUFR_NEVS
      ILISTEL(5)=BUFR_NESS
      ILISTEL(6)=BUFR_NETS
      ILISTEL(7)=BUFR_NEPS
      ILISTEL(8)=BUFR_NEPN
      ILISTEL(9)=BUFR_NEGZ
      ILISTEL(10)=BUFR_NEZD

      WRITE(*,* ) ' '
      WRITE(*,* ) ' SUBROUTINE SOBSSFC '
      WRITE(*,* ) ' '
      WRITE(*,* ) '*****************************************************'
      WRITE(*,222)'ELEMENTS                  ',(  ILISTEL(J),J=1,jpinel)
      WRITE(*,223)'REJECTION BOUNDARY(METRE) ',(RLISTCRIT(J),J=1,jpinel)
      WRITE(*,* ) '*****************************************************'
      WRITE(*,* ) ' '
      LLPRINT = .FALSE.
!C
!C     SET COUNTERS TO ZERO
!C
      DO J=1,JPINEL
         IKOUNTREJ(J)=0
         IKOUNTREA(J)=0
      ENDDO
      IKOUNTT=0

      !
      ! Loop over the families of interest
      !
      list_family(1) = 'SF'
      list_family(2) = 'UA'
      list_family(3) = 'GP'
      FAMILY: do index_family = 1,3
         WRITE(*,'(2x,A9,2x,A2)')'FAMILY = ', list_family(index_family)
         !
         ! loop over all header indices of each family
         !
                                        ! Set the header list
                                        ! (& start at the beginning of the list)
         call obs_set_current_header_list(lobsSpaceData, &
                                          list_family(index_family))
         HEADER: do
            index_header = obs_getHeaderIndex(lobsSpaceData)
            if (index_header < 0) exit HEADER

            ! loop over all body indices (still in the same family)
                                        ! Set the body list
                                        ! (& start at the beginning of the list)
            call obs_set_current_body_list(lobsSpaceData, index_header)
            BODY: do 
               index_body = obs_getBodyIndex(lobsSpaceData)
               if (index_body < 0) exit BODY

               LLOK = obs_elem_i(lobsSpaceData,'VCO ',INDEX_BODY) .EQ. 1
               IF (.not. LLOK) THEN
                  cycle BODY ! Proceed to the next index_body
               end if

               IKOUNTT=IKOUNTT+1
               IFLG     = obs_elem_i(lobsSpaceData,'FLG ',INDEX_BODY)
               ITYP=obs_elem_i(lobsSpaceData,'VNM ',INDEX_BODY)
               IDBURP = obs_elem_i(lobsSpaceData,'ITY ',INDEX_HEADER)
               ZDIFF=99999.

               IF ( (ITYP .eq. BUFR_NEGZ)  ) THEN
                  LLREJ = .FALSE.
                  DO JD=1,NFLAGS
                     IBAD= 13-NLISTFLG(JD)
                     LLREJ=( BTEST(IFLG,IBAD) ) .OR. LLREJ
                  ENDDO
                  IF ( .NOT. LLREJ ) THEN
                     ZVAL=obs_elem_r(lobsSpaceData,'VAR ',INDEX_BODY)
                     ZDIFF= ABS( ( ZVAL-col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'), &
                                                     INDEX_HEADER,'MM') &
                                 )/RG )
                     ZLEV=obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY)
                  ENDIF

               ELSE
                  ZHHH=obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY)
                  ITYP=obs_elem_i(lobsSpaceData,'VNM ',INDEX_BODY)
                  ZDIFF= ABS( ZHHH- col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM') &
                                    /RG )
                  ZLEV=obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY)
               ENDIF

               ZVAL=obs_elem_r(lobsSpaceData,'VAR ',INDEX_BODY)
               ITYP=obs_elem_i(lobsSpaceData,'VNM ',INDEX_BODY)
               ZLEV2=obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY)
!C
!C                APPLY FILTER TO SELECTED ELEMENTS
!C
               FILTER: DO J=1,JPINEL
                  ICRIT=RLISTCRIT(J)
                  ILEM=ILISTEL(J)
                  IF (ZLEV .EQ. ZLEV2 .AND. ITYP .EQ. ILEM ) THEN
                    ZDIF: IF ( ZDIFF .LE. ICRIT) THEN
                      IF (obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY) .EQ. 1)THEN
                        IKOUNTREA(J)=IKOUNTREA(J)+1
                        IF(LLPRINT) THEN
                          ZMODEL =col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
                          write(*,*)'Keep OBS:stnid,index_header,ityp,',&
                               'icrit,zlev,zhhh,zmodel,zdiff ', &
                               obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER)&
                               ,INDEX_HEADER,ITYP,ICRIT,zlev,zhhh,zmodel,zdiff
                        ENDIF
                      ENDIF
                    ELSE
                      ASSIMILATED: IF ( obs_elem_i(lobsSpaceData,'ASS ', &
                                                   INDEX_BODY) &
                                        .EQ. 1) THEN
                        call obs_set_i(lobsSpaceData,'FLG ',INDEX_BODY,  &
                                       ibset(obs_elem_i(lobsSpaceData, &
                                                        'FLG ',INDEX_BODY), &
                                             18 ) &
                                      )
                        IF(LLPRINT) THEN
                          WRITE(*,225) 'Reject OBS ',INDEX_HEADER,ITYP, &
                              obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),&
                              IDBURP,  &
                              obs_elem_r(lobsSpaceData,'LAT ',INDEX_HEADER),&
                              obs_elem_r(lobsSpaceData,'LON ',INDEX_HEADER)
                        ENDIF
                        call obs_set_i(lobsSpaceData,'ASS ',INDEX_BODY,0)
                        IKOUNTREJ(J)=IKOUNTREJ(J)+1
                      ENDIF ASSIMILATED
                    ENDIF ZDIF
                  ENDIF
               ENDDO FILTER
            ENDDO BODY
         ENDDO HEADER

         WRITE(*,* ) ' '
         WRITE(*,* ) '*****************************************************'
         WRITE(*,222 )'ELEMENTS            ', (  ILISTEL(J),J=1,JPINEL)
         WRITE(*,222)'ACCEPTED  ',(IKOUNTREA(J),J=1,JPINEL)
         WRITE(*,222)'REJECTED  ',(IKOUNTREJ(J),J=1,JPINEL)
         WRITE(*,* ) '*****************************************************'
         WRITE(*,* ) ' '
  222    FORMAT(2x,a29,10(2x,i5))
  223    FORMAT(2x,a29,10(2x,f5.0))
  224    FORMAT(2x,a17,2x,I6,2X,I5,1x,a9,1x,2(2x,f9.2))
  225    FORMAT(2x,a13,2x,I6,2X,I5,1x,a9,1x,I6,1x,4(2x,f9.2))

      ENDDO FAMILY

      IKOUNTT=0
      DO JDATA=1,obs_numbody(lobsSpaceData)
         IF ( obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1) IKOUNTT=IKOUNTT+1
      ENDDO
      WRITE(*,'(1X," NUMBER OF DATA ASSIMILATED BY 3D-VAR AFTER ADJUSTMENTS: ",i10)') IKOUNTT
      WRITE(*,* ) ' '

      RETURN
      END subroutine sobssfc


      SUBROUTINE SOBSRAOB
!*
!***s/r  SOBSRAOB
!*
!*Author  : P. Koclas *CMC/AES  October  1998
!*
!**    Purpose:
!*      Refuse elements which are too far away from the surface of the model
!*      Refuse elements which are considered in the free atmosphere of
!*      the RAOB but fall in the surface boundary layer of the model atmosphere.
!*
      INTEGER JPINEL,JPRANGE
      PARAMETER(JPINEL=7,JPRANGE=10)
      INTEGER IJ,J,JD,JDATA,IBAD,IFLG
      LOGICAL LLREJ,LLNOIR,LLSFC(JPINEL),LLALTOK(JPINEL),LLFOUND
      REAL*8 ZVAL,ZLEV,ZCRIT,ZDIFF,ZDIFALT,ZPCRIT,ZPMAX(JPINEL)
      REAL*8 ZLAT,ZLON,ZGZG,ZSTNALT,ZPB,ZPT,ZDELP
      INTEGER ITYP,IASS,ICOUNT
      INTEGER ICOUNTAL,ICOUNTAH,ICOUNTBL,ICOUNTBH
      INTEGER ILEM,IELGZ
      INTEGER ILISTEL(JPINEL),INDXEL(JPINEL),IFLGEL(JPINEL)
      INTEGER ITOTACC(JPINEL),ITOTREJ(JPINEL),IKOUNTT
      INTEGER ISFCACC(JPINEL),ISFCREJ(JPINEL),ISBLREJ(JPINEL)
      INTEGER IGZACC(JPINEL),IGZREJ(JPINEL),IBNDREJ(JPINEL)
      INTEGER INEARACC(JPINEL),IRANGE(JPRANGE)
      REAL*8    ZLMINF(JPRANGE),ZLMSUP(JPRANGE),ZDIFGZ
      REAL*8    RLISTCRIT(JPINEL),RSBLCRIT(JPINEL),JPMAX(JPINEL)
      LOGICAL LLPRINT,LLOK

      DATA    RLISTCRIT/50.,50.,50.,50.,50.,50.,800./
      DATA    RSBLCRIT /5000.0,5000.0,5000.0,5000.0,5000.0,5000.0,5000.0 /
      DATA    ZLMINF /-9999.,-300.,-200.,-100.,-50.,0.,50.,100.,200.,300./
      DATA    ZLMSUP /-300.,-200.,-100.,-50.,0.,50.,100.,200.,300.,9999./
      ILISTEL(1)=BUFR_NEDD
      ILISTEL(2)=BUFR_NEFF
      ILISTEL(3)=BUFR_NEUU
      ILISTEL(4)=BUFR_NEVV
      ILISTEL(5)=BUFR_NEES
      ILISTEL(6)=BUFR_NETT
      ILISTEL(7)=BUFR_NEGZ

      LLPRINT = .FALSE.

      WRITE(*,* ) ' '
      WRITE(*,* ) ' SUBROUTINE SOBSRAOB '
      WRITE(*,* ) ' '
      WRITE(*,* ) '************************************************'
      WRITE(*,222)'%UA ELEMENTS                  ',(  ILISTEL(J),J=1,jpinel)
      WRITE(*,223)'%UA REJECTION BOUNDARY(METRE) ',(RLISTCRIT(J),J=1,jpinel)
      WRITE(*,223)'%UA REJECTION SBL (PASCAL) ',(RSBLCRIT(J),J=1,jpinel)
      WRITE(*,* ) '************************************************'
      WRITE(*,* ) ' '
      IELGZ =  ILISTEL(JPINEL)
!C
!C     SET COUNTERS TO ZERO
!C
      DO J=1,JPRANGE
         IRANGE(J) = 0
      ENDDO
      DO J=1,JPINEL
         ITOTREJ(J)=0
         ITOTACC(J)=0
         ISFCACC(J)=0
         INEARACC(J)=0
         ISFCREJ(J)=0
         ISBLREJ(J)=0
         IGZACC(J)=0
         IGZREJ(J)=0
         IBNDREJ(J)=0
      ENDDO
      IKOUNTT=0
      ICOUNT   =0
      ICOUNTAL =0
      ICOUNTAH =0
      ICOUNTBL =0
      ICOUNTBH =0

      !
      ! loop over all header indices of the 'UA' family
      !
      WRITE(*,'(2x,A10,2x,A2)')'FAMILY =  ', 'UA'
                                        ! Set the header list
                                        ! (& start at the beginning of the list)
      call obs_set_current_header_list(lobsSpaceData, 'UA')
      HEADER: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER

         ZLAT=obs_elem_r(lobsSpaceData,'LAT ',INDEX_HEADER) &
                                                      * MPC_DEGREES_PER_RADIAN_R8
         ZLON=obs_elem_r(lobsSpaceData,'LON ',INDEX_HEADER) &
                                                      * MPC_DEGREES_PER_RADIAN_R8
         ZSTNALT=obs_elem_r(lobsSpaceData,'ALT ',INDEX_HEADER)
         ZDIFALT=  ZSTNALT- col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
         DO J=1,JPINEL
            LLALTOK(J) = .FALSE.
            IF(ABS(ZDIFALT).LE.RLISTCRIT(J)) LLALTOK(J)=.TRUE.
         ENDDO
!C
!C--------HEIGHT GZ
         !
         ! loop over all body indices (still in the 'UA' family)
         !
                                        ! Set the body list
                                        ! (& start at the beginning of the list)
         call obs_set_current_body_list(lobsSpaceData, index_header)
         BODY: do 
            index_body = obs_getBodyIndex(lobsSpaceData)
            if (index_body < 0) exit BODY

            ITYP=obs_elem_i(lobsSpaceData,'VNM ',INDEX_BODY)
            IASS=obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY)

            LLOK = obs_elem_i(lobsSpaceData,'VCO ',INDEX_BODY) .EQ. 2  &
                   .AND. ITYP.EQ.ILISTEL(JPINEL) .AND. IASS.EQ.1
            IF (.not. LLOK )  THEN
               cycle BODY ! Proceed with the next index_body
            end if

            IKOUNTT=IKOUNTT+1
            IFLG= obs_elem_i(lobsSpaceData,'FLG ',INDEX_BODY)
            ITYP=obs_elem_i (lobsSpaceData,'VNM ',INDEX_BODY)
            ZDIFF=99999.
            ZLEV=obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY)
            IASS=obs_elem_i (lobsSpaceData,'ASS ',INDEX_BODY)
            ZVAL=obs_elem_r(lobsSpaceData,'VAR ',INDEX_BODY)
            ZDIFF= ( ZVAL-col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM') )/RG
            ZCRIT= -RLISTCRIT(JPINEL)
            IF ( ZDIFF .LT. 0.0 ) THEN
               ZDIF: IF(ZDIFF .GE. ZCRIT) THEN
                  ITOTACC(JPINEL)=ITOTACC(JPINEL)+1
                  IGZACC(JPINEL)=IGZACC(JPINEL)+1
                  IF(LLPRINT) THEN
                     WRITE(*,*) 'Keep GZ BELOW MODEL SFC '  &
                           ,INDEX_HEADER,ITYP &
                           ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER) &
                           ,ZLAT,ZLON,ZLEV,ZVAL/RG  &
                           ,col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG &
                           ,ZDIFF,ZCRIT
                  ENDIF
               ELSE
                  IF ( obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY) .EQ. 1) THEN
                     call obs_set_i(lobsSpaceData,'FLG ',INDEX_BODY,  &
                           ibset( obs_elem_i(lobsSpaceData,'FLG ',INDEX_BODY), 18 ))
                     IF(LLPRINT) THEN
                        WRITE(*,*)'REJ GZ BELOW MODEL SFC '  &
                         ,INDEX_HEADER,ITYP &
                         ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER)  &
                         ,ZLAT,ZLON,ZLEV,ZVAL/RG &
                         ,col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG &
                         ,ZDIFF,ZCRIT
                     ENDIF
                     call obs_set_i(lobsSpaceData,'ASS ',INDEX_BODY,0)
                     ITOTREJ(JPINEL)=ITOTREJ(JPINEL)+1
                     IGZREJ(JPINEL)=IGZREJ(JPINEL)+1
                  ENDIF
               ENDIF ZDIF
            ENDIF
         ENDDO BODY
!C
!C       REJECT ELEMENTS OF U,V,T-TD,T BELOW THE MODEL SURFACE
!C       AND THOSE NON SURFACE ELEMENTS PRESENT IN THE SURFACE
!C       BOUNDARY LAYER OF THE RAOB OR OF THE MODEL.
!C       AT THIS POINT WE WANT TO KEEP OBSERVATIONS IN THE FREE
!C       ATMOSPHERE
!C
!C
!C--------------Special case if station elevation is above model elevation
!C              we want to define zpt at a level above the station.
!C              To approximate that value, we will transform the difference
!C              between the 2 elevations into a difference in pressure using
!C              the rule of thumb (1Mb =8 metres)
!C--------------Even though TT(element=12001) is not assimmilated
!C              it is treated as if it were for the evaluation step.
!C              Otherwise we use observations of TT that are too far
!C              from the model topography in the verification.

                                        ! Set the body list
                                        ! (& start at the beginning of the list)
         call obs_set_current_body_list(lobsSpaceData, index_header)
         BODY2: do 
            index_body = obs_getBodyIndex(lobsSpaceData)
            if (index_body < 0) exit BODY2

            ITYP=obs_elem_i(lobsSpaceData,'VNM ',INDEX_BODY)
            IJ = -1
            DO J=1,JPINEL-1
               IF(ITYP.EQ.ILISTEL(J))IJ = J
            ENDDO
            LLOK = obs_elem_i(lobsSpaceData,'VCO ',INDEX_BODY) .EQ. 2  &
                  .AND. ITYP .NE.ILISTEL(JPINEL) .AND. IJ .NE. -1
            IF (LLOK )  THEN
               ZLEV=obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY)
               ZPB =col_getElem(lcolumnhr,1,INDEX_HEADER,'P0')
               ZPT =ZPB-RSBLCRIT(IJ)
               ZDELP = 999999.0
               IF (ZDIFALT .GT. 0.0) THEN
                  ZDELP = ZDIFALT * 100. / 8.0
                  ZPT   = ZPB-(ZDELP+RSBLCRIT(IJ))
               ENDIF
               IF(LLALTOK(IJ)) THEN
!C--------------------Model surface and station altitude are very close
!C              Accept observation if zlev is within the domain
!C              of the trial field
                 ZPB = col_getElem(lcolumnhr,1,INDEX_HEADER,'P0')
                 ZPT = col_getPressure(LCOLUMNHR,col_getNumLev(LCOLUMNHR,'MM')-1,INDEX_HEADER,'MM')
                 IF(LLPRINT) THEN
                   WRITE(*,*) 'LLALTOK .EQ. .TRUE. ',INDEX_HEADER,ITYP  &
                       ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT  &
                       ,ZLON,ZLEV,ZPB,ZPT,ZDIFALT
                 ENDIF
               ENDIF
               IF(ZLEV .GT. ZPB ) THEN
                  call obs_set_i(lobsSpaceData,'FLG ',INDEX_BODY,  &
                              ibset(obs_elem_i(lobsSpaceData,'FLG ',INDEX_BODY),&
                                    18 ))
                  ZGZG = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
                  IF(LLPRINT) THEN
                     WRITE(*,*) 'Rej Obs below model sfc '  &
                          ,INDEX_HEADER,ITYP &
                          ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT  &
                          ,ZLON,ZLEV,ZPB
                  ENDIF
                  call obs_set_i(lobsSpaceData,'ASS ',INDEX_BODY,0)
                  ITOTREJ(IJ)=ITOTREJ(IJ)+1
                  IBNDREJ(IJ)=IBNDREJ(IJ)+1
               ELSEIF(ZLEV.LE.ZPB .AND. ZLEV.GT.ZPT ) THEN
                  call obs_set_i(lobsSpaceData,'FLG ',INDEX_BODY,  &
                       ibset( obs_elem_i(lobsSpaceData,'FLG ',INDEX_BODY), 18 ))
                  ZGZG = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
                  IF(LLPRINT) THEN
                     WRITE(*,*) '%UA REJ SBL ITYP,DALT ',ITYP,ZDIFALT
                     WRITE(*,*) 'Reject LEV IN SBL LYR '  &
                          ,INDEX_HEADER,ITYP,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT,ZLON,ZLEV  &
                          ,ZPB,ZPT,RSBLCRIT(IJ),ZDELP,ZDIFALT
                  ENDIF
                  call obs_set_i(lobsSpaceData,'ASS ',INDEX_BODY,0)
                  ITOTREJ(IJ)=ITOTREJ(IJ)+1
                  ISBLREJ(IJ)=ISBLREJ(IJ)+1
               ENDIF
            ENDIF
         ENDDO BODY2
      ENDDO HEADER

      WRITE(*,* ) ' '
      WRITE(*,* ) '%UA***************************************'
      WRITE(*,222 )'%UA ELEMENTS          ', (  ILISTEL(J),J=1,JPINEL)
      WRITE(*,222)'%UA ACC OB NEAR ',(INEARACC(J),J=1,JPINEL)
      WRITE(*,222)'%UA ACC GZ EXT  ',(IGZACC(J),J=1,JPINEL)
      WRITE(*,222)'%UA ACC TOTAL   ',(ITOTACC(J),J=1,JPINEL)
      WRITE(*,* ) '%UA***************************************'
      WRITE(*,222)'%UA REJ GZ EXT  ',(IGZREJ(J),J=1,JPINEL)
      WRITE(*,222)'%UA REJ OUT BND ',(IBNDREJ(J),J=1,JPINEL)
      WRITE(*,222)'%UA REJ SBL     ',(ISBLREJ(J),J=1,JPINEL)
      WRITE(*,222)'%UA REJ TOTAL   ',(ITOTREJ(J),J=1,JPINEL)
      WRITE(*,* ) '%UA***************************************'
      WRITE(*,* ) ' '
 222  FORMAT(2x,a29,5(2x,i5))
 223  FORMAT(2x,a29,5(2x,f6.0))

      IKOUNTT=0
      DO JDATA=1,obs_numbody(lobsSpaceData)
         IF ( obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1) IKOUNTT=IKOUNTT+1
      ENDDO
      WRITE(*,'(1X,"%UA NUMBER OF DATA ASSIMILATED BY 3D-VAR AFTER ADJUSTMENTS:",i10)') IKOUNTT
      WRITE(*,* ) ' '

      RETURN
      END subroutine sobsraob


      SUBROUTINE SOBSAISW
!*
!***s/r  SOBSAISW
!*
!*Author  : R. Sarrazin *CMC/AES  February 2000
!*
!**    Purpose:
!*      Refuse elements which are too close to the surface.
!*
      INTEGER JPINEL
      PARAMETER(JPINEL=4)
      INTEGER J,JDATA
      LOGICAL LLPRINT
      REAL*8 ZVAL,ZDIFF
      INTEGER ITYP
      INTEGER ILEM
      INTEGER IKOUNTREJ(JPINEL),IKOUNTT
      INTEGER ILISTEL(JPINEL)
      DATA    ILISTEL/11003,11004,12001,12192/
      REAL*8    RLISTCRIT
      character(len=2), dimension(2) :: list_family
      integer :: index_family

      DATA    RLISTCRIT/-50./

      WRITE(*,* ) ' '
      WRITE(*,* ) ' SUBROUTINE SOBSAISW '
      WRITE(*,* ) ' '
      WRITE(*,* ) '****************************************************'
      WRITE(*,222)'ELEMENTS                 ', (  ILISTEL(J),J=1,jpinel)
      WRITE(*,223)'REJECTION BOUNDARY(HPA)  ', RLISTCRIT
      WRITE(*,* ) '****************************************************'
      WRITE(*,* ) ' '
      LLPRINT = .FALSE.
!C
!C     SET COUNTERS TO ZERO
!C
      DO J=1,JPINEL
         IKOUNTREJ(J)=0
      ENDDO
      IKOUNTT=0
      !
      ! Loop over the families of interest
      !
      list_family(1) = 'AI'
      list_family(2) = 'SW'
      FAMILY: do index_family = 1,2
         WRITE(*,*)' FAMILY = ',list_family(index_family)
         !
         ! loop over all body indices of each family
         !
         call obs_set_current_body_list(lobsSpaceData, list_family(index_family))
         BODY: do 
            index_body = obs_getBodyIndex(lobsSpaceData)
            if (index_body < 0) exit BODY
!C
!C          REJECT DATA TOO CLOSE TO THE MODEL OROGRAPHY ,PUT TO
!C          MODEL OROGRAPHY, DATA WHICH IS BELOW , BUT CLOSE TO THE SURFACE.
!C
            IKOUNTT=IKOUNTT+1
            ZVAL=obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY)
            INDEX_HEADER = obs_elem_i(lobsSpaceData,'OBS ',INDEX_BODY)
            ZDIFF=  (ZVAL- col_getElem(lcolumnhr,1,INDEX_HEADER,'P0') )/100.
            IF ( ZDIFF .GT. RLISTCRIT ) THEN
               ITYP=obs_elem_i(lobsSpaceData,'VNM ',INDEX_BODY)
               DO J=1,JPINEL
                  ILEM=ILISTEL(J)
                  IF ( ITYP .EQ. ILEM ) THEN
                     IF(LLPRINT) THEN
                        WRITE(*,224) 'Reject OBS ',index_header,ITYP &
                          ,obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY),ZDIFF
                     ENDIF
                     call obs_set_i(lobsSpaceData,'ASS ',INDEX_BODY,0)
                     IKOUNTREJ(J)=IKOUNTREJ(J)+1
                     call obs_set_i(lobsSpaceData,'FLG ',INDEX_BODY,  &
                           ibset(obs_elem_i(lobsSpaceData,'FLG ',INDEX_BODY),&
                                 18 ))
                  ENDIF
               ENDDO
            ENDIF
         ENDDO BODY
      ENDDO FAMILY

      WRITE(*,* ) ' '
      WRITE(*,* ) &
           '*****************************************************************'
      WRITE(*,222 )'ELEMENTS            ', (  ILISTEL(J),J=1,JPINEL)
      WRITE(*,222)'REJECTED  ',(IKOUNTREJ(J),J=1,JPINEL)
      WRITE(*,* ) &
           '*****************************************************************'
      WRITE(*,* ) ' '
  222 FORMAT(2x,a29,5(2x,i5))
  223 FORMAT(2x,a29,5(2x,f5.0))
  224 FORMAT(2x,a13,2x,I6,2X,I5,2(2x,f9.2))

      IKOUNTT=0
      DO JDATA=1,obs_numbody(lobsSpaceData)
         IF ( obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1) IKOUNTT=IKOUNTT+1
      ENDDO
      WRITE(*  &
           ,'(1X," NUMBER OF DATA ASSIMILATED BY 3D-VAR AFTER ADJUSTMENTS:",i10)')IKOUNTT
      WRITE(*,* ) ' '

      RETURN
      END subroutine sobsaisw


      SUBROUTINE SOBSPROF
!*
!***s/r  SOBSPROF
!*
!*Author  : J. St-James October 2002
!*          - Based on the subroutine sobsraob.  Adapt to
!*            Profiler data
!*
!**    Purpose:
!*      Refuse elements which are too far away from the surface of the model
!*      Refuse elements which are considered in the free atmosphere of
!*      the RAOB but fall in the surface boundary layer of the model atmosphere.
!*
      INTEGER JPINEL,JPRANGE
      PARAMETER(JPINEL=7,JPRANGE=10)
      INTEGER IJ,J,JD,JDATA,IBAD,IFLG
      LOGICAL LLREJ,LLNOIR,LLSFC(JPINEL),LLALTOK(JPINEL),LLFOUND
      REAL*8 ZVAL,ZLEV,ZCRIT,ZDIFF,ZDIFALT,ZPCRIT,ZPMAX(JPINEL)
      REAL*8 ZLAT,ZLON,ZGZG,ZSTNALT,ZPB,ZPT,ZDELP
      INTEGER ITYP,IASS,ICOUNT
      INTEGER ICOUNTAL,ICOUNTAH,ICOUNTBL,ICOUNTBH
      INTEGER ILEM,IELGZ
      INTEGER ILISTEL(JPINEL),INDXEL(JPINEL),IFLGEL(JPINEL)
      INTEGER ITOTACC(JPINEL),ITOTREJ(JPINEL),IKOUNTT
      INTEGER ISFCACC(JPINEL),ISFCREJ(JPINEL),ISBLREJ(JPINEL)
      INTEGER IGZACC(JPINEL),IGZREJ(JPINEL),IBNDREJ(JPINEL)
      INTEGER INEARACC(JPINEL),IRANGE(JPRANGE)
      REAL*8    ZLMINF(JPRANGE),ZLMSUP(JPRANGE),ZDIFGZ
      REAL*8    RLISTCRIT(JPINEL),RSBLCRIT(JPINEL),JPMAX(JPINEL)
      LOGICAL LLPRINT,LLOK
      logical :: list_is_empty

      DATA    RLISTCRIT/50.,50.,50.,50.,50.,50.,800./
      DATA    RSBLCRIT /400.0,400.0,400.0,400.0,400.0,400.0,400.0 /
      DATA    ZLMINF /-9999.,-300.,-200.,-100.,-50.,0.,50.,100.,200.,300./
      DATA    ZLMSUP /-300.,-200.,-100.,-50.,0.,50.,100.,200.,300.,9999./
      ILISTEL(1)=BUFR_NEDD
      ILISTEL(2)=BUFR_NEFF
      ILISTEL(3)=BUFR_NEUU
      ILISTEL(4)=BUFR_NEVV
      ILISTEL(5)=BUFR_NEES
      ILISTEL(6)=BUFR_NETT
      ILISTEL(7)=BUFR_NEGZ

      LLPRINT = .FALSE.

      WRITE(*,* ) ' '
      WRITE(*,* ) ' SUBROUTINE SOBSPROF '
      WRITE(*,* ) ' '
      WRITE(*,* ) '************************************************'
      WRITE(*,222)'%PR ELEMENTS                  ',(  ILISTEL(J),J=1,jpinel)
      WRITE(*,223)'%PR REJECTION BOUNDARY(METRE) ',(RLISTCRIT(J),J=1,jpinel)
      WRITE(*,223)'%PR REJECTION SBL (METRE) ',(RSBLCRIT(J),J=1,jpinel)
      WRITE(*,* ) '************************************************'
      WRITE(*,* ) ' '
      IELGZ =  ILISTEL(JPINEL)
!C
!C     SET COUNTERS TO ZERO
!C
      DO J=1,JPRANGE
         IRANGE(J) = 0
      ENDDO
      DO J=1,JPINEL
         ITOTREJ(J)=0
         ITOTACC(J)=0
         ISFCACC(J)=0
         INEARACC(J)=0
         ISFCREJ(J)=0
         ISBLREJ(J)=0
         IGZACC(J)=0
         IGZREJ(J)=0
         IBNDREJ(J)=0
      ENDDO
      IKOUNTT=0
      ICOUNT   =0
      ICOUNTAL =0
      ICOUNTAH =0
      ICOUNTBL =0
      ICOUNTBH =0

      !
      ! loop over all header indices of the 'PR' family
      !
      WRITE(*,'(2x,A10,2x,A2)')'FAMILY =  ','PR'
                                        ! Set the header list
                                        ! (& start at the beginning of the list)
      call obs_set_current_header_list(lobsSpaceData, 'PR')
      HEADER: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER

                                        ! Set the body list
                                        ! (& start at the beginning of the list)
         call obs_set_current_body_list(lobsSpaceData, index_header, &
                                        list_is_empty)
         if (list_is_empty) then
           cycle HEADER                 ! Proceed to the next HEADER
         end if

         ZLAT=obs_elem_r(lobsSpaceData,'LAT ',INDEX_HEADER) &
                                                      * MPC_DEGREES_PER_RADIAN_R8
         ZLON=obs_elem_r(lobsSpaceData,'LON ',INDEX_HEADER) &
                                                      * MPC_DEGREES_PER_RADIAN_R8
         ZSTNALT=obs_elem_r(lobsSpaceData,'ALT ',INDEX_HEADER)
         ZDIFALT=  ZSTNALT- col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
         DO J=1,JPINEL
            LLALTOK(J) = .FALSE.
            IF(ABS(ZDIFALT).LE.RLISTCRIT(J)) LLALTOK(J)=.TRUE.
         ENDDO
!C
!C       REJECT ELEMENTS OF U,V,T-TD,T BELOW THE MODEL SURFACE
!C       AND THOSE NON SURFACE ELEMENTS PRESENT IN THE SURFACE
!C       BOUNDARY LAYER OF THE RAOB OR OF THE MODEL.
!C       AT THIS POINT WE WANT TO KEEP OBSERVATIONS IN THE FREE
!C       ATMOSPHERE
!C
!C
!C--------------Special case if station elevation is above model elevation
!C              we want to define zpt at a level above the station.
!C              To approximate that value, we will transform the difference
!C              between the 2 elevations into a difference in pressure using
!C              the rule of thumb (1Mb =8 metres)
!C--------------Even though TT(element=12001) is not assimmilated
!C              it is treated as if it were for the evaluation step.
!C              Otherwise we use observations of TT that are too far
!C              from the model topography in the verification.

         !
         ! loop over all body indices (still in the 'PR' family)
         !
         BODY: do 
            index_body = obs_getBodyIndex(lobsSpaceData)
            if (index_body < 0) exit BODY

            ITYP=obs_elem_i(lobsSpaceData,'VNM ',INDEX_BODY)
            IJ = -1
            DO J=1,JPINEL-1
               IF(ITYP.EQ.ILISTEL(J))IJ = J
            ENDDO
            LLOK = obs_elem_i(lobsSpaceData,'VCO ',INDEX_BODY) .EQ. 1  &
                .AND. ITYP .NE.ILISTEL(JPINEL) .AND. IJ .NE. -1
            IF (.not. LLOK )  THEN
               cycle BODY ! Proceed to the next index_body
            end if

            ZLEV=obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY)
            ZPB =col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
            ZPT =col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG + RSBLCRIT(IJ)
            IF (ZDIFALT .GT. 0.0) THEN
               ZPT=  col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG &
                   + (ZDIFALT+RSBLCRIT(IJ))
            ENDIF
            IF(LLALTOK(IJ)) THEN
!C--------------------Model surface and station altitude are very close
!C                    Accept observation if zlev is within the domain
!C                    of the trial field
               ZPB = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
               ZPT = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM')-1,INDEX_HEADER,'MM')/RG
               IF(LLPRINT) THEN
                  WRITE(*,*) 'LLALTOK .EQ. .TRUE. ',INDEX_HEADER,ITYP  &
                       ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT &
                       ,ZLON,ZLEV  &
                       ,col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG  &
                       ,col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM')-1,INDEX_HEADER,'MM')/RG &
                       ,ZDIFALT
               ENDIF
            ENDIF
            IF(ZLEV .LT. ZPB ) THEN
               call obs_set_i(lobsSpaceData,'FLG ',INDEX_BODY,  &
                    ibset( obs_elem_i(lobsSpaceData,'FLG ',INDEX_BODY), 18 ))
               ZGZG = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
               IF(LLPRINT) THEN
                  WRITE(*,*) 'Rej Obs below model sfc ',INDEX_HEADER,ITYP  &
                       ,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT  &
                       ,ZLON,ZLEV &
                       ,col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM')-1,INDEX_HEADER,'MM')/RG,ZPT  &
                       ,INDEX_BODY,ZPB,ZDIFALT
               ENDIF
               call obs_set_i(lobsSpaceData,'ASS ',INDEX_BODY,0)
               ITOTREJ(IJ)=ITOTREJ(IJ)+1
               IBNDREJ(IJ)=IBNDREJ(IJ)+1

            ELSEIF(ZLEV.GE.ZPB .AND. ZLEV.LT.ZPT ) THEN
               call obs_set_i(lobsSpaceData,'FLG ',INDEX_BODY,  &
                    ibset( obs_elem_i(lobsSpaceData,'FLG ',INDEX_BODY), 18 ))
               ZGZG = col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,'MM'),INDEX_HEADER,'MM')/RG
               IF(LLPRINT) THEN
                  WRITE(*,*) '%PR REJ SBL ITYP,DALT ',ITYP,ZDIFALT
                  WRITE(*,*) 'Reject LEV IN SBL LYR '   &
                       ,INDEX_HEADER,ITYP,obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),ZLAT,ZLON,ZLEV  &
                       ,ZPB,ZPT,RSBLCRIT(IJ),ZDELP,ZDIFALT
               ENDIF
               call obs_set_i(lobsSpaceData,'ASS ',INDEX_BODY,0)
               ITOTREJ(IJ)=ITOTREJ(IJ)+1
               ISBLREJ(IJ)=ISBLREJ(IJ)+1
            ENDIF
         ENDDO BODY
      ENDDO HEADER

      WRITE(*,* ) ' '
      WRITE(*,* ) '%PR***************************************'
      WRITE(*,222 )'%PR ELEMENTS          ', (  ILISTEL(J),J=1,JPINEL)
      WRITE(*,222)'%PR ACC OB NEAR ',(INEARACC(J),J=1,JPINEL)
      WRITE(*,222)'%PR ACC TOTAL   ',(ITOTACC(J),J=1,JPINEL)
      WRITE(*,* ) '%PR***************************************'
      WRITE(*,222)'%PR REJ OUT BND ',(IBNDREJ(J),J=1,JPINEL)
      WRITE(*,222)'%PR REJ SBL     ',(ISBLREJ(J),J=1,JPINEL)
      WRITE(*,222)'%PR REJ TOTAL   ',(ITOTREJ(J),J=1,JPINEL)
      WRITE(*,* ) '%PR***************************************'
      WRITE(*,* ) ' '
 222  FORMAT(2x,a29,5(2x,i5))
 223  FORMAT(2x,a29,5(2x,f6.0))
 224  FORMAT(2x,a31,2x,I6,2X,I5,2(2x,f9.2))

      IKOUNTT=0
      DO JDATA=1,obs_numbody(lobsSpaceData)
         IF ( obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1) IKOUNTT=IKOUNTT+1
      ENDDO
      WRITE(*,'(1X,"%PR NUMBER OF DATA ASSIMILATED BY 3D-VAR AFTER ADJUSTMENTS:",i10)') IKOUNTT
      WRITE(*,* ) ' '

      RETURN
      END subroutine sobsprof


      SUBROUTINE SOBSCSBT
!*
!***s/r  SOBSCSBT
!*
!*Author  : R. Sarrazin *CMC/AES  June 2008
!*
!**    Purpose:
!*      Refuse data which are too close to the surface.
!*
      INTEGER JPINEL
      PARAMETER(JPINEL=1)
      INTEGER J,JDATA
      LOGICAL LLPRINT
      REAL*8 ZVAL,ZDIFF
      INTEGER ITYP,IDATYP
      INTEGER ILEM
      INTEGER IKOUNTREJ(JPINEL),IKOUNTT
      INTEGER ILISTEL(JPINEL)
      DATA    ILISTEL/12163/
      REAL*8  RLISTCRIT

      DATA    RLISTCRIT/800./

      WRITE(*,* ) ' '
      WRITE(*,* ) ' SUBROUTINE SOBSCSBT '
      WRITE(*,* ) ' '
      WRITE(*,* ) '****************************************************'
      WRITE(*,222)'ELEMENTS                 ', (  ILISTEL(J),J=1,jpinel)
      WRITE(*,223)'REJECTION BOUNDARY(HPA)  ', RLISTCRIT
      WRITE(*,* ) '****************************************************'
      WRITE(*,* ) ' '
      LLPRINT = .FALSE.
!C
!C     SET COUNTERS TO ZERO
!C
      DO J=1,JPINEL
         IKOUNTREJ(J)=0
      ENDDO
      IKOUNTT=0

      !
      ! loop over all header indices of the 'TO' family
      !
      WRITE(*,*)' FAMILY = ','TO'
                                        ! Set the header list
                                        ! (& start at the beginning of the list)
      call obs_set_current_header_list(lobsSpaceData, 'TO')
      HEADER: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER

         IDATYP   = obs_elem_i(lobsSpaceData,'ITY ',INDEX_HEADER)
         IF (IDATYP .NE. 185) THEN
            cycle HEADER ! Proceed to the next index_header
         end if

!C
!C        REJECT DATA TOO CLOSE TO THE OROGRAPHY
!C
         !
         ! loop over all body indices (still in the 'TO' family)
         !
                                        ! Set the body list
                                        ! (& start at the beginning of the list)
         call obs_set_current_body_list(lobsSpaceData, index_header)
         BODY: do 
            index_body = obs_getBodyIndex(lobsSpaceData)
            if (index_body < 0) exit BODY

            IKOUNTT=IKOUNTT+1
            ZDIFF= col_getElem(lcolumnhr,1,INDEX_HEADER,'P0') /100.
            IF ( ZDIFF .LT. RLISTCRIT ) THEN
              ITYP=obs_elem_i(lobsSpaceData,'VNM ',index_body)
               DO J=1,JPINEL
                 ILEM=ILISTEL(J)
                 IF ( ITYP .EQ. ILEM ) THEN
                    IF(LLPRINT) THEN
                       WRITE(*,224) 'Reject OBS ',INDEX_HEADER,ITYP, &
                                  obs_elem_r(lobsSpaceData,'PPP ',index_body), &
                                  ZDIFF
                    ENDIF
                    call obs_set_i(lobsSpaceData,'ASS ',index_body,0)
                    IKOUNTREJ(J)=IKOUNTREJ(J)+1
                    call obs_set_i(lobsSpaceData,'FLG ',index_body, &
                           IBSET(obs_elem_i(lobsSpaceData,'FLG ',index_body),18))
                 ENDIF
               ENDDO
            ENDIF
         ENDDO BODY
      ENDDO HEADER

      WRITE(*,* ) ' '
      WRITE(*,* )  &
           '*****************************************************************'
      WRITE(*,222 )'ELEMENTS            ', (  ILISTEL(J),J=1,JPINEL)
      WRITE(*,222)'REJECTED  ',(IKOUNTREJ(J),J=1,JPINEL)
      WRITE(*,* )  &
           '*****************************************************************'
      WRITE(*,* ) ' '
  222 FORMAT(2x,a29,5(2x,i5))
  223 FORMAT(2x,a29,5(2x,f5.0))
  224 FORMAT(2x,a13,2x,I6,2X,I5,2(2x,f9.2))

      IKOUNTT=0
      DO JDATA=1,obs_numbody(lobsSpaceData)
        IF ( obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1) IKOUNTT=IKOUNTT+1
      ENDDO
      WRITE(*  &
           ,'(1X," NUMBER OF DATA ASSIMILATED BY 3D-VAR AFTER ADJUSTMENTS:",i10)')IKOUNTT
      WRITE(*,* ) ' '

      RETURN
      END subroutine sobscsbt

end subroutine sobs_all
