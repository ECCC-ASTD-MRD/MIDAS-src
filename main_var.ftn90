!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
program main_var
  ! pgm main_var - Program controlling the job at its highest level (formerly cnt0.ftn90)

  use topLevelControl_mod
  use mpivar_mod
  use obsSpaceData_mod
  use columnData_mod  
  use obsSpaceDiag_mod
  use controlVector_mod
  use obsFilter_mod  
  use minimization_mod
  use burpFiles_mod
  use utilities_mod
  use innovation_mod

  implicit none
  integer :: istamp,exdb,exfin
  character(len=9) :: clmsg
  integer :: ierr
  type(struct_obs),target :: obsSpaceData
  type(struct_columnData),target :: columng,columnhr
  type(struct_vco),pointer :: vco_anl => NULL()
  type(struct_vco),pointer :: vco_trl => NULL()

  character(len=48) :: obsMpiStrategy

  istamp = exdb('VAR','DEBUT','NON')

  write(*,'(/,' //                                            &
            '3(" *****************"),/,' //                   &
            '14x,"-- START OF MAIN PROGRAM MAIN_VAR: --",/,' //   &
            '14x,"-- VARIATIONAL ASSIMILATION          --",/, ' //  &
            '14x,"-- VAR Revision number   ",a," --",/,' //  &
            '3(" *****************"))') top_crevision

  ! MPI initilization
  call mpi_initialize  

  call tmg_init(mpi_myid, 'TMG_VAR' )

  call tmg_start(1,'MAIN')

  if(mpi_myid == 0) then
    clmsg = 'VAR3D_BEG'
    call utl_writeStatus(clmsg)
  endif 

  ! 1. Top Level Control setup (read NCONF from namelist)
  call top_setup

  ! 2. Decide on configuration of job

  ! ---BGCHECK (conventional obs)--- !
  if(top_BgckConvMode()) then
    if(mpi_myid == 0) write(*,*) 'MAIN_VAR: CONVENTIONNAL BGCHECK MODE'

    ! Do initial set up
    call tmg_start(2,'PREMIN')

    obsMpiStrategy = 'LIKESPLITFILES'

    call var_setup(columng,columnhr,obsSpaceData,  &
                 "ALL",                & ! obsColumnMode   
                 trim(obsMpiStrategy))

    ! Reading, horizontal interpolation and unit conversions of the 3D trial fields
    call inn_setupBackgroundColumns(columng,columnhr,obsSpaceData)

    ! Compute observation innovations and prepare obsSpaceData for minimization
    call inn_computeInnovation(columng,columnhr,obsSpaceData)
    call tmg_stop(2)

    ! Do the background check and output the observation data files
    call bgcheck_conv(columng,columnhr,obsSpaceData)

 ! ---BGCHECK (AIRS, IASI, CrIS)--- !
  elseif(top_BgckIrMode()) then
     if(mpi_myid == 0) write(*,*) 'MAIN_VAR: HYPERSPECTRAL IR BGCHECK MODE'

    ! Do initial set up
    call tmg_start(2,'PREMIN')

    obsMpiStrategy = 'LIKESPLITFILES'

    call var_setup(columng,columnhr,obsSpaceData,  &
                 "ALL",        &       ! obsColumnMode   
                 trim(obsMpiStrategy)) ! obsMpiStrategy

    ! Reading, horizontal interpolation and unit conversions of the 3D trial fields
    call inn_setupBackgroundColumns(columng,columnhr,obsSpaceData)

    ! Compute observation innovations and prepare obsSpaceData for minimization
    call inn_computeInnovation(columng,columnhr,obsSpaceData)
    call tmg_stop(2)

    ! Do the background check and output the observation data files
    call bgcheck_ir(columng,columnhr,obsSpaceData)


  ! ---COMPUTE O-P (for AMSU, GEORAD et SSMIS)--- !
  elseif(top_OmpMode()) then
    write(*,*) 'MAIN_VAR: RESIDUAL MODE (i.e. O-P)'

    ! Do initial set up
    call tmg_start(2,'PREMIN')

    obsMpiStrategy = 'LIKESPLITFILES'

    call var_setup(columng,columnhr,obsSpaceData,  &
                 "VAR",        &         ! obsColumnMode
                 trim(obsMpiStrategy))   ! obsMpiStrategy

    ! Reading, horizontal interpolation and unit conversions of the 3D trial fields
    call inn_setupBackgroundColumns(columng,columnhr,obsSpaceData)

    ! Compute observation innovations and prepare obsSpaceData for minimization
    call inn_computeInnovation(columng,columnhr,obsSpaceData)
    call tmg_stop(2)

    ! Compute OER and update the observation data files
    call residuals(columng,columnhr,obsSpaceData)

  ! ---ANALYSIS MODE--- !
  elseif(top_AnalysisMode()) then
    write(*,*) 'MAIN_VAR: ANALYSIS MODE'

    ! Do initial set up
    call tmg_start(2,'PREMIN')

    obsMpiStrategy = 'LATLONTILESBALANCED'

    call var_setup(columng,columnhr,obsSpaceData,  &
                 "VAR",          &      ! obsColumnMode
                 trim(obsMpiStrategy))  ! obsMpiStrategy
    call tmg_stop(2)

    ! Reading, horizontal interpolation and unit conversions of the 3D trial fields
    call tmg_start(2,'PREMIN')
    call inn_setupBackgroundColumns(columng,columnhr,obsSpaceData)

    ! Compute observation innovations and prepare obsSpaceData for minimization
    call inn_computeInnovation(columng,columnhr,obsSpaceData)
    call tmg_stop(2)

    ! Do minimization of cost function
    call min_minimize(columng,obsSpaceData)

    ! Compute obs-space diagnostics (only does computation if NAMOSD present in flnml)
    call osd_calcInflation(obsSpaceData,columng)

    if (mpi_myid == 0) then
       clmsg = 'REBM_DONE'
       call utl_writeStatus(clmsg)
    end if

    ! Now write out the observation data files
    if(min_niter.gt.0) call burp_updateFiles(obsSpaceData)

    ! Deallocate copied obsSpaceData
    call obs_finalize(obsSpaceData)

  else

    write(*,*) ' MAIN_VAR: ERROR, UNKNOWN NCONF SPECIFIED'

  endif

  ! 3. Job termination

  istamp = exfin('VAR','FIN','NON')

  if(mpi_myid == 0) then
    clmsg = 'VAR3D_END'
    call utl_writeStatus(clmsg)
  endif

  call tmg_stop(1)

  call tmg_terminate(mpi_myid, 'TMG_VAR' )

  call rpn_comm_finalize(ierr) 

contains

  subroutine var_setup(lcolumng,lcolumnhr,lobsSpaceData, &
       obsColumnMode, obsMpiStrategy)
    !
    !**s/r var_setup  - Control of the preprocessing of the variational assimilation
    !
    use topLevelControl_mod
    use mpivar_mod
    use MathPhysConstants_mod
    use horizontalCoord_mod
    use timeCoord_mod
    use WindRotation_mod
    use obsSpaceData_mod
    use controlVector_mod
    use gridStateVector_mod
    use minimization_mod
    use columndata_mod
    use LamAnalysisGrid_mod
    use bmatrix_mod
    use tovs_nl_mod
    use burpFiles_mod
    use obserrors_mod
    use variableTransforms_mod
    use verticalCoord_mod
    IMPLICIT NONE

    type(struct_obs) :: lobsSpaceData
    type(struct_columnData) :: lcolumng,lcolumnhr
    character (len=*) :: obsColumnMode
    character (len=*) :: obsMpiStrategy
    integer :: datestamp

    type(struct_vco), pointer :: vco_anl => null()
    type(struct_vco), pointer :: vco_trl => null()
    type(struct_hco), pointer  :: hco_anl

    integer :: get_max_rss

    character(len=12) :: etiket

    write(*,*) ''
    write(*,*) '-----------------------------------'
    write(*,*) '-- Starting subroutine var_setup --'
    write(*,*) '-----------------------------------'

    !     
    !- Initialize burp file names and set datestamp
    !
    call burp_setupFiles(datestamp)
    call tim_setDatestamp(datestamp)

    !
    !- Initialize constants
    !
    if(mpi_myid.eq.0) call mpc_printConstants(6)

    !
    !- Set vertical coordinate parameters from !! record in trial file
    !
    if(mpi_myid.eq.0) write(*,*)''
    if(mpi_myid.eq.0) write(*,*)' preproc: Set vcoord parameters for trial grid'
    if ( top_spatialDimensions() /= '2D') then
       call vco_SetupFromFile( vco_trl,         & ! OUT
            './trlm_01',' ')   ! IN
    else  
       call vco_SetupManual( vco_trl,                  & ! OUT
            top_AnalysisLevel2d(), 1 )  ! IN 
    end if
    call col_setVco(lcolumnhr,vco_trl)

    !
    !- Initialize variables of the model states
    !
    call gsv_setup
    write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

    !
    !- Initialize the Temporal grid
    !
    call tim_setup

    !
    !- Initialize the Analysis grid
    !
    if(mpi_myid.eq.0) write(*,*)''
    if(mpi_myid.eq.0) write(*,*)' preproc: Set hco parameters for analysis grid'
    call hco_SetupFromFile( './analysisgrid', 'ANALYSIS', 'Analysis' ) ! IN
    hco_anl => hco_Get('Analysis')

    if ( .not. hco_anl % global ) then
       !- Iniatilized the core (Non-Exteded) analysis grid
       call hco_SetupFromFile( './analysisgrid', 'COREGRID', 'AnalysisCore' ) ! IN
       !- Setup the LAM analysis grid metrics
       call lag_SetupFromHCO( 'Analysis', 'AnalysisCore' ) ! IN
    end if

    if ( hco_anl % rotated ) then
       call uvr_Setup(hco_anl) ! IN 
    end if

    !     
    !- Initialisation of the analysis grid vertical coordinate from !! in Bnmc file
    !
    if ( top_spatialDimensions() /= '2D') then
       if ( hco_anl % global ) then
          etiket = 'BGCK_STDDEV'
       else
          etiket = 'STDDEV'
       end if
       call vco_SetupFromFile( vco_anl,         & ! OUT
            './bgcov', etiket) ! IN
    else
       call vco_SetupManual( vco_anl,                  & ! OUT
            top_AnalysisLevel2d(), 1 )  ! IN
    end if

    call col_setVco(lcolumng,vco_anl)
    write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

    !
    !- Setup and read observations
    !
    call inn_setupObs(lobsSpaceData,obsColumnMode,obsMpiStrategy)
    write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

    !
    !- Basic setup of columnData module
    !
    call col_setup
    write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

    !
    !- Memory allocation for background column data
    !
    call col_allocate(lcolumng, obs_numheader(lobsSpaceData),mpi_local=.true.)
    call col_allocate(lcolumnhr,obs_numheader(lobsSpaceData),mpi_local=.true.)

    !
    !- Initialize the observation error covariances
    !
    call oer_setObsErrors(lobsSpaceData)
    write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

    !
    !- Initialize the background-error covariance, also sets up control vector module (cvm)
    !
    if ( top_AnalysisMode() ) then
       call bmat_setup(hco_anl,vco_anl)
       write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
    end if

    !
    ! - Initialize the gridded variable transform module
    !
    call vtr_setup(hco_anl,vco_anl)

    !
    !- Set up the minimization module, now that the required parameters are known
    !  NOTE: some global variables remain in minimization_mod that must be initialized before inn_setupBackgroundColumns
    !
    if (top_AnalysisMode() ) then
       call min_setup( cvm_nvadim ) ! IN
       write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
    end if

  end subroutine var_setup

end program main_var
