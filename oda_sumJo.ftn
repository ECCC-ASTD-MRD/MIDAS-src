!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------

      SUBROUTINE oda_sumJo(lobsSpaceData,pjo)

! Purpose:
!   Compute the sum of Jo contributions saved in ROBDATA(NCM_OMI,*)
!   Also, compute contribution of each family of observation (for
!   diagnostic purposes)
!
! Author  : S. Pellerin *ARMA/MRB January 2009

      use masks_mod
      use mpi
      use obsSpaceData_mod
      implicit none
      real*8 pjo ! Total observation cost function

      type(struct_obs) :: lobsSpaceData
      integer index_body,numbody_max
      logical, pointer,dimension(:) :: llmask

      real*8 :: dljoraob,dljoairep,dljosatwind,dljosurfc,dljotov
      real*8 :: dljoprof,dljogpsro,dljogpsztd
      real*8,allocatable :: robdata_g(:)
      character(len=2),pointer,save :: family_g(:)
      integer :: ierr

      call tmg_start(91,'SUMJO')

      numbody_max=obs_numbody_max(lobsSpaceData)
      allocate(robdata_g(numbody_max))

      call tmg_start(92,'SUMJO_RESTORE')
      CALL restore_robdata_family(robdata_g,family_g,numbody_max)  
      call tmg_stop(92)

      dljogpsztd = 0.d0
      dljoraob = 0.d0
      dljoairep = 0.d0
      dljosatwind = 0.d0
      dljosurfc = 0.d0
      dljotov = 0.d0
      dljogpsro = 0.d0
      dljoprof = 0.d0

      do index_body=1,numbody_max
        ! total observation cost function
        if(lmask_g(index_body)) pjo = pjo + robdata_g(index_body)

        ! subcomponents of observation cost function (diagnostic only)
        select case(family_g(index_body))
        case('UA')
          if(lmaskpp_inout_g(index_body)) dljoraob = dljoraob + robdata_g(index_body)
          if(lmasksf_inout_g(index_body)) dljosurfc = dljosurfc + robdata_g(index_body)
        case('AI')
          if(lmaskpp_inout_g(index_body)) dljoairep = dljoairep + robdata_g(index_body)
        case('SW')
          if(lmaskpp_inout_g(index_body)) dljosatwind = dljosatwind + robdata_g(index_body)
        case('SF')
          if(lmasksf_inout_g(index_body)) dljosurfc = dljosurfc + robdata_g(index_body)
        case('SC')
          if(lmasksf_inout_g(index_body)) dljosurfc = dljosurfc + robdata_g(index_body)
        case('TO')
          if(lmaskto_g(index_body)) dljotov = dljotov + robdata_g(index_body)
        case('RO')
          if(lmaskro_g(index_body)) dljogpsro = dljogpsro + robdata_g(index_body)
        case('PR')
          if(lmaskzp_g(index_body)) dljoprof = dljoprof + robdata_g(index_body)
        case('GP')
          if(lmaskgp_g(index_body)) dljogpsztd = dljogpsztd + robdata_g(index_body)
          if(lmasksf_inout_g(index_body)) dljosurfc = dljosurfc + robdata_g(index_body)
        end select
      enddo

      if(mpi_myid == 0) then
        write(*,'(a15,f23.16)') 'Jo(RAOB)   = ',dljoraob
        write(*,'(a15,f23.16)') 'Jo(AIREP)  = ',dljoairep
        write(*,'(a15,f23.16)') 'Jo(SURFC)  = ',dljosurfc
        write(*,'(a15,f23.16)') 'Jo(ATOV)   = ',dljotov
        write(*,'(a15,f23.16)') 'Jo(SATWIND)= ',dljosatwind
        write(*,'(a15,f23.16)') 'Jo(PROF)   = ',dljoprof
        write(*,'(a15,f23.16)') 'Jo(GPSRO)  = ',dljogpsro
        write(*,'(a15,f23.16)') 'Jo(GPSZTD) = ',dljogpsztd
      endif 

      deallocate(robdata_g) 

      call tmg_stop(91)

      contains

        subroutine restore_robdata_family(robdata_g,family_g,numBody_mpiglobal)
         integer :: numBody_mpiglobal 
         real*8  :: robdata_g(:)

         integer :: bodyIndex_mpilocal,bodyIndex_mpiglobal,ierr,index_string  
         character(len=*),pointer :: family_g(:)
         integer, allocatable :: int_family_g(:,:)
         character(len=2) :: family_string
         logical, save :: first_time=.true.

         ! restore the mpi-global cost function contributions
         robdata_g(:)=0.0D0  
         do bodyIndex_mpilocal=1,obs_numbody(lobsSpaceData)
           bodyIndex_mpiglobal=obs_elem_i(lobsSpaceData,'GBI ',bodyIndex_mpilocal)
           robdata_g(bodyIndex_mpiglobal)=obs_elem_r(lobsSpaceData,'OMI ',bodyIndex_mpilocal)
         enddo  
         call rpn_comm_allreduce(robdata_g,robdata_g,numBody_mpiglobal,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr) 

         ! due to cost, only restore the mpi-global family code once and save result
         ! NOTE: assumed not to change after first call
         if(first_time) then

           allocate(family_g(numBody_mpiglobal))
           allocate(int_family_g(numBody_mpiglobal,2))
           int_family_g(:,:)=0.0d0  

           ! convert character to integer with iachar so that "allreduce" can be used
           do bodyIndex_mpilocal=1,obs_numbody(lobsSpaceData)
             bodyIndex_mpiglobal=obs_elem_i(lobsSpaceData,'GBI ',bodyIndex_mpilocal)
             family_string = obs_getFamily(lobsSpaceData,bodyIndex=bodyIndex_mpilocal)
             do index_string=1,2
               int_family_g(bodyIndex_mpiglobal,index_string)=iachar(family_string(index_string:index_string))
             enddo
           enddo  

           call rpn_comm_allreduce(int_family_g,int_family_g,2*numBody_mpiglobal,"MPI_INTEGER","MPI_SUM","GRID",ierr) 

           ! convert integer back to character with achar
           do bodyIndex_mpiglobal=1,numBody_mpiglobal
             do index_string=1,2
               family_g(bodyIndex_mpiglobal)(index_string:index_string)=achar(int_family_g(bodyIndex_mpiglobal,index_string))
             enddo
           enddo  

           deallocate(int_family_g)
           first_time=.false.

         endif

        end subroutine restore_robdata_family

      end subroutine oda_sumJo
