!--------------------------------------- LICENCE BEGIN -----------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------

!--------------------------------------------------------------------------
!! MODULE varNameList (prefix="vnl")
!!
!! *Purpose*: Contains a list of all possible variable names that can be used 
!!            as analysis variables along with additional information for each and
!!            procedures for accessing this information
!!
!--------------------------------------------------------------------------
module varNameList_mod
  use bufr
  use utilities_mod
  implicit none
  save
  private

  ! public variables (parameters)
  public :: vnl_numvarmax3D, vnl_numvarmax2D, vnl_numvarmax
  public :: vnl_varNameList3D, vnl_varNameList2D, vnl_varNameList

  ! public procedures
  public :: vnl_varListIndex3d, vnl_varListIndex2d, vnl_varListIndex, vnl_varnameFromVarnum
  public :: vnl_varLevelFromVarname, vnl_varLevelFromVarnum, vnl_varTypeFromVarname

  integer, parameter          :: vnl_numvarmax3D=26, vnl_numvarmax2D=4

  character(len=4), parameter :: vnl_varNameList3D(vnl_numvarmax3D) = (/                         &
                                 'UU  ','VV  ','GZ  ','TT  ','HU  ','LQ  ','ES  ','VT  ',        &
                                 'PP  ','CC  ','UC  ','UT  ','TB  ','DW  ','QR  ','DD  ',        &
                                 'O3  ','CH4 ','CO2 ','CO  ','NO2 ','N2O ','HCHO','SO2 ',        &
                                 'NH3 ','ALFA'/)

  character(len=2), parameter :: varLevelList3D(vnl_numvarmax3D)     = (/                         &
                                 'MM',  'MM',  'TH',  'TH',  'TH',  'TH',  'TH',  'TH',           &
                                 'MM',  'MM',  'MM',  'TH',  'TH',  'TH',  'MM',  'MM',           &
                                 'TH',  'TH',  'TH',  'TH',  'TH',  'TH',  'TH',  'TH',           &
                                 'TH',  'MM'/)

  character(len=5), parameter :: varTypeList3D(vnl_numvarmax3D)     = (/                                  &
                                 'MODEL', 'MODEL', 'MODEL', 'MODEL', 'MODEL', 'DIAG ', 'DIAG ', 'DIAG ',  &
                                 'DIAG ', 'DIAG ', 'DIAG ', 'DIAG ', 'DIAG ', 'DIAG ', 'DIAG ', 'DIAG ',  &
                                 'MODEL', 'MODEL', 'MODEL', 'MODEL', 'MODEL', 'MODEL', 'MODEL', 'MODEL',  &
                                 'MODEL', 'OTHER'/)

  character(len=4), parameter :: vnl_varNameList2D(vnl_numvarmax2D) = (/ &
                                 'P0  ','TG  ','UP  ','PB  '/)

  character(len=2), parameter :: varLevelList2D(vnl_numvarmax2D) = (/    &
                                 'SF',  'SF',  'SF',  'SF'/)

  character(len=5), parameter :: varTypeList2D(vnl_numvarmax2D) = (/     &
                                 'MODEL', 'MODEL', 'DIAG ', 'DIAG '/)

  integer, parameter          :: vnl_numvarmax = vnl_numvarmax3D + vnl_numvarmax2D

  character(len=4), parameter :: vnl_varNameList(vnl_numvarmax) = (/ vnl_varNameList3D, vnl_varNameList2D /)
  character(len=2), parameter :: varLevelList   (vnl_numvarmax) = (/ varLevelList3D   , varLevelList2D    /)
  character(len=5), parameter :: varTypeList    (vnl_numvarmax) = (/ varTypeList3D    , varTypeList2D     /)

  contains

    !--------------------------------------------------------------------------
    ! vnl_varListIndex3d
    !--------------------------------------------------------------------------
    function vnl_varListIndex3d(varName) result(listIndex)
      implicit none
      character(len=*), intent(in) :: varName
      integer                      :: jvar,listIndex

      listIndex=-1
      do jvar=1,vnl_numvarmax3D
        if(varName.eq.vnl_varNameList3d(jvar)) then
          listIndex=jvar
          exit
        endif
      enddo

      if(listIndex.le.0) then
        call utl_abort('vnl_varListIndex3D: Unknown variable name! ' // varName)
      endif

    end function vnl_varListIndex3d

    !--------------------------------------------------------------------------
    ! vnl_varListIndex2d
    !--------------------------------------------------------------------------
    function vnl_varListIndex2d(varName) result(listIndex)
      implicit none
      character(len=*), intent(in) :: varName
      integer                      :: jvar,listIndex

      listIndex=-1
      do jvar=1,vnl_numvarmax2D
        if(varName.eq.vnl_varNameList2d(jvar)) then 
          listIndex=jvar
          exit
        endif
      enddo

      if(listIndex.le.0) then
        call utl_abort('vnl_varListIndex2D: Unknown variable name! ' // varName)
      endif

    end function vnl_varListIndex2d

    !--------------------------------------------------------------------------
    ! vnl_varListIndex
    !--------------------------------------------------------------------------
    function vnl_varListIndex(varName) result(listIndex)
      implicit none
      character(len=*), intent(in) :: varName
      integer                      :: jvar,listIndex

      listIndex=-1
      do jvar=1,vnl_numvarmax
        if(varName.eq.vnl_varNameList(jvar)) then 
          listIndex=jvar
          exit
        endif
      enddo

      if(listIndex.le.0) then
        call utl_abort('vnl_varListIndex: Unknown variable name! ' // varName)
      endif

    end function vnl_varListIndex

    !--------------------------------------------------------------------------
    ! vnl_varnameFromVarnum
    !--------------------------------------------------------------------------
    function vnl_varnameFromVarnum(varNumber,varTrNumber) result(varName)
      implicit none
      integer, intent(in) :: varNumber
      integer, intent(in), optional :: varTrNumber
      character(len=4)    :: varName

      varName='    '
      select case (varNumber)
      case(BUFR_NEUU,BUFR_NEUS)
        varName='UU'
      case(BUFR_NEVV,BUFR_NEVS)
        varName='VV'
      case(BUFR_NETT,BUFR_NETS)
        varName='TT'
      case(BUFR_NEDZ,BUFR_NEGZ)
        varName='GZ'
      case(BUFR_NEHU,BUFR_NEHS,BUFR_NEES,BUFR_NESS)
        varName='HU'
      case(BUFR_NEPS,BUFR_NEPN)
        varName='P0'
      case(BUFR_NERF,BUFR_NEBD,BUFR_NEZD)
        varName='TT'   ! temporarily associate refractivity and ZTD with temperature
      case(BUFR_NEDW)
        varName='DW'
      case(BUFR_NETR)
        if (present(varTrNumber)) then      
           select case (varTrNumber)
           case(BUFR_NETR_O3)
              varname='O3'
           case(BUFR_NETR_H2O)
              varname='HU'
           case(BUFR_NETR_CH4)
              varname='CH4'
           case(BUFR_NETR_CO2)
              varname='CO2'
           case(BUFR_NETR_CO)
              varname='CO'
           case(BUFR_NETR_NO2)
              varname='NO2'
           case(BUFR_NETR_N2O)
              varname='N2O'
           case(BUFR_NETR_HCHO)
              varname='HCHO'
           case(BUFR_NETR_SO2)
              varname='SO2'
           case default
              write(*,*) 'vnl_varnameFromVarnum: Unknown TR variable number! ',varTrNumber
              call utl_abort('aborting in vnl_varnameFromVarnum')
           end select
        else
           call utl_abort('vnl_varnameFromVarnum: Missing TR variable number ')
        endif 
      case default
        write(*,*) 'vnl_varnameFromVarnum: Unknown variable number! ',varNumber
        call utl_abort('aborting in vnl_varnameFromVarnum')
      end select

    end function vnl_varnameFromVarnum

    !--------------------------------------------------------------------------
    ! vnl_varLevelFromVarname
    !--------------------------------------------------------------------------
    function vnl_varLevelFromVarname(varName) result(varLevel)
      implicit none

      character(len=*), intent(in)   :: varName
      character(len=2)               :: varLevel

      varLevel = varLevelList(vnl_varListIndex(varName))

    end function vnl_varLevelFromVarname

    !--------------------------------------------------------------------------
    ! vnl_varLevelFromVarnum
    !--------------------------------------------------------------------------
    function vnl_varLevelFromVarnum(varNumber,varTrNumber) result(varLevel)
      implicit none

      integer, intent(in)           :: varNumber
      integer, intent(in), optional :: varTrNumber
      character(len=2)              :: varLevel
      character(len=4)              :: varName

      if (present(varTrNumber)) then      
         varName = vnl_varnameFromVarnum(varNumber,varTrNumber)
      else 
         varName = vnl_varnameFromVarnum(varNumber)
      endif 
      varLevel = varLevelList(vnl_varListIndex(varName))

    end function vnl_varLevelFromVarnum

    !--------------------------------------------------------------------------
    ! vnl_varTypeFromVarname
    !--------------------------------------------------------------------------
    function vnl_varTypeFromVarname(varName) result(varType)
      implicit none

      character(len=*), intent(in)   :: varName
      character(len=5)               :: varType

      varType = varTypeList(vnl_varListIndex(varName))

    end function vnl_varTypeFromVarname

end module varNameList_mod
