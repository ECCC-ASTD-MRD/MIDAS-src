!--------------------------------------- LICENCE BEGIN -----------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------

module codtyp_mod
 ! CODETYPES: (from https://wiki.cmc.ec.gc.ca/wiki/Description_exhaustive_du_format_BURP)
 ! now read from namelist
 use utilities_mod
 private
 integer ,parameter :: codtyp_numbers = 256
 integer, parameter :: codtyp_name_length = 21
 character(len=codtyp_name_length) :: cnames(codtyp_numbers)
 integer  :: icod (codtyp_numbers)
 integer  :: ncodtyp
 namelist /NAMCODTYP/ cnames, icod

 public :: codtyp_get_codtyp,codtyp_get_name,codtyp_name_length

contains

integer function codtyp_get_codtyp(name)
  !******************************************
  ! S. Heilliette November 2015
  ! given a family name
  ! return the codtyp
  ! information from namelist NAMCODTYP
  !******************************************
  use mpi_mod
  implicit none
  character (len=*),intent(in) :: name
  !*******************************************
  logical ,save :: lfirst=.true.
  integer :: nulnam, ierr, i, ilen
  integer,external :: fnom, fclos
  character (len=codtyp_name_length) :: ctempo
  !********************************************
  if (lfirst) then
     nulnam = 0
     ncodtyp = 0
     cnames(:) = "XXXXXXXXXXXXXXXXXXXX"
     icod(:) = -1
     ierr = fnom(nulnam,'./flnml','FTN+SEQ+R/O',0)
     if (ierr.ne.0) then
         write(*,*) 'Error opening namelist file. Unit ',nulnam,'. Error no.',ierr
         call utl_abort('codtyp_get_codtyp: Error opening namelist file') 
     end if 
     read(nulnam,nml=namcodtyp, iostat=ierr)
     if (ierr.ne.0) call utl_abort('codtyp_get_codtyp: Error reading namelist')
     if (mpi_myid.eq.0) write(*,nml=namcodtyp)
     ierr = fclos(nulnam)
     do i=1, codtyp_numbers
        if (icod(i) == -1 ) then
           ncodtyp = i - 1
           exit
        endif
        ilen = len_trim(cnames(i))
        call up2low(cnames(i)(1:ilen),ctempo(1:ilen))
        cnames(i)(1:ilen) = ctempo(1:ilen)
     enddo
     if ( ncodtyp == 0 ) call utl_abort('codtyp_get_codtyp: Empty namcodtyp namelist')
     lfirst = .false.
  endif
  if (name.ne.''.and.name.ne.'blank') then
     ctempo(:) = ' '
     codtyp_get_codtyp = -1
     ilen = len_trim(name)
     call up2low(name(1:ilen),ctempo(1:ilen))
     do i=1, ncodtyp
        if ( trim(ctempo) == trim(cnames(i)) ) then
           codtyp_get_codtyp = icod(i)
           exit
        endif
     enddo
   else
      codtyp_get_codtyp=0
   end if
   
end function codtyp_get_codtyp

character (len=codtyp_name_length) function codtyp_get_name(codtyp)
  !******************************************
  ! S. Heilliette November 2015
  ! given a family name
  ! return the codtyp
  ! information from namelist NAMCODTYP
  !******************************************
  use mpi_mod
  implicit none
  Integer,intent(in) :: codtyp
  !*******************************************
  integer :: i, ilen
  !********************************************

  i=codtyp_get_codtyp('blank')
  if (ncodtyp<=0.or.all(icod.lt.0)) then
     Write(*,*) "Problem with NAMCODTYP section of the namelist !"
     call utl_abort("codtyp_get_name")
  endif

  codtyp_get_name='blank'
  do i=1, ncodtyp
     if ( icod(i) == codtyp ) then
        codtyp_get_name = trim(cnames(i))
        exit
     endif
  enddo

  if (codtyp_get_name.eq.'blank') then
     write(*,*) "Codtyp ",codtyp," not found in the icod list of NAMCODTYP"
     call utl_abort("codtyp_get_name: codtyp not found")
  end if
 
end function codtyp_get_name

end module codtyp_mod
