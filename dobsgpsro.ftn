!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE DOBSGPSRO(PJO,lcolumnhr,lobsSpaceData)
#if defined (DOC)
*
***s/r DOBSGPSRO - Computation of Jo and the residuals to the GPSRO observations
*
*
*Author  : J. M. Aparicio Jan 2004
*    -------------------
**    Purpose:
*
*Arguments
*     PJO: total value of Jo for GPSRO
*
#endif
      use EarthConstants_mod
      use MathPhysConstants_mod
      use modgps04profile
      use modgps05refstruct
      use modgps06gravity
      use modgps07geostruct
      use modgps08refop
      use obsSpaceData_mod
      use columnData_mod 
      IMPLICIT NONE
C
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData
      REAL*8 PJO, PJOB, PJO1
C
      type(struct_vco), pointer :: vco_trl
      REAL*8 ZLAT, Lat
      REAL*8 ZLON, Lon
      REAL*8, allocatable :: ZETA(:)
      REAL*8, allocatable :: ZPP (:)
      REAL*8, allocatable :: ZDP (:)
      REAL*8, allocatable :: ZTT (:)
      REAL*8, allocatable :: ZHU (:)
      REAL*8, allocatable :: ZGZ (:)
      REAL*8 ZP0
      REAL*8 ZPT, ZPR, ZCF
      REAL*8 ZMT
      REAL*8 HNH1
C
      REAL*8 ZOBS, ZMHX, ZOER, ZINC
C
      INTEGER INDEX_HEADER
      INTEGER IDATYP
      INTEGER INDEX_BODY
      INTEGER JL, NGPSLEV
C
      LOGICAL  ASSIM, LSTAG, FIRSTHEADER

      INTEGER NH, NH1
      TYPE(GPSPROFILE)           :: PRF 
      REAL(DP)     , ALLOCATABLE :: H   (:)
      TYPE(GPSDIFF), ALLOCATABLE :: RSTV(:)

      WRITE(*,*)'ENTER DOBSGPSRO'
C
      vco_trl => col_getVco(lcolumnhr)
      LSTAG = .FALSE.
      if (vco_trl%iversion .eq. 5002) then
         LSTAG = .TRUE. 
         WRITE(*,*)'VERTICAL COORD OF TRIAL FIELDS IS STAGGERED'
         WRITE(*,*)'VCODE= ',vco_trl%iversion,' LSTAG= ',LSTAG
         WRITE(*,*)'!!!!!!!!! CAUTION !!!!!!!!!!!!'
         WRITE(*,*)'STAGGERING NOT YET IMPLEMENTED IN DERIVATIVES'
      else
         WRITE(*,*)'VERTICAL COORD OF TRIAL FIELDS IS NOT STAGGERED'
         WRITE(*,*)'VCODE= ',vco_trl%iversion,' LSTAG= ',LSTAG
      endif
C
C     * 1.  Initializations
C     *     ---------------
C
      FIRSTHEADER = .true.
      allocate(ZETA(col_getNumLev(lcolumnhr,'TH')))
      allocate(ZTT(col_getNumLev(lcolumnhr,'TH')))
      allocate(ZHU(col_getNumLev(lcolumnhr,'TH')))
      allocate(ZGZ(col_getNumLev(lcolumnhr,'TH')))
      allocate(ZDP(col_getNumLev(lcolumnhr,'TH')))
      allocate(ZPP(col_getNumLev(lcolumnhr,'TH')))
C
C     *    .   1.1  Eta vector
C     *    .        ----------
C
      NGPSLEV=col_getNumLev(LCOLUMNHR,'TH')
      DO JL = 1, NGPSLEV
         ZETA(JL) = vco_trl%dhyb_T(JL)
      ENDDO
C
      ! loop over all header indices of the 'RO' family
      call obs_set_current_header_list(lobsSpaceData,'RO')
      HEADER: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER
C     
C     *  Process only refractivity data (codtyp 169)
C
         IDATYP = obs_elem_i(lobsSpaceData,'ITY ',INDEX_HEADER)
         IF ( IDATYP .EQ. 169 ) THEN
C
C           Loops over data in the observation
C
            ASSIM = .FALSE.
C
C           Scan for requested assimilations, and count them
C
            NH = 0
            ! loop over all body indices for this index_header
            call obs_set_current_body_list(lobsSpaceData, index_header)
            BODY: do 
               index_body = obs_getBodyIndex(lobsSpaceData)
               if (index_body < 0) exit BODY
               IF ( obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY).EQ.1 ) THEN
                  ASSIM = .TRUE.
                  NH = NH + 1
               ENDIF
            ENDDO BODY
C
C     *     If assimilations are requested, apply the observation operator
C
            IF (ASSIM) THEN
C     
C     *        Profile at the observation location:
C
               Lat  = obs_elem_r(lobsSpaceData,'LAT ',INDEX_HEADER)
               Lon  = obs_elem_r(lobsSpaceData,'LON ',INDEX_HEADER)
               ZLAT = Lat * MPC_DEGREES_PER_RADIAN_R8
               ZLON = Lon * MPC_DEGREES_PER_RADIAN_R8
               ZP0 =  col_getElem(lcolumnhr,1,INDEX_HEADER,'P0')
               DO JL = 1, col_getNumLev(LCOLUMNHR,'TH')
C
C     *           Profile x
C
                  ZPP(JL) = col_getPressure(LCOLUMNHR,JL,INDEX_HEADER,'TH')
CCCCCCCCCCC       THIS IS ONLY A DUMMY IMPLEMENTATION OF ZDP (dP/dP0)
                  ZDP(JL) = ZPP(JL)/ZP0
                  ZTT(JL) = col_getElem(lcolumnhr,JL,INDEX_HEADER,'TT')-273.15
                  ZHU(JL) = col_getElem(lcolumnhr,JL,INDEX_HEADER,'HU')
                  ZGZ(JL) = col_getHeight(lcolumnhr,JL,INDEX_HEADER,'TH')
               ENDDO
               ZPT = col_getPressure(LCOLUMNHR,1,INDEX_HEADER,'TH')
               ZMT = ZGZ(col_getNumLev(LCOLUMNHR,'TH'))/RG
               ZMT = gpsgeopotential(Lat, ZMT)/RG
               ZPR = vco_trl%dprf_M
               ZCF = vco_trl%drcf1
C     
C     *        GPS profile structure:
C
               IF (LSTAG) THEN
c     *           Staggered hybrid trial field 
                  CALL GPSSTRUCT1S(NGPSLEV,ZLAT,ZLON,
     +                 ZPP,ZDP,ZTT,ZHU,ZMT,PRF)
               ELSE
c     *           ETA or HYBRID NONSTAGGERED trial field 
                  CALL GPSSTRUCT1H(NGPSLEV,ZLAT,ZLON,ZETA,
     +                 ZTT,ZHU,ZP0,ZMT,ZPT,ZPR,ZCF,PRF)
               ENDIF
               CALL GPSGEO(PRF)
C
C     *        Prepare the vector of all the observations:
C
               ALLOCATE( H    (NH) )
               ALLOCATE( RSTV (NH) )
               NH1 = 0
               ! loop over all body indices for this index_header
               call obs_set_current_body_list(lobsSpaceData, index_header)
               BODY_2: do 
                  index_body = obs_getBodyIndex(lobsSpaceData)
                  if (index_body < 0) exit BODY_2
                  IF ( obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY).EQ.1 ) THEN
                     NH1   = NH1 + 1
                     HNH1  = obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY)
                     H(NH1)= gpsgeopotential(Lat,HNH1)/9.80616
                  ENDIF
               ENDDO BODY_2
C
C     *        Apply the observation operator:
C  
               CALL GPSREFOPV (H, PRF, RSTV)
C
C     *        Perform the (H(x)-Y)/S operation
C
               NH1 = 0
               PJOB = 0._dp
               ! loop over all body indices for this index_header
               call obs_set_current_body_list(lobsSpaceData, index_header)
               BODY_3: do 
                  index_body = obs_getBodyIndex(lobsSpaceData)
                  if (index_body < 0) exit BODY_3
                  IF ( obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY).EQ.1 ) THEN
                     NH1 = NH1 + 1
C
C     *              Observation operator H(x)
C
                     ZMHX = RSTV(NH1)%VAR
C
C     *              Observation value    Y
C
                     ZOBS = obs_elem_r(lobsSpaceData,'VAR ',INDEX_BODY)
C
C     *              Observation error    S
C
                     ZOER = obs_elem_r(lobsSpaceData,'OER ',INDEX_BODY)
C
C     *              Normalized increment
C
                     ZINC = (ZMHX - ZOBS) / ZOER
C                           
C                    OMF Tested criteria:
C
                     PJO1 = 0.5_dp * ZINC * ZINC
C
C     *              Total (PJO) and per profile (PJOB) cumulatives:
C
                     PJO = PJO + PJO1
                     PJOB= PJOB+ PJO1
C
                     IF (FIRSTHEADER) THEN
                        WRITE(*,
     +                       '(A9,i10,2f7.2,f8.0,3f9.4,15f12.4)')
     +                       'DOBSGPSRO',
     +                       INDEX_HEADER,ZLAT,ZLON,
     +                       h(nh1),ZOBS,ZOER,ZMHX,ZINC,
     +                       PJO,PRF%GST(NGPSLEV)%Var
                     ENDIF

                     call obs_set_r(lobsSpaceData,'OMA ',INDEX_BODY, ZINC)
                     call obs_set_r(lobsSpaceData,'OMN ',INDEX_BODY, ZINC)
                     call obs_set_r(lobsSpaceData,'OMI ',INDEX_BODY, ZINC)
                  ENDIF
               ENDDO BODY_3
               DEALLOCATE( RSTV )
               DEALLOCATE( H    )
               WRITE(*,
     +              '(A9,i10,2f7.2,f18.10,3f9.4,15f12.4)')
     +              'GPSRO_JO',INDEX_HEADER,ZLAT,ZLON,PJOB
            ENDIF

         ENDIF

         FIRSTHEADER = .false.

      ENDDO HEADER

      deallocate(ZETA)
      deallocate(ZTT)
      deallocate(ZHU)
      deallocate(ZGZ)
      deallocate(ZDP)
      deallocate(ZPP)

      WRITE(*,*)'EXIT DOBSGPSRO'
      RETURN
      END
