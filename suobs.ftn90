!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE SUOBS(obsSpaceData,obsColumnMode,obsMpiStrategy)
!
!**s/r SUOBS  - Initialisation of observation parameters and constants
!
! Revisions:
!           Y. Rochon and M. Sitwell, Jan 2016
!           - Use of obs_famExist and corresponding move of calls
!             to sugpsro, sugpsgb and tovs_setup after the call to selectb
!             as initialization of family list in obs_famExist must follow
!             saving of the obs in obsSpaceData.
!           - Addition of call to chm_setup for inclusion of constituent data 
!             info not included in obsSpaceData_mod and reading of NAMCHEM.
!
      use topLevelControl_mod
      use obsSpaceData_mod
      use filterObs_mod  
      use modgpsztd_mod
      use modgpsro_mod
      use tovs_nl_mod
      use tovs_lin_mod
      use multi_ir_bgck_mod
      use chem_mod

      IMPLICIT NONE

      type(struct_obs) :: obsSpaceData
      character(len=*) :: obsMpiStrategy
      character(len=*) :: obsColumnMode
      integer :: get_max_rss
      logical :: obs_init

      WRITE(*,FMT=9000)
 9000 FORMAT(/,1x,' SUOBS - Initialisation of observations',/,1x,3('- -----------'))

      !
      ! Specify the active observation-array columns
      !
      call obs_class_initialize(obsColumnMode)
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
      !
      ! Allocate memory for observation arrays
      !
      call obs_initialize(obsSpaceData,mpi_local=top_BurpSplit() )
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

      !
      ! Read the NAMELIST NAMGGPSRO
      ! 
      if (obs_famExist(obsSpaceData,'RO')) call sugpsro
      
      !
      ! Initialize GB-GPS processing (read NAMGPSGB in namelist file)
      !
      if (obs_famExist(obsSpaceData,'GP')) call sugpsgb
      
      !
      ! Read the NAMELIST NAMTOV and initialize the sensor information.
      !
      if (obs_famExist(obsSpaceData,'TO')) call tovs_setup

      !
      ! Read the NAMELIST NAMCHEM and set up additional constituent 
      ! obs related info not found in obsSpaceData.
      !
      if (obs_famExist(obsSpaceData,'CH')) call chm_setup

      !
      ! Set up the list of elements to be assimilated and flags for rejection
      !
      call filt_setup

      call tmg_start(11,'READ_BURP')
                                  !Select calls  BRPCMA
                                  ! 1. Positioning of data records within ObsSpaceData
      CALL SELECTB(obsSpaceData)  ! 2. Fill ObsSpaceData  with observation records
                                  ! 3. Incrementation of obsSpaceData%numheader and obsSpaceData%numbody based on data selected
      call tmg_stop(11)

      !
      ! Filter out data from CMA
      !
      call tmg_start(14,'SUPREP')
      call filt_sethind(obsSpaceData)
      call filt_suprep(obsSpaceData)
      call tmg_stop(14)

      !
      ! set OBS_IPC and OBS_IPT columns according to the chosen strategy
      !
      write(*,*)
      write(*,*) 'SUOBS - Using obsMpiStrategy = ', trim(obsMpiStrategy)
      call setObsMpiStrategy(obsSpaceData,obsMpiStrategy)

      !
      ! Check env variable ARMA_BURP_SPLIT to know if burp files already split
      !
      if ( top_BurpSplit() ) then 
        ! local observations files, so just do reallocation to reduce memory used
        call obs_squeeze(obsSpaceData)
        call obs_MpiRedistribute(obsSpaceData,OBS_IPC)
        write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
      else
        ! global observations files so have to localize them for each MPI process
        ! NOTE: not currently supported, but may be useful for future versions
        call obs_reduceToMpiLocal(obsSpaceData)
      end if  
      
      !
      ! Initialization and memory allocation for TOVS processing
      !
      if (obs_famExist(obsSpaceData,'TO')) then
         call tovs_nl_setupallo(obsSpaceData)
         if ( top_BgckIrMode() ) call BGCK_IR_SETUP(obsSpaceData)
         if ( top_AnalysisMode() ) call tovs_lin_setupallo()
      end if

      END SUBROUTINE SUOBS
