!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      subroutine preproc(lcolumng,lcolumnhr,lobsSpaceData,
     &                   obsColumnMode,obsMpiStrategy)
*
***s/r preproc  - Control of the preprocessing of the 3D variational assimilation
*
*Author  : S. Pellerin *ARMA/AES  Nov., 1999
*Revision:
*
      use mpi
      use MathPhysConstants_mod
      use Vgrid_Descriptors, only: vgrid_descriptor
      use obsSpaceData_mod
      use controlVector_mod
      use gridStateVector_mod
      use minimization_mod
      use columndata_mod
      use gaussGrid_mod
      use bmatrix_mod
      IMPLICIT NONE
*implicits
#include "comct0.cdk"
#include "comfilt.cdk"

      type(struct_obs) :: lobsSpaceData
      type(struct_columnData) :: lcolumng,lcolumnhr
      character (len=*) :: obsColumnMode
      character (len=*) :: obsMpiStrategy
      type(struct_vco), pointer :: vco_anl => null()
      type(struct_vco), pointer :: vco_trl => null()
      integer :: get_max_rss
      character(len=256) :: BURP_SPLIT_VAR
      integer :: length_burp_split, status
      logical :: burp_split_L

      write(*,*) '-------------------------------'
      write(*,*) '--Starting subroutine preproc--'
      write(*,*) '-------------------------------'
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Initialize logical units and some files
!
      call sufilnam
!
!     Initialize constants
!
      call mpc_printConstants(6)
!
!     Set vertical coordinate parameters from !! record in trial file
!
      write(*,*)' preproc: Set vcoord parameters for trial grid'
      call vco_SetupFromFile(vco_trl,'./trlm_01',.false.)
      call col_setVco(lcolumnhr,vco_trl)
!
!     Initialize variables of the model states
!
      call gsv_setup
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Initialize dimensions of the gaussian grid (analysis grid)
!
      call gaus_setup
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Specify the active observation-array columns
!
      call obs_class_initialize(obsColumnMode)
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Allocate memory for observation arrays
!
      status = 0
      burp_split_L = .false.
      call get_environment_variable('ARMA_BURP_SPLIT',BURP_SPLIT_VAR,length_burp_split,status,.true.)
      if (status.gt.1) then
         write(*,*) 'Routine preproc: Problem when getting the environment variable ARMA_BURP_SPLIT'
      end if
      if (status.eq.1) then !! The variable 'ARMA_BURP_SPLIT' does not exist so we didn't split the observations
         write(*,*) 'Routine preproc: The environment variable ARMA_BURP_SPLIT has not been detected so we read global observation files'
         burp_split_L = .false.
      else
         write(*,*) 'Routine preproc: The environment variable ARMA_BURP_SPLIT has been detected so we read splitted observation files'
         burp_split_L = .true.
      end if

      call obs_initialize(lobsSpaceData,mpi_local=burp_split_L)
         
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Initialisation of the analysis grid vertical coordinate from !! in Bnmc file
!
      call vco_SetupFromFile(vco_anl,'./glbcov',.true.)
      call col_setVco(lcolumng,vco_anl)
!
!     Check the date of the burp files (set datestamp)
!
      call brpcheck()
!
!     Miscellaneous initializations associated with the observations
!
      call suobs(lobsSpaceData)
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Initialize TOVS processing
!
      call tovs_setup
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Initialize GB-GPS processing (read NAMGPSGB in namelist file)
!
      call sugpsgb
!
!     Basic setup of columnData module (nouu, novv, etc. needed in suprep)
!
      call col_setup
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Filter out data from CMA
!
      call tmg_start(14,'SUPREP')
      call suprep(lobsSpaceData)
      call tmg_stop(14)
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Check env variable ARMA_BURP_SPLIT to know if burp files already split by subdomains
!
      if (.not.burp_split_L) then !! we read global observations files so we have to localized them for each MPI process
         call setObsMpiStrategy(lobsSpaceData,obsMpiStrategy)
         call obs_reduceToMpiLocal(lobsSpaceData)
      end if
      if (obsMpiStrategy .eq. 'LATBANDS') then
         call checkObsMpiIP(lobsSpaceData,burp_split_L)
      end if
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Memory allocation for background column data
!
      call col_allocate(lcolumng,obs_numheader(lobsSpaceData),mpi_local=.true.)
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Point GZ_T,GZ_M and RPPOBS_T,RPPOBS_M and VHYB_T,VHYB_M to their unstaggered values in lcolumng
!
      call col_pointStagToUnstag(lcolumng)
!
!     Memory allocation for TOVS processing
!
      call tovs_setupallo(lobsSpaceData)
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Initialize the observation error covariances
!
      call sucovo(lobsSpaceData)
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Initialize the background-error covariance
!
      if(nconf.eq.141) CALL bmat_setup(vco_anl,min_get_datestamp())
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Set up the minimization module, now that the required parameters are known
!     NOTE: some global variables remain in minimization_mod that must be initialized before sugomobs
!
      if(nconf.eq.141) call min_setup(cvm_nvadim,gaus_ni,gaus_nj,nstepobsinc)
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
!     Reading, horizontal interpolation and unit conversions of the 3D trial fields
!
      call tmg_start(10,'SUGOMOBS')
      call sugomobs(lcolumng,lcolumnhr,lobsSpaceData)
      call tmg_stop(10)
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
      write(*,*) 'PRDATABIN: Before filtering done in SUINNOV'
      call prdatabin(lobsSpaceData,nstepobs)
!
!     Compute observation innovations and prepare obsSpaceData for minimization
!
      call suinnov(lcolumnhr,lcolumng,lobsSpaceData)
      write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
!
      write(*,*) 'PRDATABIN: After filtering done in SUINNOV'
      call prdatabin(lobsSpaceData,nstepobs)
!
      return
      end subroutine preproc
