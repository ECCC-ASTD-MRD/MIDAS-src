!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      subroutine preproc(lcolumng,lcolumnhr,lobsSpaceData)
*
***s/r preproc  - Control of the preprocessing of the 3D variational assimilation
*
*Author  : S. Pellerin *ARMA/AES  Nov., 1999
*Revision:
*
      USE mod4dv,only : l4dvar
      use MathPhysConstants_mod
      use Vgrid_Descriptors, only: vgrid_descriptor
      use obsSpaceData_mod
      use controlVector_mod
      use gridStateVector_mod
      use minimization_mod
      use modfgat
      use columndata_mod
      use gaussGrid_mod
      use bmatrix_mod
      IMPLICIT NONE
*implicits
#include "comct0.cdk"
#include "comlun.cdk"
#include "comvfiles.cdk"
#include "cvcord.cdk"
#include "comgpsgb.cdk"

      type(struct_obs) :: lobsSpaceData
      type(struct_columnData) :: lcolumng,lcolumnhr
      INTEGER IERR

      write(*,*) '-------------------------------'
      write(*,*) '--Starting subroutine preproc--'
      write(*,*) '-------------------------------'
!
!     INITIALIZE LOGICAL UNITS.
!
      CALL SULUN
!
!     INITIALIZE CONSTANTS.
!
      call mpc_initialize()
      call mpc_printConstants(nulout)
!
!     Set vertical coordinate parameters from !! record in trial file
!
      write(nulout,*)' preproc: Set vcoord parameters for trial grid'
      call vco_SetupFromFile(vgrid_trl,vco_trl,ninmpg(1),.false.)
!
      write(nulout,*)'preproc: version, kind, svcod ',
     & vco_trl%iversion,vco_trl%ikind,vco_trl%svcod
      write(nulout,*)'preproc:zptophr,zprefhr,zrcoefhr ',vco_trl%dpt_M,
     & vco_trl%dprf_M,vco_trl%drcf1,
     & vco_trl%dpt_T,vco_trl%dprf_T
!
!     INITIALIZE VARIABLES OF THE MODEL STATES.
!
      call gsv_setup
!
!     INITIALIZE DIMENSIONS OF THE GAUSSIAN GRID.
!
      call gaus_setup
!
!     Allocate memory for observation arrays
!
      CALL SUALOBS(NULOUT,lobsSpaceData)
!
!     Initialisation of the geometry
!
      CALL vco_AnlInit(NULOUT)
!
!     Initialization of post-processing
!
      CALL SUPOST   ! keep delayed in sequence to ensure geometry dependence (Luc)

      call tmg_start(15,'SUCVA')  ! start of what used to be SUCVA
!
!     Reading and initialization in preparation of the minimization
!
      WRITE(NULOUT,FMT=9200)
 9200 FORMAT(//,5x,"-Reading and initialization in preparation to the "
     S     ,"minimization",/,6x,61('-'))
!
!     Check the date of the burp files (set nbrpstamp)
!
      CALL BRPCHECK
!
!     Initialize comgdpar
!
      CALL SUGDPAR
!
!     Initialize the observation error covariance
!
      CALL SUCOVO
!
!     Miscellaneous initializations associated with the observations
!
      CALL SUOBS(NULOUT,lobsSpaceData)
!
!     Initialize TOVS processing
!
      CALL TOVS_SETUP(NULOUT)
!
!     Initialize GB-GPS processing (read NAMGPSGB in namelist file)
!
      call sugpsgb(nulout)
!
!     Basic setup of columnData module (nouu, novv, etc. needed in suprep)
!
      call col_setup
!
!     Filter out data from CMA
!
      call suprep(lobsSpaceData)
!
!     If single GB-GPS observation assimilation, select the observation
!
      IF ( L1GPSOBS ) CALL FILT_GPSGB(lobsSpaceData)

      call cmapr(lobsSpaceData)

      call sutimeinterp(lobsSpaceData)

      call obs_reduceToMpiLocal(lobsSpaceData,nfiles,
     +                          nbegintyp,nendtyp,nbegintyp_g,nendtyp_g)

      call suobsgid(lobsSpaceData)
!
!     MEMORY ALLOCATION FOR BACKGROUND COLUMN DATA 
!
      call col_sualobsb(vco_anl%nlev_M,obs_numheader(lobsSpaceData)) 
      call col_allocate(lcolumng,vco_anl%nlev_M,obs_numheader(lobsSpaceData))
      call col_zero(lcolumng)
!
!     Point GZ_T,GZ_M and RPPOBS_T,RPPOBS_M and VHYB_T,VHYB_M to their unstaggered values in lcolumng
!
      call col_pointStagToUnstag(lcolumng)
!
!     Memory allocation for TOVS processing
!
      CALL TOVS_SETUPALLO(NULOUT,lobsSpaceData)
!
!     SET OBSERVATION ERRORS TO CMA FILE
!
      CALL SETERR(lobsSpaceData)
!
!     Initialize the background-error covariance
!
      if(nconf.eq.141) CALL bmat_setup
!
!     Set up the minimization module, now that the required parameters are known
!
      if(nconf.eq.141) call min_setup(cvm_nvadim,gaus_ni,gaus_nj,vco_anl%nlev_M,nstepobsinc)
!
      call tmg_stop(15)  ! end of what used to be SUCVA
!
!     Reading, horizontal interpolation and unit conversions of the 3D trial fields
!
      call tmg_start(16,'SUGOMOBS')
      call sugomobs(lcolumng,lcolumnhr,lobsSpaceData)
      call tmg_stop(16)
!
!     Compute observation innovations and prepare obsSpaceData for minimization
!
      call suinnov(lcolumnhr,lcolumng,lobsSpaceData)
!
      call prdatabin(lobsSpaceData)
!
      RETURN
      END
