Module tovs_mod
  use mpi
  Use rttov_types, only : &
     rttov_coefs         ,&
     rttov_options       ,&
     profile_type        ,&
     transmission_Type   ,&
     radiance_type       ,&
     rttov_chanprof
  implicit none
  save
  private

  ! public derived types
  public :: avhrr_bgck_iasi, prof_qc
  ! public derived type through inheritance (from module rttov_types)
  public :: transmission_type,radiance_type,profile_type,rttov_chanprof

  ! public variables (parameters)
  public :: NCLASSAVHRR, NIR, NVIS, NCHANAVHRR, jppf, jpchmax, jpchus, jpnsatmax, jplev, MXPLATFORM
  ! public variables (non-parameters)
  public :: nchan, ichan, lsensor, lobsno, ltovsno, JPMOTOP, JPMOLEV, nobtov
  public :: NSENSORS, PLATFORM, SATELLITE, INSTRUMENT, CHANOFFSET
  public :: LDBGTOV, LEVEL1B, LNLVTOV, CSATID, CINSTRUMENTID, CRTMODL
  public :: CPLATFORM, CINSTRUMENT, NOPLATFORM, NOINSTRUMENT
  public :: coefs_avhrr, coefs, opts, profilesdata, profiles, profiles_tl, profiles_ad, profiles_qc
  public :: radiancedata_d, radiance_d, radiance_tl, radiance_ad, transmission, transmission_d
  public :: emissivity, avhrr_bgck

  ! public procedures
  public :: TOVS_SETUP, tvs_Is_idburp_tovs, tvs_Is_idburp_airs, tvs_Is_idburp_iasi, tvs_Is_idburp_cris


  ! Module parameters
  INTEGER ,PARAMETER :: NCLASSAVHRR=7
  INTEGER ,PARAMETER :: NIR=3,NVIS=3
  INTEGER ,PARAMETER :: NCHANAVHRR=NIR+NVIS

  Integer, PARAMETER :: jppf      =  40      ! Max no. profiles per RTTOV call
  Integer, PARAMETER :: jpchmax   = 8461     ! Max. no. of channels
  Integer, PARAMETER :: jpchus    = 616      ! Max. no. of channels computed/call
  Integer, PARAMETER :: jpnsatmax = 30       ! Max no sensors to be used
  Integer, PARAMETER :: jplev     = 51       ! No. of pressure levels including "rttov top" at 0.005 hPa for rttov-10

  ! Module variables
  Integer, allocatable :: nchan(:)              ! number of channels per instrument
  Integer, allocatable :: ichan(:,:)            ! list of channels per instrument
  Integer, allocatable :: lsensor(:)            ! sensor number for each profile
  Integer, allocatable :: lobsno (:)            ! observation number in cma for each profile
  Integer, allocatable :: ltovsno (:)           ! index in TOVS structures for each observation in cma

  Integer JPMOTOP, JPMOLEV, nobtov

  ! Variables from comtov.cdk
!     NSENSORS           : number of individual sensors.
!     PLATFORM(MXPLATFORM)  : platform ID's (e.g., 1=NOAA; 2=DMSP; ...)
!     SATELLITE(JPNSATMAX)  : satellite ID's (e.g., 1 to 16 for NOAA; ...)
!     INSTRUMENT(JPNSATMAX) : instrument ID's (e.g., 3=AMSU-A; 4=AMSU-B; 6=SSMI; ...)
!     CHANOFFSET(JPNSATMAX) : BURP to RTTOV-7 channel mapping offset
!     LDBGTOV            : logical key controlling statements to be
!     .                    executed while debugging TOVS only
!     LEVEL1B            : .T. if processing TOVS level 1B data
!     CRTMODL            : TOVS radiation model used:
!                             RTTOV, EUMETSAT NWP SAF radiation model
!     LNLVTOV            : .T. if processing is to be non-linear
  INTEGER NSENSORS
  INTEGER PLATFORM(JPNSATMAX), SATELLITE(JPNSATMAX)
  INTEGER INSTRUMENT(JPNSATMAX), CHANOFFSET(JPNSATMAX)
  LOGICAL LDBGTOV, LEVEL1B, LNLVTOV
  CHARACTER*15 CSATID(JPNSATMAX), CINSTRUMENTID(JPNSATMAX)
  CHARACTER*8 CRTMODL

  ! Variable from sensors.ftn
  INTEGER, parameter :: MXPLATFORM = 17
  CHARACTER*15 CPLATFORM  (MXPLATFORM  )
  CHARACTER*15 CINSTRUMENT(JPNSATMAX)
  INTEGER NOPLATFORM(MXPLATFORM)
  INTEGER NOINSTRUMENT(JPNSATMAX)

!                         Tables for Platforms and Satellites
!                         -----------------------------------

      DATA CPLATFORM  / 'NOAA',    'DMSP',   'METEOSAT',    'GOES', &
                        'GMS',     'FY2',       'TRMM',     'ERS',  &
                        'EOS',  'METOP-',    'ENVISAT',     'MSG',  &
                        'FY1',   'ADEOS',      'MTSAT','CORIOLIS',  &
                        'NPP' /

      DATA NOPLATFORM /      1,         2,            3,        4,  &
                             5,         6,            7,        8,  &
                             9,        10,           11,       12,  &
                            13,        14,           15,       16,  &
                            17 /

      DATA CINSTRUMENT  /      'HIRS',        'MSU',         'SSU',  &
                              'AMSUA',      'AMSUB',       'AVHRR',  &
                               'SSMI',      'VTPR1',       'VTPR2',  &
                                'TMI',      'SSMIS',        'AIRS',  &
                                'HSB',      'MODIS',        'ATSR',  &
                                'MHS',       'IASI',        'AMSR',  &
                              'MVIRI',     'SEVIRI',  'GOESIMAGER',  &
                        'GOESSOUNDER',   'GMSMTSAT',    'FY2VISSR',  &
                           'FY1MVISR',       'CRIS',       'CMISS',  &
                              'VIIRS',    'WINDSAT',        'ATMS' /

      DATA NOINSTRUMENT /           0,            1,             2,  &
                                    3,            4,             5,  &
                                    6,            7,             8,  &
                                    9,           10,            11,  &
                                   12,           13,            14,  &
                                   15,           16,            17,  &
                                   20,           21,            22,  &
                                   23,           24,            25,  &
                                   26,           27,            28,  &
                                   29,           30,            19 /

  ! Dervied types
  type( rttov_coefs ) :: coefs_avhrr

  TYPE avhrr_bgck_iasi
     SEQUENCE   
     REAL(8)              :: RADMOY(NCLASSAVHRR,NCHANAVHRR)
     REAL(8)              :: RADSTD(NCLASSAVHRR,NCHANAVHRR)
     REAL(8)              :: CFRAC(NCLASSAVHRR)
     REAL(8)              :: TBMOY(NCLASSAVHRR,NVIS+1:NVIS+NIR)
     REAL(8)              :: TBSTD(NCLASSAVHRR,NVIS+1:NVIS+NIR)
     REAL(8)              :: ALBEDMOY(NCLASSAVHRR,1:NVIS)
     REAL(8)              :: ALBEDSTD(NCLASSAVHRR,1:NVIS)
     REAL(8)              :: TBSTD_PIXELIASI(NVIS+1:NVIS+NIR)
     REAL(8)              :: ALBSTD_PIXELIASI(1:NVIS)
     REAL(8)              :: RADCLEARCALC(NVIS+1:NVIS+NIR)
     REAL(8)              :: TBCLEARCALC(NVIS+1:NVIS+NIR)
     REAL(8)              :: RADOVCALC(jplev,NVIS+1:NVIS+NIR)
     REAL(8)              :: TRANSMCALC(jplev,NVIS+1:NVIS+NIR)
     REAL(8)              :: TRANSMSURF(NVIS+1:NVIS+NIR)
     REAL(8)              :: EMISS(NVIS+1:NVIS+NIR)
  END TYPE avhrr_bgck_iasi

  TYPE prof_qc
     SEQUENCE
     REAL(8)              :: LAT      ! latitude (-90 to 90)
     REAL(8)              :: LON      ! longitude (0 to 360)
     REAL(8), POINTER     :: Z(:)     ! height field (m)
     REAL(8)              :: SUNZA    ! sun zenith angle (deg)
     REAL(8)              :: ALBEDO   ! surface albedo (0-1)
     REAL(8)              :: ICE      ! ice cover (0-1) 
     REAL(8)              :: SNOW     ! snow cover (0-1)
     INTEGER              :: LTYPE    ! surface type (1,...,20)
     REAL(8)              :: PCNT_WAT ! water percentage in pixel containing profile (0-1)
     REAL(8)              :: PCNT_REG ! water percentage in an area around profile (0-1)
  END TYPE prof_qc

  type( rttov_coefs ) ,     allocatable :: coefs(:)          ! coefficients
  type( rttov_options ),    allocatable :: opts(:)           ! options
  type( profile_Type ),     allocatable :: profilesdata(:)   ! profiles buffer used in rttov calls
  type( profile_Type ),     allocatable :: profiles(:)       ! profiles, all profiles
  type( profile_Type ),     allocatable :: profiles_tl(:)    ! tl profiles, all profiles
  type( profile_Type ),     allocatable :: profiles_ad(:)    ! ad profiles, all profiles
  type( prof_qc )     ,     allocatable :: profiles_qc(:)    ! profiles buffer used in airsqc call
  type(radiance_Type)     :: radiancedata_d                  ! radiances full structure buffer used in rttov calls
  type(radiance_Type) ,     allocatable :: radiance_d(:)     ! radiances organized by profile
  type(radiance_Type) ,     allocatable :: radiance_tl(:)    ! tl radiances organized by profile
  type(radiance_Type) ,     allocatable :: radiance_ad(:)    ! tl radiances organized by profile
  type(transmission_Type) :: transmission                    ! transmissions full structure buffer used in rttov calls
  type(transmission_Type) , allocatable :: transmission_d(:) ! transmissions organized by profile
  real(8)                 , allocatable :: emissivity(:,:)   ! surface emissivities organized by profiles and channels

  type(avhrr_bgck_iasi)  , allocatable :: avhrr_bgck(:)      ! avhrr parameters for IASI quality control

contains

  SUBROUTINE TOVS_SETUP
  !
  !  s/r TOVS_SETUP : Initialisation of the TOVS processing and radiative
  !     .        transfer model.
  !    -------------------
  !     Purpose: to read namelist NAMTOV, initialize the observation error covariance
  !              and setup RTTOV-8.
  !
  IMPLICIT NONE

  INTEGER  JK, IERR, nulnam, fclos, fnom

  NAMELIST /NAMTOV/NSENSORS, CSATID, CINSTRUMENTID
  NAMELIST /NAMTOV/LDBGTOV, LEVEL1B 
  NAMELIST /NAMTOV/LNLVTOV, CRTMODL

 
  !     .  1.1 Default values
  !     .      --------------

  NSENSORS   = 1
  CSATID(:)  = '***UNDEFINED***'
  CINSTRUMENTID(:) = '***UNDEFINED***'
  CSATID(1)  = 'NOAA16'
  CINSTRUMENTID(1) = 'AMSUA'
  LDBGTOV   = .FALSE.
  LEVEL1B   = .FALSE.
  LNLVTOV   = .FALSE.
  CRTMODL   = 'RTTOV'

  !     .   1.2 Read the NAMELIST NAMTOV to modify them
  !     .       ---------------------------------------
 
  nulnam=0
  ierr=fnom(nulnam,'./flnml','FTN+SEQ+R/O',0)
  read(nulnam,nml=namtov,iostat=ierr)
  if(ierr.ne.0) call abort3d('tov_setup: Error reading namelist')
  if(mpi_myid.eq.0) write(*,nml=namtov)
  ierr=fclos(nulnam)

  !     .   1.3 Validate namelist values
  !     .       ------------------------

  IF ( CRTMODL .NE. 'RTTOV' ) THEN
     WRITE(*,FMT=9131)
  9131    FORMAT(' TOVS_SETUP: Invalid radiation model name')
     CALL ABORT3D('TOVS_SETUP           ')
  ENDIF

  IF ( NSENSORS .GT. JPNSATMAX ) THEN
     WRITE(*,FMT=9132)
  9132    FORMAT(' TOVS_SETUP: Number of sensors (NSENSORS)', &
            ' is greater than maximum allowed (JPNSATMAX)')
     CALL ABORT3D('TOVS_SETUP           ')
  ENDIF

  IF ( NSENSORS .LE. 0 ) THEN
     if(mpi_myid.eq.0) WRITE(*,FMT=9133)
  9133    FORMAT(' TOVS_SETUP: Forcing call to rttov_setup to read in climatological', &
            ' profiles of humidity')
     NSENSORS  = 1
     CSATID(1)  = 'NOAA16'
     CINSTRUMENTID(1) = 'AMSUA'
  ENDIF

  !     .   1.4 Print the content of this NAMELIST
  !     .       ----------------------------------

  if(mpi_myid.eq.0) WRITE(*,FMT=9140) LDBGTOV, LEVEL1B, LNLVTOV, CRTMODL
  if(mpi_myid.eq.0) WRITE(*,FMT=9143) NSENSORS
  if(mpi_myid.eq.0) WRITE(*,FMT=9145) (CSATID(JK), JK=1,NSENSORS)
  if(mpi_myid.eq.0) WRITE(*,FMT=9146) (CINSTRUMENTID(JK), JK=1,NSENSORS)


  9140 FORMAT(/,3X,'- Parameters used for TOVS processing' &
            ,' (read in NAMTOV)'                           &
            ,/,3X,'  ----------------------------------'   &
            ,'------------------'                          &
            ,/,6X,'TOVS debug              : ',2X,L1       &
            ,/,6X,'Level 1B                : ',2X,L1       &
            ,/,6X,'Non-linear processing   : ',2X,L1       &
            ,/,6X,'Radiative transfer model: ',2X,A)
  9143 FORMAT(/,6X,"Number of sensors       : ",I3)
  9145 FORMAT(  6X,"Satellite id's          : ",10A10)
  9146 FORMAT(  6X,"Instrument id's         : ",10A10)

  if(mpi_myid.eq.0) WRITE(*,FMT=9142)
  9142 FORMAT(//,3X,"- Reading and initialization in preparation to the " &
       ,"TOVS processing",/,5X,64('-'))

  !     .   1.5 Set up platform, satellite, instrument and channel mapping
  !     .       ----------------------------------------------------------

  CALL SENSORS

  END SUBROUTINE TOVS_SETUP



  SUBROUTINE SENSORS
  !*
  !***s/r SENSORS : Initialisation of the RTTOV-10 platform, satellite
  !*                and instrument ID's. Also set burp to RTTOV-7 channel
  !*                mapping offset.
  !*    -------------------
  !**    Purpose: to verify and transfom the sensor information contained in the
  !*              NAMTOV namelist into the variables required by RTTTOV-7:
  !*              platform, satellite and instrument ID's.
  !*
  !*Variables:
  !*     i : NSENSORS      : number of sensors
  !*     i : CSATID        : satellite ID (e.g. 'NOAA15')
  !*     i : CINSTRUMENTID : instrument ID (e.g. 'AMSUA')
  !*     o : PLATFORM      : RTTOV-7 platform ID numbers (e.g. 1 for  NOAA)
  !*     o : SATELLITE     : RTTOV-7 satellite ID numbers (e.g. 15)
  !*     o : INSTRUMENT    : RTTOV-7 instrument ID numbers (e.g. 3 for AMSUA)
  !*     o : CHANOFFSET    : BURP to RTTOV-7 channel mapping offset
      IMPLICIT NONE

      INTEGER J, K, IPOS1, IPOS2
      INTEGER NUMEROSAT, IERR, KINDEX

      CHARACTER*15 TEMPOCSATID

      INTEGER NOSATLO   (MXPLATFORM)
      INTEGER NOSATHI   (MXPLATFORM)
      INTEGER NOCHANLO    (JPNSATMAX)
      INTEGER NOCHANHI    (JPNSATMAX)
      INTEGER IOFFSET1D   (JPNSATMAX)
      INTEGER IOFFSET1B   (JPNSATMAX)


      DATA NOSATLO    /      1,         8,            5,        8,  &
                             5,         2,            1,        1,  &
                             1,         1,            1,        1,  &
                             3,         1,            1,        1,  &
                             0 /

      DATA NOSATHI    /     19,        19,            7,       13,  &
                             5,         2,            1,        2,  &
                             2,         3,            1,        2,  &
                             4,         2,            1,        1,  &
                             0 /

!*                         Tables for Instruments and Channels
!*                         -----------------------------------


      DATA NOCHANLO     /           1,            1,             1,  &
                                    1,            1,             1,  &
                                    1,            1,             1,  &
                                    1,            1,             1,  &
                                    1,            1,             1,  &
                                    1,            1,             1,  &
                                    1,            1,             1,  &
                                    1,            1,             1,  &
                                    1,            1,             1,  &
                                    1,            1,             1 /

      DATA NOCHANHI     /          19,            4,             3,  &
                                   15,            5,             3,  &
                                    4,            8,             8,  &
                                    9,           24,          2378,  &
                                    4,           17,             3,  &
                                    5,         8461,             7,  &
                                    2,            8,             4,  &
                                   18,            4,             2,  &
                                    3,         1305,             1,  &
                                    1,            5,            22 /

      DATA IOFFSET1D    /           0,           20,            24,  &
                                   20,           35,             0,  &
                                    0,            0,             0,  &
                                    0,            0,             0,  &
                                    0,            0,             0,  &
                                    0,            0,             0,  &
                                    0,            3,            18,  &
                                    0,            0,             0,  &
                                    0,            0,             0,  &
                                    0,            0,             0 /

      DATA IOFFSET1B    /           0,           20,            24,  &
                                   27,           42,             0,  &
                                    0,            0,             0,  &
                                    0,            0,             0,  &
                                    0,            0,             0,  &
                                   42,            0,             0,  &
                                    0,            3,            18,  &
                                    0,            0,             0,  &
                                    0,            0,             0,  &
                                    0,            0,             0 /
!
!*    .  1.0 Go through sensors and set RTTOV-7 variables
!     .      --------------------------------------------
 100  CONTINUE

      DO J=1, NSENSORS
         PLATFORM  (J) = -1
         SATELLITE (J) = -1
         INSTRUMENT(J) = -1
         CHANOFFSET(J) = -1
      ENDDO

!*    .  1.1 Set platforms and satellites
!     .      ----------------------------
!
!** N.B.: Special cases for satellites TERRA and AQUA.
!**       For consistency with the RTTOV-7 nomenclature, rename:
!**       TERRA  to  EOS1
!**       AQUA   to  EOS2

      DO J = 1, NSENSORS
        IF     ( CSATID(J) .EQ. 'TERRA' ) THEN
           TEMPOCSATID = 'EOS1'
        ELSEIF ( CSATID(J) .EQ. 'AQUA'  ) THEN
           TEMPOCSATID = 'EOS2'
        ELSEIF ( CSATID(J) .EQ. 'NPP'  ) THEN
           TEMPOCSATID = 'NPP0'
        ELSE
           TEMPOCSATID = CSATID(J)
        ENDIF
        KINDEX = 0
        DO K = 1, MXPLATFORM
           IPOS1=LEN_TRIM(CPLATFORM(K))
           IPOS2 = INDEX(TEMPOCSATID,CPLATFORM(K)(1:IPOS1))
           IF ( IPOS2 .EQ. 1 ) THEN
             PLATFORM(J) = NOPLATFORM(K)
             KINDEX = K
           ENDIF
        ENDDO
        IF ( PLATFORM(J) .LT. 0 ) THEN
           WRITE(*,FMT=9132) TEMPOCSATID
 9132      FORMAT(' SENSORS: Satellite ',A,' not supported.')
           CALL ABORT3D('SENSORS          ')
        ELSE
           IPOS1=LEN_TRIM(CPLATFORM(KINDEX))
           IPOS2=LEN_TRIM(TEMPOCSATID)
           READ(TEMPOCSATID(IPOS1+1:IPOS2),*,IOSTAT=IERR) NUMEROSAT
           IF ( IERR .NE. 0                    .OR.  &
                NUMEROSAT .LT. NOSATLO(KINDEX) .OR.  &
                NUMEROSAT .GT. NOSATHI(KINDEX)      ) THEN
             WRITE(*,FMT=9132) TEMPOCSATID
             CALL ABORT3D('SENSORS          ')
           ELSE
             SATELLITE(J) = NUMEROSAT
           ENDIF
        ENDIF
      ENDDO

!*    .  1.2 Set instruments,
!     .      also set channel offset, which is in fact a channel mapping between
!     .      the channel number in BURP files and the channel number used in
!     .      RTTOV-7. This mapping differs for level1d and level1b burp datasets.
!     .      --------------------------------------------------------------------

      DO J = 1, NSENSORS
        KINDEX = 0
        DO K = 1, JPNSATMAX
           IPOS1=LEN_TRIM(CINSTRUMENT(K))
           IPOS2 = INDEX(CINSTRUMENTID(J),CINSTRUMENT(K)(1:IPOS1))
           IF ( IPOS2 .EQ. 1 ) THEN
             KINDEX = K
             INSTRUMENT(J) = NOINSTRUMENT(KINDEX)
             IF (LEVEL1B) THEN
                CHANOFFSET(J) = IOFFSET1B(KINDEX)
             ELSE
                CHANOFFSET(J) = IOFFSET1D(KINDEX)
             ENDIF
           ENDIF
        ENDDO
        IF ( INSTRUMENT(J) .LT. 0 ) THEN
           WRITE(*,FMT=9133) CINSTRUMENTID(J)
 9133      FORMAT(' SENSORS: INSTRUMENT ',A,' not supported.')
           CALL ABORT3D('SENSORS          ')
        ENDIF
      ENDDO

!C*    .   1.3 Print the RTTOV-7 related variables
!C     .       -----------------------------------

 130  CONTINUE
      if(mpi_myid.eq.0) WRITE(*,FMT=9140)
      if(mpi_myid.eq.0) WRITE(*,FMT=9143) NSENSORS
      if(mpi_myid.eq.0) WRITE(*,FMT=9145) (PLATFORM(J), J=1,NSENSORS)
      if(mpi_myid.eq.0) WRITE(*,FMT=9146) (SATELLITE(J), J=1,NSENSORS)
      if(mpi_myid.eq.0) WRITE(*,FMT=9147) (INSTRUMENT(J), J=1,NSENSORS)
      if(mpi_myid.eq.0) WRITE(*,FMT=9148) (CHANOFFSET(J), J=1,NSENSORS)


 9140 FORMAT(/,3X,'- SENSORS. Variables prepared for RTTOV-10:'  &
            ,/,3X,'  ----------------------------------------')

 9143 FORMAT(/,6X,"Number of sensors       : ",I3)
 9145 FORMAT(  6X,"Platform numbers        : ",10I3)
 9146 FORMAT(  6X,"Satellite numbers       : ",10I3)
 9147 FORMAT(  6X,"Instrument numbers      : ",10I3)
 9148 FORMAT(  6X,"Channel mapping offset  : ",10I3)

  END subroutine sensors


  logical function tvs_Is_idburp_tovs(idatyp)
    implicit none
    integer ,intent(in) :: idatyp

    tvs_Is_idburp_tovs=( IDATYP .EQ. 164 .OR. &
         IDATYP .EQ. 168 .OR. &
         IDATYP .EQ. 180 .OR. &
         IDATYP .EQ. 181 .OR. &
         IDATYP .EQ. 182 .OR. &
         IDATYP .EQ. 183 .OR. &
         IDATYP .EQ. 185 .OR. &
         IDATYP .EQ. 186 .OR. &
         IDATYP .EQ. 192 .OR. &
         IDATYP .EQ. 193 )

  end function tvs_Is_idburp_tovs


  logical function tvs_Is_idburp_iasi(idburp)
    implicit none
    integer ,intent(in) :: idburp

    tvs_Is_idburp_iasi = ( idburp == 186 )

  end function tvs_Is_idburp_iasi


  logical function tvs_Is_idburp_airs(idburp)
    implicit none
    integer ,intent(in) :: idburp

    tvs_Is_idburp_airs = ( idburp == 183 )

  end function tvs_Is_idburp_airs


  logical function tvs_Is_idburp_cris(idburp)
    implicit none
    integer ,intent(in) :: idburp

    tvs_Is_idburp_cris = ( idburp == 193 )

  end function tvs_Is_idburp_cris


End Module tovs_mod

