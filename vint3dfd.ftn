!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE VINT3DFD(elem_s,lobsSpaceData)
#if defined (DOC)
*
***s/r VINT3DFD  - Computation of DIRECTION AND SPEED RESIDUALS
*
*
*Author  : P. Koclas *CMC/AES  September 1999
*Revision:
*     1.0  P. Koclas CMC :  September 2000
*                 -remove quality control flag and (ff dd) component initializtions
*          JM Belanger CMDA/SMC  Jan 2001
*                   . 32 bits conversion
*
**    Purpose:  -Compute direction and speed residuals from u and
*                v residuals.
*
*
*Arguments
*
#endif
      use MathPhysConstants_mod
      use obsSpaceData_mod
      use bufr
      IMPLICIT NONE
*implicits
#include "cvcord.cdk"
*
      type(struct_obs) :: lobsSpaceData
      character(len=*), intent(in) :: elem_s
      INTEGER IUU,IVV,IFF,IDD
      INTEGER IOBS,IBEGIN,ILAST,ISTART,IEND,jwintyp
      INTEGER J,JDATA,JJOBS
      REAL*8 ZLEVU
      REAL*8 MODUL,ANG,UU,VV
      LOGICAL LLOK
c     DATA  IUU,IVV,IDD,IFF/11003,11004,11001,11002/
C-----------------------------------------------------------------------
C
      do jwintyp=1,2
      if (jwintyp .eq. 1) then
         IUU=BUFR_NEUU
         IVV=BUFR_NEVV
         IDD=BUFR_NEDD
         IFF=BUFR_NEFF
      else
         IUU=BUFR_NEUS
         IVV=BUFR_NEVS
         IDD=BUFR_NEDS
         IFF=BUFR_NEFS
      endif
      DO J = 1,NFILES
      IF ( ( NBEGINTYP(J) .GT. 0) ) THEN
         IBEGIN=NBEGINTYP(J)
          ILAST=NENDTYP(J)
C
C     .  -----------------------------
C
 100  CONTINUE
C
C     Process all data within the domain of the model
C
c           DO JDATA=IBEGIN,ILAST
c              IF ( obs_elem_i(lobsSpaceData,'VNM ',JDATA) .EQ. IFF .OR. obs_elem_i(lobsSpaceData,'VNM ',JDATA) .EQ. IDD) THEN
c                 obs_elem_r(lobsSpaceData,elem_s,JDATA)=PPMIS
c                 call obs_set_i(lobsSpaceData,'FLG ',JDATA,-1)
c              ENDIF
c           END DO
            DO JDATA=IBEGIN,ILAST
               LLOK= (obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1)
     &         .AND. (obs_elem_i(lobsSpaceData,'VNM ',JDATA) .EQ. IUU)
               IF ( LLOK ) THEN
                  IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
                  ISTART=obs_elem_i(lobsSpaceData,'RLN ',IOBS)
                  IEND=obs_elem_i(lobsSpaceData,'NLV ',IOBS) +ISTART-1
                  ZLEVU = obs_elem_r(lobsSpaceData,'PPP ',JDATA)
                  UU=obs_elem_r(lobsSpaceData,elem_s,JDATA)*obs_elem_r(lobsSpaceData,'OER ',JDATA) +
     &                 obs_elem_r(lobsSpaceData,'VAR ',JDATA)
                  DO JJOBS=ISTART,IEND
                  IF ((obs_elem_i(lobsSpaceData,'VNM ',JJOBS) .EQ. IVV)
     &            .AND.(obs_elem_r(lobsSpaceData,'PPP ',JJOBS) .EQ. ZLEVU)) THEN
                    VV=obs_elem_r(lobsSpaceData,elem_s,JJOBS)*obs_elem_r(lobsSpaceData,'OER ',JJOBS) +
     &                   obs_elem_r(lobsSpaceData,'VAR ',JJOBS)
*
*****************************************************************************
*  1-calculate angle
************************************************************************
*
                    MODUL=SQRT((UU**2)+(VV**2))
                    IF (MODUL.EQ.0.) THEN
                       ANG=0.0D0
                    ELSE
                      ANG=ATAN2(VV,UU)
                      ANG= (270.0D0 - ANG  * MPC_DEGREES_PER_RADIAN_R8 )
*
************************************************************************
*  2-Change to meteorological definition of wind direction.
************************************************************************
*
                      IF (ANG.GT.360.0D0) ANG=ANG-360.0D0
                      IF (ANG.LE.0.0D0)   ANG=ANG+360.0D0
                    ENDIF
C
                  ENDIF
                  END DO
C
************************************************************************
*                insert resduals into CMA
************************************************************************
C
                  DO JJOBS=ISTART,IEND
                     IF ((obs_elem_i(lobsSpaceData,'VNM ',JJOBS).EQ.IDD)
     &               .AND. obs_elem_r(lobsSpaceData,'PPP ',JJOBS) .EQ. ZLEVU ) THEN
                        call obs_set_r(lobsSpaceData, elem_s, JJOBS, ANG 
     &                          - obs_elem_r(lobsSpaceData,'VAR ',JJOBS)
     &                           * MPC_DEGREES_PER_RADIAN_R8)
                        IF ( obs_elem_r(lobsSpaceData,elem_s,JJOBS) .gt.  180.0d0)
     &                  call obs_set_r(lobsSpaceData, elem_s, JJOBS, 
     &                        obs_elem_r(lobsSpaceData,elem_s,JJOBS)-360.0d0)
                        IF ( obs_elem_r(lobsSpaceData,elem_s,JJOBS) .le. -180.0d0)
     &                  call obs_set_r(lobsSpaceData, elem_s, JJOBS,
     &                        obs_elem_r(lobsSpaceData,elem_s,JJOBS)+360.0d0)
                        call obs_set_r(lobsSpaceData, elem_s, JJOBS, -1.0d0*
     &                              obs_elem_r(lobsSpaceData,elem_s,JJOBS)
     &                              * MPC_RADIANS_PER_DEGREE_r8)
                        call obs_set_r(lobsSpaceData,'OER ',JJOBS,1.0d0)
                        call obs_set_i(lobsSpaceData,'ASS ',JJOBS, 1)
                        call obs_set_i(lobsSpaceData,'FLG ',JJOBS, 0)
                     ENDIF
                     IF ((obs_elem_i(lobsSpaceData,'VNM ',JJOBS).EQ.IFF)
     &               .AND. obs_elem_r(lobsSpaceData,'PPP ',JJOBS) .EQ. ZLEVU ) THEN
                        call obs_set_r(lobsSpaceData, elem_s, JJOBS, MODUL
     &                                 - obs_elem_r(lobsSpaceData,'VAR ',JJOBS))
                        call obs_set_r(lobsSpaceData,'OER ',JJOBS,1.0d0)
                        call obs_set_i(lobsSpaceData,'ASS ',JJOBS, 1)
                        call obs_set_i(lobsSpaceData,'FLG ',JJOBS, 0)
                     ENDIF
                  END DO
               ENDIF
C
            END DO
C
 300  CONTINUE
C
      ENDIF
      END DO
C--------------------------------------------------------------------
      end do
      RETURN
      END
