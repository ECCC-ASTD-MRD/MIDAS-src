#!/bin/bash

set -e

SECONDS=0

getArg () {
    set -e
    if [ $# -le 1 ]; then
        echo "ssm/publish: The option '$1' expects an argument" >&2
        exit 1
    fi
    if [[ "$2" == -* ]]; then
        echo "ssm/publish: The option '$1' expects an argument but have '$2'" >&2
        exit 1
    fi
    echo $2
} ## End of function 'getArg'

packages=
domainpath=
postinstall=
workdir=${TMPDIR}
version=

args=
while [ $# -gt 0 ]; do
    if [ "${1}" = --packages ]; then
        packages=$(getArg $1 $2)
        shift
    elif [ "${1}" = --domainpath ]; then
        domainpath=$(getArg $1 $2)
        shift
    elif [ "${1}" = --post-install ]; then
        postinstall=$(getArg $1 $2)
        shift
    elif [ "${1}" = --workdir ]; then
        workdir=$(getArg $1 $2)
        shift
    elif [ "${1}" = --version ]; then
        version=$(getArg $1 $2)
        shift
    else
        args="${args} ${1}"
    fi
    shift
done

if [ -n "${args}" ]; then
    echo "ssm/publish: You gave arguments that have not been consumed: '${args}'" >&2
    exit 1
fi

if [ -z "${packages}" ]; then
    echo "ssm/publish: You must provide a path for the packages with '--packages'" >&2
    exit 1
fi
if [ -z "${domainpath}" ]; then
    echo "ssm/publish: You must provide a domain path with '--domainpath'" >&2
    exit 1
fi
if [ -n "${version}" ]; then
    echo "ssm/publish: exporting 'POSTINSTALL_PACKAGE_VERSION=${version}"
    ## this variable me be used in the 'post-install' script of the packages which will be installed
    export POSTINSTALL_PACKAGE_VERSION=${version}
fi


if [ ! -d "$(dirname ${domainpath})" ]; then
    mkdir -pv $(dirname ${domainpath})
fi

if [ -d "${domainpath}" ]; then
    echo "The directory ${domainpath} already exists." >&2
    echo "You should erase it before continuing" >&2
    exit 1
fi

if [ -n "${postinstall}" ]; then
    if [ -f "${postinstall}" ]; then
        if [ ! -x "${postinstall}" ]; then
            echo "ssm/publish: Warning! The post-install script '${postinstall}' is not executable!" >&2
        fi
    else
        echo "ssm/publish: Warning! The post-install script '${postinstall}' is not available!" >&2
    fi
fi

if [ ! -d "${workdir}" ]; then
    echo "ssm/publish: creating the working directory ${workdir}"
    mkdir -p ${workdir}
fi
cd ${workdir}

echo "Creating the domain ${domainpath}"
ssm created -d ${domainpath}

for package in ${packages}/*.ssm; do
    ## check if the package contains a 'post-install' script
    postinstall_exists=true
    tar tf ${package} | grep -sq "/.ssm.d/post-install$" || postinstall_exists=false
    if [ "${postinstall_exists}" = true ]; then
        echo "ssm/publish: Warning! The SSM package ${package} contains a 'post-install' script !" >&2
        exit 1
    fi

    pkgname=$(basename ${package} .ssm)
    echo "Working with package ${pkgname}"

    ssminstall_args=
    if [ -n "${postinstall}" -a -f "${postinstall}" ]; then
        echo "Insert '${postinstall}' in ${pkgname}.ssm"
        ## add the post-install script
        tar zxf ${package}
        cp ${postinstall} ${pkgname}/.ssm.d/post-install
        tar czf ${pkgname}.ssm ${pkgname}
        rm -r ${pkgname}
    else
        ssminstall_args="-r $(dirname ${package})"
    fi

    ssmpublish_args=
    platform=$(echo ${pkgname} | cut -d_ -f3)
    [ "${platform}" = all ] && ssmpublish_args="-pp all"

    echo "Install package ${pkgname} in domain ${domainpath}"
    ssm install -d ${domainpath} -p ${pkgname} ${ssminstall_args}
    echo "Publish package ${pkgname} in domain ${domainpath}"
    ssm publish -d ${domainpath} -p ${pkgname} ${ssmpublish_args}
    echo "Done with package ${pkgname} in domain ${domainpath}"

    [ -f ${pkgname}.ssm ] && rm ${pkgname}.ssm
done

## Freeze the domain
ssm freezed -d ${domainpath}
## remove write permission on the domain to prevent unintended modifications or erases
chmod -R ugo-w ${domainpath}

cd
rm -rf ${workdir}

echo "ssm/publish: L'execution de ce script a pris ${SECONDS} secondes pour publier le domaine '${domainpath}'"
