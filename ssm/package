#!/bin/ksh

## Ce script sert a publier les packages SSM crees par les script 'bh-*.py'
## On se base sur la documentation presente sur le wiki
##    https://wiki.cmc.ec.gc.ca/wiki/Assimilation/SSM

set -e

SECONDS=0

getArg () {
    set -e
    if [ $# -le 1 ]; then
        echo "ssm/package: The option '$1' expects an argument" >&2
        exit 1
    fi
    if [[ "$2" == -* ]]; then
        echo "ssm/package: The option '$1' expects an argument but have '$2'" >&2
        exit 1
    fi
    echo $2
} ## End of function 'getArg'

compiled_programs=
ssmuser=
workdir=${PWD}

args=
while [ $# -gt 0 ]; do
    if [ "${1}" = --midas-abs ]; then
        midasabs=$(getArg $1 $2)
        shift
    elif [ "${1}" = --packages ]; then
        packages=$(getArg $1 $2)
        shift
    elif [ "${1}" = --user ]; then
        ssmuser=$(getArg $1 $2)
        shift
    elif [ "${1}" = --workdir ]; then
        workdir=$(getArg $1 $2)
        shift
    elif [ "${1}" = --frontend ]; then
        frontend=$(getArg $1 $2)
        shift
    elif [ "${1}" = --backend ]; then
        backend=$(getArg $1 $2)
        shift
    else
        args="${args} ${1}"
    fi
    shift
done

if [ -z "${midasabs}" ]; then
    echo "ssm/package: You must provide a path for the MIDAS programs with '--midas-abs'" >&2
    exit 1
fi
if [ -z "${packages}" ]; then
    echo "ssm/package: You must provide a path to put the SSM packages with '--packages'" >&2
    exit 1
fi
if [ -z "${frontend}" ]; then
    echo "ssm/package: You must provide a frontend machine with '--frontend'" >&2
    exit 1
fi
if [ -z "${backend}" ]; then
    echo "ssm/package: You must provide a backend machine with '--backend'" >&2
    exit 1
fi

if [ -n "${args}" ]; then
    set ${args}
fi

if [ $# -ge 1 ]; then
    BHSCRIPTS=$@
else
    BHSCRIPTS=$(/bin/ls bh-*.py)
fi

if [ -d "${packages}" ]; then
    echo "ssm/package: The destination path '${packages}' already exists!" >&2
    exit 1
else
    echo "ssm/package: Creating destination path '${packages}'"
    mkdir -p ${packages}
fi

toplevel=$(git rev-parse --show-toplevel)
MIDAS_REVISION=${MIDAS_REVISION:-$(${toplevel}/midas.version.sh)}

VARSCRIPTS_REVISION=${VARSCRIPTS_REVISION:-2.2.4}
OAVARMONITOR_REVISION=${OAVARMONITOR_REVISION:-v3}
SPLITOBS_REVISION=${SPLITOBS_REVISION:-v_7.3.4}
REUNIROBS_REVISION=${REUNIROBS_REVISION:-v6.11}
WRITESUBDOMAINS_REVISION=${WRITESUBDOMAINS_REVISION:-v2.2.9}
FINDTRIALS_REVISION=${FINDTRIALS_REVISION:-1.0}

## If MIDAS_SOURCE is not yet defined we use the git repository itself.
## If this script is run from elsewhere, then we use the path to the GitLab project
if [ -z "${MIDAS_SOURCE}" ]; then
    MIDAS_SOURCE=$(${toplevel}/midas.version.sh) || true
    if [ -z "${MIDAS_SOURCE}" ]; then
        MIDAS_SOURCE=git@gitlab.science.gc.ca:atmospheric-data-assimilation/midas.git
    fi
fi

VARSCRIPTS_SOURCE=${VARSCRIPTS_SOURCE:-git@gitlab.science.gc.ca:atmospheric-data-assimilation/oavar_scripts.git}
FINDTRIALS_SOURCE=${FINDTRIALS_SOURCE:-git@gitlab.science.gc.ca:atmospheric-data-assimilation/envar.findTrials.git}
OAVARMONITOR_SOURCE=${OAVARMONITOR_SOURCE:-git@gitlab.science.gc.ca:atmospheric-data-assimilation/oavar.monitor.git}
SPLITOBS_SOURCE=${SPLITOBS_SOURCE:-git@gitlab.science.gc.ca:atmospheric-data-assimilation/splitobs.git}
REUNIROBS_SOURCE=${REUNIROBS_SOURCE:-git@gitlab.science.gc.ca:atmospheric-data-assimilation/reunir_obs.git}
WRITESUBDOMAINS_SOURCE=${WRITESUBDOMAINS_SOURCE:-git@gitlab.science.gc.ca:atmospheric-data-assimilation/write_subdomains.git}

export BH_MAIL_RECIPIENTS=${BH_MAIL_RECIPIENTS:-ervig.lapalme@canada.ca}

## loading the BH scripts
. ssmuse-sh -x hpco/exp/bh-test/bh-1.2
export BH_PROFILE=eccc

whichPlatforms () {
    ## this function returns:
    ##    pkgname: name of the package
    ##    platforms: platforms supported for each package
    ##    BH_PULL_SOURCE_GIT_BRANCH: version of the package
    ##    BH_PULL_SOURCE: path to the git depot for this package

    set -e

    __whichPlatforms_bhscript__=${1}
    pkgname=$(basename ${__whichPlatforms_bhscript__} .py | cut -c4-)
    unset __whichPlatforms_bhscript__

    case "${pkgname}" in
	FstdWriteSubdomains|ReunirObs|SplitObs|OavarMonitor)
	    platforms="ubuntu-18.04-skylake-64 sles-15-skylake-64-xc50"
	    ;;
	midas)
	    platforms="all ubuntu-18.04-skylake-64 sles-15-skylake-64-xc50"
	    ;;
        VarScripts|FindTrials)
            platforms=all
            ;;
	*)
	    echo "ssm/package(whichPlatforms): The package '${pkgname}' n'est pas supporte." >&2
            return 1
	    ;;
    esac

    case "${pkgname}" in
	VarScripts)
	    BH_PULL_SOURCE_GIT_BRANCH=${VARSCRIPTS_REVISION}
	    BH_PULL_SOURCE=${VARSCRIPTS_SOURCE}
	    ;;
	FstdWriteSubdomains)
	    BH_PULL_SOURCE_GIT_BRANCH=${WRITESUBDOMAINS_REVISION}
	    BH_PULL_SOURCE=${WRITESUBDOMAINS_SOURCE}
	    ;;
	ReunirObs)
	    BH_PULL_SOURCE_GIT_BRANCH=${REUNIROBS_REVISION}
	    BH_PULL_SOURCE=${REUNIROBS_SOURCE}
	    ;;
	SplitObs)
	    BH_PULL_SOURCE_GIT_BRANCH=${SPLITOBS_REVISION}
	    BH_PULL_SOURCE=${SPLITOBS_SOURCE}
	    ;;
	FindTrials)
	    BH_PULL_SOURCE_GIT_BRANCH=${FINDTRIALS_REVISION}
	    BH_PULL_SOURCE=${FINDTRIALS_SOURCE}
	    ;;
	midas)
	    BH_PULL_SOURCE_GIT_BRANCH=${MIDAS_REVISION}
	    BH_PULL_SOURCE=${MIDAS_SOURCE}
	    ;;
	OavarMonitor)
	    BH_PULL_SOURCE_GIT_BRANCH=${OAVARMONITOR_REVISION}
	    BH_PULL_SOURCE=${OAVARMONITOR_SOURCE}
	    ;;
	*)
	    echo "ssm/package(whichPlatforms): The package '${pkgname}' n'est supporte." >&2
            return 1
	    ;;
    esac

} ## End of function 'whichPlatforms'

echo BHSCRIPTS=${BHSCRIPTS}
for bhscript in ${BHSCRIPTS}; do

    whichPlatforms ${bhscript}

    echo Executing the script ${bhscript} to create the package ${pkgname}.ssm
    for platform in ${platforms}; do
	ssmbuildhost=host:
	ssmhost=
	case "${platform}" in
	    all)
		compiler=
		;;
	    ubuntu-18.04-skylake-64)
		compiler=intel-19.0.3.199
		ssmhost=${frontend}
		;;
	    sles-15-skylake-64-xc50)
		compiler=PrgEnv-intel-6.0.5
		ssmhost=${backend}
		;;
	esac

	echo -n Working with ${pkgname} for platform ${platform}

	if [ -n "${compiler}" ]; then
	    echo " with compiler ${compiler}"
	    compiler_string=-${compiler}
	else
	    compiler_string=
	fi

	other_bh_args=
	if [ -n "${ssmhost}" ]; then
	    if [ "${ssmhost}" = local ]; then
		other_bh_args="${other_bh_args} --local"
	    else
		other_bh_args="${other_bh_args} --host ${ssmhost}"
	    fi
	fi

        if [ "${pkgname}" = midas ]; then
	    other_bh_args="-v BH_MIDAS_ABS=${midasabs} -v MIDAS_VERSION=${MIDAS_REVISION} -v BH_MIDAS_TOP_LEVEL_DIR=$(git rev-parse --show-toplevel) ${other_bh_args}"
        fi
	## Un package SSM ne peut contenir de caractere '_' dans le nom
	## puisque cela interfere avec la separation des plateformes.
	BH_PACKAGE_VERSION=$(echo ${BH_PULL_SOURCE_GIT_BRANCH} | sed 's/_//g')
	set -x
	./${bhscript} -w ${workdir}/bh-${pkgname}-${platform}-$$ -p ${ssmbuildhost}${platform} \
            -v BH_PACKAGE_VERSION=${BH_PACKAGE_VERSION} \
            -v BH_PULL_SOURCE_GIT_BRANCH=${BH_PULL_SOURCE_GIT_BRANCH} \
            -v BH_PULL_SOURCE=${BH_PULL_SOURCE} \
            -v BH_PACKAGE_NAMES=${pkgname}${compiler_string} \
            ${other_bh_args}
	set +x
	rm -rf ${workdir}/bh-${pkgname}-${platform}-$$

	ssmpkgname=${pkgname}${compiler_string}_${BH_PACKAGE_VERSION}_${platform}

        ## check if the package contains a 'post-install' script
        postinstall_exists=true
        tar tf ${ssmpkgname}.ssm | grep -sq "/.ssm.d/post-install$" || postinstall_exists=false
        if [ "${postinstall_exists}" = true ]; then
            echo "ssm/package: Warning! The SSM package ${PWD}/${ssmpkgname}.ssm contains a 'post-install' script !" >&2
        fi

	mv ${ssmpkgname}.ssm ${packages}
    done

done

echo "ssm/package: L'execution de ce script a pris ${SECONDS} secondes."
