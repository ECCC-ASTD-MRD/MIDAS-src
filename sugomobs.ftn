!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      subroutine sugomobs(lcolumng,lcolumnhr,lobsSpaceData)
#if defined (DOC)
*
***s/r sumgomobs
*
*     Author  : S. Pellerin ARMA/AES Nov. 1999
*     Revision:
*
**    Purpose: Fill in COLUMNG and COLUMNHR with trial profiles
*
*Arguments: COLUMNG, COLUMNHR
*
#endif
      use EarthConstants_mod
      use MathPhysConstants_mod
      use columnData_mod 
      use obsSpaceData_mod
      use gridStateVector_mod
      implicit none
#include "comlun.cdk"
#include "pardim.cdk"
#include "cvcord.cdk"
#include "comfilt.cdk"
c
      type(struct_columnData) :: lcolumng,lcolumnhr
      type(struct_obs) :: lobsSpaceData
      integer vfstlir,vezuvint,vezsint,ezdefset,ezgprm
      integer ezsetopt,ezsetval,jstep
      integer jlev,jobs,ier,iset
      integer ini, inj, iig1, iig2, iig3, iig4,ink,jvar
      integer itrlnlev
      integer idata,idatend,jdata
      character*1 clgrtyp,cltypvar
      character*8 cletiket
      real*8, allocatable, dimension(:,:) :: zvar,zvar2
      real*8, allocatable, dimension(:,:) :: zmobs_T,zmobs_M,zmobs2_M
      real*8, allocatable, dimension(:,:) :: zppobs_T,zppobs_M
      real*8, allocatable, dimension(:,:) :: zovar
      real*8, allocatable, dimension(:) :: zopart,zopart2
      real*8, allocatable :: zom_T(:,:),zom_M(:,:)
      integer ip1_pak_trl,ip1_vco_trl
      integer nlv_T,nlv_M
      integer itrlgid,iip1s(jpnflev),iip1,iip2,iip3
      integer iip1s2(jpnflev*2)
      real*8, allocatable :: zppobsg(:,:)
      integer, allocatable, dimension(:) :: idate,itime,nultrl
      integer :: newdate,nstepanltime
      integer, allocatable :: nobsgid(:)    ! (nstepobs) grid id for ezscint corresponding to stepobs bin
      integer, allocatable :: notag(:,:) ! (nobtot,nstepobs) obs tag associated to observations of each bin
      integer, allocatable :: nobs(:) ! number of headers for each stepobs bin
      integer, allocatable :: datestamplist(:)

      interface
        subroutine suobsgid(lobsSpaceData,lcolumng,nobsgid,notag,nobs)
          use columnData_mod
          use obsSpaceData_mod
          type(struct_columnData) :: lcolumng
          type(struct_obs) :: lobsSpaceData
          integer :: nobsgid(:)
          integer :: notag(:,:)
          integer :: nobs(:)
        end subroutine suobsgid
      end interface

      write(nulout,*) ' '
      write(nulout,*) '-------- ENTERING SUGOMOBS ---------'
      write(nulout,*) ' '
      write(nulout,*) 'nstepobs=',nstepobs
      call col_setNumStep(lcolumng,nstepobs)   ! from comfilt.cdk
c
      allocate(nobsgid(col_getNumStep(lcolumng)))
      allocate(notag(col_getNumCol(lcolumng),col_getNumStep(lcolumng)))
      allocate(nobs(col_getNumStep(lcolumng)))
c
      call suobsgid(lobsSpaceData,lcolumng,nobsgid,notag,nobs)
c
      allocate(datestamplist(col_getNumStep(lcolumng)))
      allocate(zppobsg(col_getNumLev(lcolumng),col_getNumCol(lcolumng)))
      allocate(zom_T(col_getNumLev(lcolumng),col_getNumCol(lcolumng)))
      allocate(zom_M(col_getNumLev(lcolumng),col_getNumCol(lcolumng)))
      allocate(zovar(1,col_getNumCol(lcolumng)))
      allocate(zopart(maxval(nobs)))
      allocate(zopart2(maxval(nobs)))
      allocate(idate(col_getNumStep(lcolumng)))
      allocate(itime(col_getNumStep(lcolumng)))
      allocate(nultrl(col_getNumStep(lcolumng)))
c
c Computing date and time of step obs for error message
c
      call getstamplist(datestamplist,col_getNumStep(lcolumng),obs_get_datestamp(lobsSpaceData))
      do jstep = 1,col_getNumStep(lcolumng)
        ier = newdate(datestamplist(jstep),idate(jstep),itime(jstep),-3)
        write(*,*) 'sugomobs: datestamplist=',jstep,datestamplist(jstep)
      enddo
c
c     Setting degree of horizontal interpolations
c
      ier = ezsetopt('INTERP_DEGREE', 'LINEAR')
c
c     Get vertical coordinate parameters from trial field !! structure
c
      nlv_M = lcolumnhr%vco%nlev_M
      nlv_T = lcolumnhr%vco%nlev_T
      write(nulout,*)'sugomobs:niv thermo:',nlv_T,' momentum',nlv_M
c      
      write(nulout,*)'sugomobs:zptophr,zprefhr,zrcoefhr ',lcolumnhr%vco%dpt_T
     &     ,lcolumnhr%vco%dprf_T,lcolumnhr%vco%drcf1
c
c     Allocation des tableaux a remplir par fillmvo
c
      call col_allocate(lcolumnhr,col_getNumCol(lcolumng))
c
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
c     Deactivate assimilate flag for obs outside of trial field grid
c     (SHOULD BE A SIMPLER WAY TO DO THIS)
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      ier = ezsetval('EXTRAP_VALUE', -999.0)
      ier = ezsetopt('EXTRAP_DEGREE', 'VALUE')
c
      nultrl(:)=0
      do jvar=1,vnl_numvarmax2D
        if(gsv_varExist(varNameList2D(jvar))) exit          
      enddo
      write(*,*) 'sugomobs: first 2d variable=',varNameList2D(jvar),jvar
      do jstep = 1,col_getNumStep(lcolumng)
        call getfldprm2(IIP1S,IIP2,IIP3,ITRLNLEV,CLETIKET,CLTYPVAR
     &       ,ITRLGID,varNameList2D(jvar),datestamplist(jstep),jpnflev
     &       ,ninmpg,nulout,ip1_pak_trl,ip1_vco_trl,ntrials
     &       ,nultrl(jstep))
        if(nobs(jstep) > 0) then
          if(itrlnlev <= 0) then
            call abort3d(nulout,'SUGOMOBS:Problem with background file')
          endif
c
          ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
          if (.not. allocated(zvar)) allocate(zvar(ini,inj))
c
          ier=vfstlir(zvar,nultrl(jstep),ini,inj,ink,
     &         datestamplist(jstep) ,cletiket,iip1s(1),iip2,iip3,
     &         cltypvar,varNameList2D(jvar))
          if(ier.lt.0)then
            call abort3d(nulout,'SUGOMOBS:Problem with background file')
          end if
c
          iset = ezdefset(nobsgid(jstep),itrlgid)
          ier = vezsint(zopart(1:nobs(jstep)),zvar,nobs(jstep),1,1,ini
     &         ,inj,1)
          do jobs = 1, nobs(jstep)
            if(zopart(jobs).eq.-999.0d0) then
              idata = obs_elem_i(lobsSpaceData,'RLN ',notag(jobs,jstep))
              idatend = obs_elem_i(lobsSpaceData,'NLV ',notag(jobs,jstep)) + idata -1
              do jdata = idata, idatend
                call obs_set_i(lobsSpaceData,'ASS ',jdata, 0)
              enddo
            endif
          enddo
        endif
      enddo
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
c     Finished deactivating assimilate flag for obs outside of trial field grid
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
c
      ier = ezsetopt('EXTRAP_DEGREE', 'MINIMUM')
c
c     reading 2D fields
c
      nultrl(:)=0
      do jvar=1,vnl_numvarmax2D
        if(.not.gsv_varExist(varNameList2D(jvar))) cycle
        do jstep = 1,col_getNumStep(lcolumng)
          if(datestamplist(jstep) == obs_get_datestamp(lobsSpaceData)) nstepanltime = jstep
          if(nultrl(jstep) == 0) then
            call getfldprm2(IIP1S,IIP2,IIP3,ITRLNLEV,CLETIKET,CLTYPVAR
     &           ,ITRLGID,varNameList2D(jvar),datestamplist(jstep),jpnflev
     &           ,ninmpg,nulout,ip1_pak_trl,ip1_vco_trl,ntrials
     &           ,nultrl(jstep))
          else
            call getfldprm(IIP1S,IIP2,IIP3,ITRLNLEV
     &           ,CLETIKET,CLTYPVAR,ITRLGID,varNameList2D(jvar)
     &           ,datestamplist(jstep),jpnflev,nultrl(jstep),nulout
     &           ,ip1_pak_trl,ip1_vco_trl)
          endif
          if(nobs(jstep) > 0) then
            if(itrlnlev <= 0) then
              write(nulout,1002) varNameList2D(jvar),idate(jstep)
     &             ,itime(jstep)
              call abort3d(nulout
     &             ,'SUGOMOBS:Problem with background file')
            endif
c
            ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
            if (.not. allocated(zvar)) allocate(zvar(ini,inj))
c
            ier=vfstlir(zvar,nultrl(jstep),ini,inj,ink,
     &           datestamplist(jstep) ,cletiket,iip1s(1),iip2,iip3,
     &           cltypvar,varNameList2D(jvar))
            if(ier.lt.0)then
              write(nulout,1001) varNameList2D(jvar),iip1s(1),idate(jstep)
     &             ,itime(jstep)

              call abort3d(nulout
     &             ,'SUGOMOBS:Problem with background file')
            end if
c
            iset = ezdefset(nobsgid(jstep),itrlgid)
            ier = vezsint(zopart(1:nobs(jstep)),zvar,nobs(jstep),1,1,ini
     &           ,inj,1)
            do jobs = 1, nobs(jstep)
              zovar(1,notag(jobs,jstep)) = zopart(jobs)
            enddo
          endif
        enddo
c
        if(varNameList2D(jvar).eq.'P0') then
          zovar(:,:)=zovar(:,:)*MPC_PA_PER_MBAR_R8
        endif
        call col_fillmvo(lcolumng ,varNameList2D(jvar),'NA',zovar)
        call col_fillmvo(lcolumnhr,varNameList2D(jvar),'NA',zovar)
c
      enddo
c
c-----Derive the pressure fields at observation points from the hybrid
C     levels(lcolumng%vco%dhyb_m), the hybrid coordinate parameters of the
C     increment analysis and the surface pressure of the trial field
c
      do jobs = 1,col_getNumCol(lcolumng)
        zovar(1,jobs) = col_getElem(lcolumng,1,jobs,'P0')
      enddo
c
      call vco_calcpres(lcolumng%vco,zppobsg,col_getNumLev(lcolumng),zovar,col_getNumCol(lcolumng))
      call col_fillmvo(lcolumng,'PP','NA',zppobsg)
      do jlev = 1,col_getNumLev(lcolumng)
        write(nulout,*) 'sugomobs: jlev, lcolumng%vco%dhyb_m(jlev), col_getPressure(LCOLUMNG,jlev,1,NA) = ',
     +    jlev,lcolumng%vco%dhyb_m(jlev),col_getPressure(LCOLUMNG,jlev,1,'NA')
        call flush(nulout)
      enddo
c
c ------- Prepare for interpolation of the 3D fields
c
      if (.not. allocated(zmobs_T))   allocate(zmobs_T(  nlv_T,col_getNumCol(lcolumng)))
      if (.not. allocated(zppobs_T))  allocate(zppobs_T( nlv_T,col_getNumCol(lcolumng)))
      if (.not. allocated(zmobs_M))   allocate(zmobs_M(  nlv_M,col_getNumCol(lcolumng)))
      if (.not. allocated(zmobs2_M))  allocate(zmobs2_M (nlv_M,col_getNumCol(lcolumng)))
      if (.not. allocated(zppobs_M))  allocate(zppobs_M( nlv_M,col_getNumCol(lcolumng)))
c
c------- Calculate profiles of pressure values at station location

      write(nulout,*) 'sugomobs:iversion= ',lcolumnhr%vco%iversion
      write(nulout,*) 'sugomobs:ikind= ',lcolumnhr%vco%ikind
      write(nulout,*) 'sugomobs:svcod= ',lcolumnhr%vco%svcod

c-------Staggered hybrid trial field 
      if (lcolumnhr%vco%iversion .eq. 5002) then 
        call calcpres_vgrid(lcolumnhr%vco%vgrid,zovar, lcolumnhr%vco%ip1_M
     &         ,nlv_M,col_getNumCol(lcolumng),nulout,zppobs_M(1,1))
        call calcpres_vgrid(lcolumnhr%vco%vgrid,zovar, lcolumnhr%vco%ip1_T
     &         ,nlv_T,col_getNumCol(lcolumng),nulout,zppobs_T(1,1))
c-------ETA  trial field 
      elseif(lcolumnhr%vco%iversion .eq. 5001) then
        call col_pointStagToUnstag(lcolumnhr)
        call calcpres_vgrid(lcolumnhr%vco%vgrid,zovar, lcolumnhr%vco%ip1_M
     &         ,lcolumnhr%vco%nlev_M,col_getNumCol(lcolumng),nulout,zppobs_M(1,1))

        call vco_calcpres(lcolumnhr%vco,zppobs_M,nlv_M,zovar,col_getNumCol(lcolumng))
        do jlev   = 1,nlv_M 
          do jobs = 1,col_getNumCol(lcolumng)
            zppobs_T(jlev,jobs) = zppobs_M(jlev,jobs) 
          enddo
        enddo
      else
        call abort3d(nulout
     &           ,'SUGOMOBS:Problem with vertical lvls in trial file')
c        
      endif
c      
c Remplir la pression sur le niveaux du trial au points d'observations
      call col_fillmvo(lcolumnhr,'PP','MM',zppobs_M)
      call col_fillmvo(lcolumnhr,'PP','TH',zppobs_T)
c      
c Variable GZ qui se trouve sur les niveaux momentum et thermodynamiques
c
      write(nulout,*)' ----- Initializing GZ ----'
c
c     Get horizontal field parameters
c
      call getfldprm(iip1s2,iip2,iip3,itrlnlev,cletiket,cltypvar
     &         ,itrlgid,'GZ',obs_get_datestamp(lobsSpaceData),jpnflev*2
     &         ,nultrl(nstepanltime),nulout,ip1_pak_trl,ip1_vco_trl)
      if(itrlnlev <= 0 ) then
        write(nulout,1002) 'GZ',idate((col_getNumStep(lcolumng)-1)/2 + 1)
     &        ,itime((col_getNumStep(lcolumng)-1)/2 + 1)
        call abort3d(nulout
     &       ,'SUGOMOBS:Problem with background file')
      endif
      write(nulout,*) ' ITRLNLEV =',itrlnlev
c
      ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
c     Lire les GZ des niveaux Momentum
c
      do jlev = 1,nlv_M
        do jstep = 1,col_getNumStep(lcolumng)
          if(nobs(jstep) > 0) then
            IIP1 = lcolumnhr%vco%ip1_M(jlev)
c
            ier=vfstlir(ZVAR,nultrl(jstep),ini,inj,ink,
     &          datestamplist(jstep) ,cletiket,iip1,-1,-1,
     &          cltypvar,'GZ')
            if(ier.lt.0)then
              write(nulout,1001) 'GZ',iip1,idate(jstep)
     &             ,itime(jstep)
              call abort3d(nulout
     &            ,'SUGOMOBS:Problem with background file')
            end if
c
            iset = ezdefset(nobsgid(jstep),itrlgid)
            ier = vezsint(zopart(1:nobs(jstep)),zvar,nobs(jstep),1,1,ini
     &            ,inj,1)
            do jobs = 1, nobs(jstep)
              zmobs_M((jlev),notag(jobs,jstep)) = zopart(jobs)
            enddo
          endif
        enddo
      enddo
c
          write(nulout,*) 'sugomobs:GZ_M*10.*rg '
          do jlev = 1,nlv_M
            write(nulout,*) 'GZ,',jlev
     &           ,zPPOBS_M(jlev,1),zmobs_M(jlev,1)*10.*rg
          enddo
      zmobs_M(:,:)=zmobs_M(:,:)*10.0d0*RG
      call col_fillmvo(lcolumnhr,'GZ','MM',zmobs_M)
c
c     remplir aussi columnhr_gz avec le GZ momentum (Needed for background check!)
      call col_fillmvo(lcolumnhr,'GZ','NA',zmobs_M)
c
c     Lire les GZ des niveaux Thermodynamique
c
      do jlev = 1, nlv_T
        do jstep = 1,col_getNumStep(lcolumng)
          if(nobs(jstep) > 0) then
            IIP1 = lcolumnhr%vco%ip1_T(jlev)
c
            ier=vfstlir(ZVAR,nultrl(jstep),ini,inj,ink,
     &          datestamplist(jstep) ,cletiket,iip1,-1,-1,
     &          cltypvar,'GZ')
            if(ier.lt.0)then
              write(nulout,1001) 'GZ',iip1,idate(jstep)
     &             ,itime(jstep)
              call abort3d(nulout
     &            ,'SUGOMOBS:Problem with background file')
            end if
c
            iset = ezdefset(nobsgid(jstep),itrlgid)
            ier = vezsint(zopart(1:nobs(jstep)),zvar,nobs(jstep),1,1,ini
     &            ,inj,1)
            do jobs = 1, nobs(jstep)
              zmobs_T(jlev,notag(jobs,jstep)) = zopart(jobs) 
            enddo
          endif
        enddo
      enddo
c
c     remplir gomobsgzhr_T
          write(nulout,*) 'sugomobs:GZ_TH (*10.*rg)'
          do jlev = 1,nlv_T
            write(nulout,*)'GZ,',jlev
     &           ,zPPOBS_T(jlev,1),zmobs_T(jlev,1)*10.*rg
          enddo
      zmobs_T(:,:)=zmobs_T(:,:)*10.0d0*RG
      call col_fillmvo(lcolumnhr,'GZ','TH',zmobs_T)
c
c Now all of the other 3D variables
c
      do jvar=1, vnl_numvarmax3D
        if(.not.gsv_varExist(varNameList3D(jvar))) cycle

        select case ( varNameList3D(jvar) )
c
c Variables sur les niveaux momentum
c
        case ('UU')
          write(nulout,*)' '
          write(nulout,*)' ----- Initializing UU and VV  ----'
          write(nulout,*)' '
          call flush(nulout)
c
          call getfldprm(iip1s,iip2,iip3,itrlnlev,cletiket,cltypvar
     &         ,itrlgid,varNameList3D(jvar),obs_get_datestamp(lobsSpaceData),jpnflev
     &         ,nultrl(nstepanltime),nulout,ip1_pak_trl,ip1_vco_trl)
          if(itrlnlev <= 0 .or. itrlnlev /= nlv_M ) then
            write(nulout,1002) varNameList3D(jvar),idate((col_getNumStep(lcolumng)-1)/2 + 1)
     &           ,itime((col_getNumStep(lcolumng)-1)/2 + 1)
            call abort3d(nulout
     &           ,'SUGOMOBS:Problem with background file')
          endif
          write(nulout,*) ' ITRLNLEV =',itrlnlev,' nlv_M ',nlv_M
          ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
c loop through levels of UU,VV
c
          if (.not. allocated(zvar2)) allocate(zvar2(ini,inj))
          call tmg_start(27,'XHR2XY')
          do jlev = 1,nlv_M
            IIP1=lcolumnhr%vco%ip1_M(jlev)
            do jstep = 1,col_getNumStep(lcolumng)
              if(nobs(jstep) > 0) then
                iset = ezdefset(nobsgid(jstep),itrlgid)
c
                ier=vfstlir(zvar,nultrl(jstep),INI,INJ,INK,
     &               datestamplist(jstep),cletiket,iip1,-1,-1,
     &               cltypvar,'UU')
                if(ier.lt.0)then
                  write(nulout,1001) 'UU',iip1,idate(jstep)
     &                 ,itime(jstep)
                  call abort3d(nulout
     &                 ,'SUGOMOBS:Problem with background file')
                end if
c
                zvar2 = 0.d0
                ier = vezuvint(zopart(1:nobs(jstep))
     &               ,zopart2(1:nobs(jstep)),zvar,zvar2,nobs(jstep)
     &               ,ini*inj)
                do jobs = 1, nobs(jstep)
                  zmobs_M(jlev,notag(jobs,jstep)) = zopart(jobs)
                  zmobs2_M(jlev,notag(jobs,jstep)) = zopart2(jobs)
                enddo
c
                ier=vfstlir(zvar2,nultrl(jstep),INI,INJ,INK,
     &               datestamplist(jstep) ,cletiket,iip1,-1,-1,
     &               cltypvar,'VV')
                if(ier.lt.0)then
                  write(nulout,1001) 'VV',iip1,idate(jstep)
     &                 ,itime(jstep)
                  call abort3d(nulout
     &                 ,'SUGOMOBS:Problem with background file')
                endif
c
                zvar = 0.d0
                ier = vezuvint(zopart(1:nobs(jstep))
     &               ,zopart2(1:nobs(jstep)),zvar,zvar2,nobs(jstep)
     &               ,ini*inj)
c
                do jobs = 1, nobs(jstep)
                  zmobs_M(jlev,notag(jobs,jstep)) = zmobs_M(jlev
     &                 ,notag(jobs,jstep)) + zopart(jobs)
                  zmobs2_M(jlev,notag(jobs,jstep)) = zmobs2_M(jlev
     &                 ,notag(jobs,jstep)) + zopart2(jobs)
                enddo
              endif
            enddo
          enddo
c         
          call tmg_start(29,'VINTPROF')
c
          call vintprof(zom_M,zppobsg,col_getNumLev(lcolumng),zmobs_M,zppobs_M,nlv_M,col_getNumCol(lcolumng))
          zom_M(:,:)=zom_M(:,:)*MPC_M_PER_S__PER__KNOT_R8
          call col_fillmvo(lcolumng,'UU','NA',zom_M)
c
          call vintprof(zom_M,zppobsg,col_getNumLev(lcolumng),zmobs2_M,zppobs_M,nlv_M,col_getNumCol(lcolumng))
          zom_M(:,:)=zom_M(:,:)*MPC_M_PER_S__PER__KNOT_R8
          call col_fillmvo(lcolumng,'VV','NA',zom_M)
c
c  Remplir dans un vecteur surdimentionne en repetant le dernier niveau
          write(nulout,*) 'sugomobs: UU ,nlev= ',nlv_M
          do jlev = 1,nlv_M
            write(nulout,*) varNameList3D(jvar),jvar,jlev
     &           ,zPPOBS_M(jlev,1),zmobs_M(jlev,1)
          enddo
          write(nulout,*) 'sugomobs: VV ,nlev= ',nlv_M
          do jlev = 1,nlv_M
            write(nulout,*) varNameList3D(jvar),jvar,jlev
     &           ,zPPOBS_M(jlev,1),zmobs2_M(jlev,1)
          enddo
ccc dbug out
          zmobs_M(:,:)=zmobs_M(:,:)*MPC_M_PER_S__PER__KNOT_R8
          call col_fillmvo(lcolumnhr,'UU','MM',zmobs_M)
          zmobs2_M(:,:)=zmobs2_M(:,:)*MPC_M_PER_S__PER__KNOT_R8
          call col_fillmvo(lcolumnhr,'VV','MM',zmobs2_M)
c
          call tmg_stop(29)
c          
c Variable sur les niveaux thermodynamiques
c
        case ('TT','HU')
          write(nulout,*)' '
          write(nulout,*)' ----- Initializing ',varNameList3D(jvar),' ----'
          write(nulout,*)' '
          call flush(nulout)
c
          call getfldprm(iip1s,iip2,iip3,itrlnlev,cletiket,cltypvar
     &         ,itrlgid,varNameList3D(jvar),obs_get_datestamp(lobsSpaceData),jpnflev
     &         ,nultrl(nstepanltime),nulout,ip1_pak_trl,ip1_vco_trl)
          if(itrlnlev <= 0 .or. itrlnlev /= nlv_T) then
            write(nulout,1002) varNameList3D(jvar),idate((col_getNumStep(lcolumng)-1)/2 + 1)
     &           ,itime((col_getNumStep(lcolumng)-1)/2 + 1)
            call abort3d(nulout
     &          ,'SUGOMOBS:Problem with background file')
          endif
          write(nulout,*) ' ITRLNLEV =',itrlnlev,' nlv_T ',nlv_T
c
          ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
c loop through levels of field jvar
c
c Reading 3D fields
c
          call tmg_start(27,'XHR2XY')
          do jlev = 1,nlv_T
            IIP1=lcolumnhr%vco%ip1_T(jlev)
            do jstep = 1,col_getNumStep(lcolumng)
              if(nobs(jstep) > 0) then
                iset = ezdefset(nobsgid(jstep),itrlgid)
                ier=vfstlir(zvar,nultrl(jstep),INI,INJ,INK,
     &                datestamplist(jstep) ,cletiket,iip1,-1,-1,
     &                cltypvar,varNameList3D(jvar))
                if(ier.lt.0)then
                  write(nulout,1001) varNameList3D(jvar),iip1,idate(jstep)
     &                 ,itime(jstep)
                  call abort3d(nulout
     &                 ,'SUGOMOBS:Problem with background file')
                end if
c
                  ier = vezsint(zopart(1:nobs(jstep)),zvar,nobs(jstep),1
     &               ,1,ini,inj,1)
                do jobs = 1, nobs(jstep)
                  zmobs_T(jlev,notag(jobs,jstep)) =zopart(jobs)
                enddo
              endif
            enddo
          enddo
          call tmg_stop(27)
c
          call vintprof(zom_T,zppobsg,col_getNumLev(lcolumng),zmobs_T,zppobs_T,nlv_T,col_getNumCol(lcolumng))
c
          call tmg_start(30,'FILLMVO')
          if(varNameList3D(jvar).eq.'TT') then
            zom_T(:,:)=zom_T(:,:)+MPC_K_C_DEGREE_OFFSET_R8
            zmobs_T(:,:)=zmobs_T(:,:)+MPC_K_C_DEGREE_OFFSET_R8
          elseif(varNameList3D(jvar).eq.'HU') then
            do jobs=1,col_getNumCol(lcolumng)
              do jlev=1,col_getNumLev(lcolumng)
                zom_T(jlev,jobs)=log(max(zom_T(jlev,jobs),rhumin))
              enddo
              do jlev=1,nlv_T
                zmobs_T(jlev,jobs)=log(max(zmobs_T(jlev,jobs),rhumin))
              enddo
            enddo
          endif
          call col_fillmvo(lcolumng ,varNameList3D(jvar),'NA',zom_T)
          call col_fillmvo(lcolumnhr,varNameList3D(jvar),'NA',zmobs_T)
          call tmg_stop(30)
c
        endselect 
      enddo
c
c Initialisation of TLM operators
c
      call subasic_obs(lcolumng)
c
c Using T, q and PS to compute GZ for columng
c
      do jobs = 1, col_getNumCol(lcolumng)
        call col_setMountain(lcolumng ,jobs,col_getMountain(lcolumnhr,jobs))
      enddo
      call tt2phi(lcolumng)
c
c Using T, q and PS to compute GZ for columnhr
c
      if(lcolumnhr%vco%iversion .eq. 5001 ) then  ! only in non-staggered mode
        call tt2phi(lcolumnhr)
      endif
c
      deallocate(datestamplist)
      deallocate(nobsgid)
      deallocate(notag)
      deallocate(nobs)
      deallocate(zppobsg)
      deallocate(zom_T)
      deallocate(zom_M)
      deallocate(zovar)
      deallocate(zvar,zvar2,zmobs_T)
      deallocate(zmobs_M,zmobs2_M)
      deallocate(zppobs_T,zppobs_M)
      deallocate(zopart,zopart2)
      deallocate(nultrl)
      deallocate(idate)
      deallocate(itime)
c
      write(nulout,*) ' '
      write(nulout,*) '-------- Leaving SUGOMOBS ---------'
      write(nulout,*) ' '
 1001 format(1x,'SUGOMOBS: Problem finding variable',1x,a4,1x,'at level'
     &     ,i10,1x,', on',1x,i8,1x,'at',1x,i8.8,1x,'HHMMSSss')
 1002 format(1x,'SUGOMOBS: Problem finding variable',1x,a4,1x
     &     ,', on',1x,i8,1x,'at',1x,i8.8,1x,'HHMMSSss')
c
      return
      end
