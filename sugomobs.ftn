!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      subroutine sugomobs(lcolumng,lcolumnhr,lobsSpaceData)
#if defined (DOC)
*
***s/r sumgomobs
*
*     Author  : S. Pellerin ARMA/AES Nov. 1999
*     Revision:
*
**    Purpose: Fill in COLUMNG and COLUMNHR with trial profiles
*
*Arguments: COLUMNG, COLUMNHR
*
#endif
      use EarthConstants_mod
      use MathPhysConstants_mod
      use columnData_mod 
      use obsSpaceData_mod
      use gridStateVector_mod
      use vGrid_Descriptors , only:vgrid_descriptor,vgd_levels,VGD_OK
      implicit none
#include "comlun.cdk"
#include "pardim.cdk"
#include "cvcord.cdk"
#include "comfilt.cdk"
c
      type(struct_columnData) :: lcolumng,lcolumnhr
      type(struct_obs) :: lobsSpaceData
      type(struct_vco), pointer :: vco_anl, vco_trl
      integer fstlir,vezuvint2,vezsint2,ezdefset,ezgprm,fnom,fstouv,fstfrm
      integer ezsetopt,ezsetval,gdll,gdxyfll,vezgdef
      integer jlev,jobs,ier,iset,jstep,jgrid,numgrids
      integer ini, inj, iig1, iig2, iig3, iig4,ink,jvar
      integer itrlnlev
      integer idata,idatend,jdata
      character*1 clgrtyp
      character*2 cltypvar
      character*12 cletiket
      real*4, allocatable, dimension(:,:) :: zvar,zvar2
      real*4, allocatable, dimension(:,:,:) :: zvar3d
      real*8, allocatable, dimension(:,:) :: zmobs_T,zmobs_M,zmobs2_M
      real*8, allocatable, dimension(:,:) :: zppobs_T,zppobs_M
      real*8, allocatable, dimension(:,:) :: zovar
      real*8, allocatable, dimension(:) :: zopart,zopart2
      real*8, allocatable :: zom_T(:,:),zom_M(:,:)
      integer ip1_pak_trl,ip1_vco_trl
      integer nlv_T,nlv_M
      integer itrlgid,iip1s(jpnflev),iip1,iip2,iip3
      integer iip1s2(jpnflev*2)
      real*8, allocatable :: zppobsg(:,:)
      integer, allocatable, dimension(:) :: idate,itime
      integer :: newdate,nstepanltime
      integer, allocatable :: nobsgid(:,:)    ! (nstepobs) grid id for ezscint corresponding to stepobs bin
      integer, allocatable :: notag(:,:,:) ! (nobtot,nstepobs) obs tag associated to observations of each bin
      integer, allocatable :: nobs(:,:) ! number of headers for each stepobs bin
      integer, allocatable :: datestamplist(:)
      real :: lat_r4,lon_r4,xpos_r4,ypos_r4
      character(len=2) :: flnum
      character(len=128) :: trialfile
      integer, allocatable :: ninmpg_yinyan(:,:),nultrl(:,:)
      logical :: trialExists
      real*8  :: zig1,zig2,zig3,zig4,stepObsIndex
      real*8, allocatable, dimension(:) ::  dlatfld, dlonfld
      integer :: ig1obs,ig2obs,ig3obs,ig4obs
c   variables added to call vgd_levels
      integer status
      real*8, dimension(:,:,:), pointer :: pobsm => null()


      write(nulout,*) ' '
      write(nulout,*) '-------- ENTERING SUGOMOBS ---------'
      write(nulout,*) ' '
      write(nulout,*) 'nstepobs=',nstepobs
      call col_setNumStep(lcolumng,nstepobs)   ! from comfilt.cdk
c
      vco_anl => col_getVco(lcolumng)
      vco_trl => col_getVco(lcolumnhr)
c
      allocate(nobsgid(col_getNumStep(lcolumng),2))
      allocate(notag(col_getNumCol(lcolumng),col_getNumStep(lcolumng),2))
      allocate(nobs(col_getNumStep(lcolumng),2))
c
      allocate(datestamplist(col_getNumStep(lcolumng)))
      allocate(zppobsg(col_getNumLev(lcolumng),col_getNumCol(lcolumng)))
      allocate(zom_T(col_getNumLev(lcolumng),col_getNumCol(lcolumng)))
      allocate(zom_M(col_getNumLev(lcolumng),col_getNumCol(lcolumng)))
      allocate(zovar(1,col_getNumCol(lcolumng)))
      allocate(idate(col_getNumStep(lcolumng)))
      allocate(itime(col_getNumStep(lcolumng)))
      allocate(nultrl(col_getNumStep(lcolumng),2))
      allocate(ninmpg_yinyan(col_getNumStep(lcolumng),2))
      allocate(dlatfld(obs_numheader(lobsSpaceData)))
      allocate(dlonfld(obs_numheader(lobsSpaceData)))
c
c Either open separate Yin and Yan trial files or global trial files
c
      trialfile='./trlm_01_yin'
      inquire(file=trialfile,exist=trialExists)
      if(trialExists) then
        numgrids=2
      else
        numgrids=1
      endif
      write(*,*) 'sugomobs: Number of input grids=',numgrids 
c
      ninmpg_yinyan(:,:)=0
      do jgrid=1,numgrids
        ntrials=0 
        jstep=1
        do 
          write(flnum,'(I2.2)') jstep
          if(numgrids.eq.1) then
             trialfile='./trlm_'//flnum
          else
            if(jgrid.eq.1) then
              trialfile='./trlm_'//flnum//'_yin'
            else 
              trialfile='./trlm_'//flnum//'_yan'
            endif
          endif
          inquire(file=trialfile,exist=trialExists)
          if(trialExists) then
            ntrials=ntrials+1
            ier=fnom(ninmpg_yinyan(ntrials,jgrid),trialfile,'RND+OLD+R/O',0)
            write(*,*) 'ITRIAL - File :', trialfile
            write(*,*) ' opened as unit file ',ninmpg_yinyan(ntrials,jgrid)
            ier =  fstouv(ninmpg_yinyan(ntrials,jgrid),'RND+OLD')
          else if ( (.not. trialExists) .and. ntrials >0 ) then
            exit  
          else if ( (.not. trialExists) .and. ntrials == 0 ) then
            call abort3d(nulout,'SUFILNAM:NO TRIAL FILE')
          endif 
          jstep=jstep+1
        enddo
      enddo ! jgrid
c
c Computing date and time of step obs for error message
c
      call getstamplist(datestamplist,col_getNumStep(lcolumng),obs_get_datestamp(lobsSpaceData))
      do jstep = 1,col_getNumStep(lcolumng)
        ier = newdate(datestamplist(jstep),idate(jstep),itime(jstep),-3)
        write(*,*) 'sugomobs: datestamplist=',jstep,datestamplist(jstep)
      enddo
c
c     Setting degree of horizontal interpolations
c
      ier = ezsetopt('INTERP_DEGREE', 'LINEAR')
c
c     Get vertical coordinate parameters from trial field !! structure
c
      nlv_M = vco_trl%nlev_M
      nlv_T = vco_trl%nlev_T
      write(nulout,*)'sugomobs:niv thermo:',nlv_T,' momentum',nlv_M
c      
      write(nulout,*)'sugomobs:zptophr,zprefhr,zrcoefhr ',vco_trl%dpt_T
     &     ,vco_trl%dprf_T,vco_trl%drcf1
c
c     Allocation des tableaux a remplir par fillmvo
c
      call col_allocate(lcolumnhr,col_getNumCol(lcolumng))
c
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
c     The following code replaces suobsgid, and works for YIN-YAN
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      nobs(:,:) = 0
      nultrl(:,:)=0

      do jvar=1,vnl_numvarmax2D
        if(gsv_varExist(varNameList2D(jvar))) exit          
      enddo
      write(*,*) 'sugomobs: first 2d variable=',varNameList2D(jvar),jvar
      do jgrid = 1,numgrids
        do jstep = 1,col_getNumStep(lcolumng)
          call getfldprm2(IIP1S,IIP2,IIP3,ITRLNLEV,CLETIKET,CLTYPVAR
     &       ,ITRLGID,varNameList2D(jvar),datestamplist(jstep),jpnflev
     &       ,ninmpg_yinyan(:,jgrid),nulout,ip1_pak_trl,ip1_vco_trl,ntrials
     &       ,nultrl(jstep,jgrid))
          if(itrlnlev <= 0) then
            call abort3d(nulout,'SUGOMOBS:Problem with background file')
          endif
          ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)

          dlatfld(:)=0.0d0
          dlonfld(:)=0.0d0

          do jobs=1, obs_numheader(lobsSpaceData)

            call getStepObsIndex(stepObsIndex,obs_get_datestamp(lobsSpaceData),
     &                           obs_elem_i(lobsSpaceData,'DAT ',jobs),
     &                           obs_elem_i(lobsSpaceData,'ETM ',jobs),nstepobs)

            ! check if obs is outside of assimilation window when jstep = 1
            if(jstep.eq.1 .and. 
     &        (stepobsIndex.lt.1.0 .or. stepObsIndex.gt.real(nstepobs,8)) ) then
              write(*,*) 'sugomobs: Observation time outside assimilation window: ',
     &            obs_elem_i(lobsSpaceData,'DAT ',jobs),obs_elem_i(lobsSpaceData,'ETM ',jobs)

              ! put the obs in the first time bin (it has to go somewhere!)
              stepObsIndex=1.0

              ! flag it as out of time domain and turn off its assimilation flag
              idata = obs_elem_i(lobsSpaceData,'RLN ',jobs)
              idatend = obs_elem_i(lobsSpacedata,'NLV ',jobs) + idata -1
              do jdata = idata, idatend
                call obs_set_i(lobsSpaceData,'ASS ',JDATA, 0)
              enddo
              call obs_set_i(lobsSpaceData,'ST1 ',jobs, 
     &          ibset( obs_elem_i(lobsSpaceData,'ST1 ',jobs), 05))
            endif

            if(nint(stepObsIndex).eq.jstep) then

              lat_r4=real(obs_elem_r(lobsSpaceData,'LAT ',jobs))
              lon_r4=real(obs_elem_r(lobsSpaceData,'LON ',jobs))
              if(lon_r4.lt.0) lon_r4 = lon_r4 + 2*MPC_PI_R4
              if(lon_r4.ge.2.*MPC_PI_R4) lon_r4 =lon_r4 - 2*MPC_PI_R4
              lat_r4=lat_r4*MPC_DEGREES_PER_RADIAN_R4
              lon_r4=lon_r4*MPC_DEGREES_PER_RADIAN_R4
              ier=gdxyfll(itrlgid, xpos_r4, ypos_r4, lat_r4, lon_r4, 1)

              if(xpos_r4.ge.1.0 .and. xpos_r4.le.real(ini) .and.
     +           ypos_r4.ge.1.0 .and. ypos_r4.le.real(inj)) then
 
                nobs(jstep,jgrid) = nobs(jstep,jgrid) + 1

                dlatfld(nobs(jstep,jgrid)) = obs_elem_r(lobsSpaceData,'LAT ',jobs)
                dlonfld(nobs(jstep,jgrid)) = obs_elem_r(lobsSpaceData,'LON ',jobs)
                notag(nobs(jstep,jgrid),jstep,jgrid) = jobs

                if(dlonfld(nobs(jstep,jgrid)).lt.0)
     &               dlonfld(nobs(jstep,jgrid)) = dlonfld(nobs(jstep,jgrid)) +
     &               2*MPC_PI_R8
                if(dlonfld(nobs(jstep,jgrid)).ge.2.*MPC_PI_R8)
     &               dlonfld(nobs(jstep,jgrid)) =dlonfld(nobs(jstep,jgrid)) -
     &               2*MPC_PI_R8
                dlatfld(nobs(jstep,jgrid))=dlatfld(nobs(jstep,jgrid))*MPC_DEGREES_PER_RADIAN_R8
                dlonfld(nobs(jstep,jgrid))=dlonfld(nobs(jstep,jgrid))*MPC_DEGREES_PER_RADIAN_R8
              endif
            endif
          enddo ! jobs

          zig1 = 0.0D0
          zig2 = 0.0D0
          zig3 = 1.0D0
          zig4 = 1.0D0
          call vcxgaig('L',ig1obs,ig2obs,ig3obs,ig4obs,zig1,zig2,zig3,zig4)

          if (nobs(jstep,jgrid).gt.0) then
            nobsgid(jstep,jgrid) = vezgdef(nobs(jstep,jgrid),1,'Y','L',ig1obs,ig2obs,
     &           ig3obs,ig4obs,dlonfld(1:nobs(jstep,jgrid)),dlatfld(1:nobs(jstep,jgrid)))
          else
            nobsgid(jstep,jgrid) = -999
          endif

        enddo ! jstep
      enddo ! jgrid

      if(numgrids.eq.2) then
        write(*,*) 'sugomobs: nobs for yin=',nobs(:,1)
        write(*,*) 'sugomobs: nobs for yan=',nobs(:,2)
        write(*,*) 'sugomobs: nobsgid for yin=',nobsgid(:,1)
        write(*,*) 'sugomobs: nobsgid for yan=',nobsgid(:,2)
      endif

c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
c     Finished code that replaces suobsgid and works for YIN-YAN
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
c
      allocate(zopart(maxval(nobs)))
      allocate(zopart2(maxval(nobs)))

c
c     reading 2D fields
c
      call tmg_start(27,'XHR2XY')
      do jvar=1,vnl_numvarmax2D
        if(.not.gsv_varExist(varNameList2D(jvar))) cycle
        do jgrid = 1,numgrids
        do jstep = 1,col_getNumStep(lcolumng)
          if(datestamplist(jstep) == obs_get_datestamp(lobsSpaceData)) nstepanltime = jstep
          call getfldprm(IIP1S,IIP2,IIP3,ITRLNLEV
     &           ,CLETIKET,CLTYPVAR,ITRLGID,varNameList2D(jvar)
     &           ,datestamplist(jstep),jpnflev,nultrl(jstep,jgrid),nulout
     &           ,ip1_pak_trl,ip1_vco_trl)
          if(nobs(jstep,jgrid) > 0) then
            if(itrlnlev <= 0) then
              write(nulout,1002) varNameList2D(jvar),idate(jstep)
     &             ,itime(jstep)
              call abort3d(nulout
     &             ,'SUGOMOBS:Problem with background file')
            endif
c
            ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
            if (.not. allocated(zvar)) allocate(zvar(ini,inj))
c
            call tmg_start(7,'FSTLIR')
            ier=fstlir(zvar,nultrl(jstep,jgrid),ini,inj,ink,
     &           datestamplist(jstep) ,cletiket,iip1s(1),iip2,iip3,
     &           cltypvar,varNameList2D(jvar))
            call tmg_stop(7)
            if(ier.lt.0)then
              write(nulout,1001) varNameList2D(jvar),iip1s(1),idate(jstep)
     &             ,itime(jstep)

              call abort3d(nulout
     &             ,'SUGOMOBS:Problem with background file')
            end if
c
            call tmg_start(8,'EZSCINT_INIT')
            iset = ezdefset(nobsgid(jstep,jgrid),itrlgid)
            call tmg_stop(8)
            call tmg_start(9,'EZSCINT_INTRP')
            ier = vezsint2(zopart(1:nobs(jstep,jgrid)),zvar,nobs(jstep,jgrid),1,1,ini
     &           ,inj,1)
            call tmg_stop(9)
            do jobs = 1, nobs(jstep,jgrid)
              zovar(1,notag(jobs,jstep,jgrid)) = zopart(jobs)
            enddo
          endif
        enddo
        enddo ! jgrid
c
        if(varNameList2D(jvar).eq.'P0') then
          zovar(:,:)=zovar(:,:)*MPC_PA_PER_MBAR_R8
        endif
        call col_fillmvo(lcolumng ,varNameList2D(jvar),'NA',zovar)
        call col_fillmvo(lcolumnhr,varNameList2D(jvar),'NA',zovar)
c
      enddo
      call tmg_stop(27)
c
c-----Derive the pressure fields at observation points from the hybrid
C     levels(vco_anl%dhyb_m), the hybrid coordinate parameters of the
C     increment analysis and the surface pressure of the trial field
c
      do jobs = 1,col_getNumCol(lcolumng)
        zovar(1,jobs) = col_getElem(lcolumng,1,jobs,'P0')
      enddo
c
      if (associated(pobsm))  deallocate(pobsm)
      
      status=vgd_levels(vco_anl%vgrid,ip1_list=vco_anl%ip1_M,levels=pobsm,
     &                sfc_field=zovar,in_log=.false.)      
      if(status.ne.VGD_OK)then
         write(nulout,*) 'ERROR with vgd_levels for desired levels '
         call exit(1)
      endif
c
      zppobsg = transpose(pobsm(1,:,:))
c
      call col_fillmvo(lcolumng,'PP','NA',zppobsg)
      do jlev = 1,col_getNumLev(lcolumng)
        write(nulout,*) 'sugomobs: jlev, vco_anl%dhyb_m(jlev), col_getPressure(LCOLUMNG,jlev,1,NA) = ',
     +    jlev,vco_anl%dhyb_m(jlev),col_getPressure(LCOLUMNG,jlev,1,'NA')
        call flush(nulout)
      enddo
c
c ------- Prepare for interpolation of the 3D fields
c
      if (.not. allocated(zmobs_T))   allocate(zmobs_T(  nlv_T,col_getNumCol(lcolumng)))
      if (.not. allocated(zppobs_T))  allocate(zppobs_T( nlv_T,col_getNumCol(lcolumng)))
      if (.not. allocated(zmobs_M))   allocate(zmobs_M(  nlv_M,col_getNumCol(lcolumng)))
      if (.not. allocated(zmobs2_M))  allocate(zmobs2_M (nlv_M,col_getNumCol(lcolumng)))
      if (.not. allocated(zppobs_M))  allocate(zppobs_M( nlv_M,col_getNumCol(lcolumng)))
c
c------- Calculate profiles of pressure values at station location

      write(nulout,*) 'sugomobs:iversion= ',vco_trl%iversion
      write(nulout,*) 'sugomobs:ikind= ',vco_trl%ikind
      write(nulout,*) 'sugomobs:svcod= ',vco_trl%svcod

c-------Staggered hybrid trial field 
      if (vco_trl%iversion .eq. 5002) then 
c------  Compute Pressure fields at desired levels----------
         if (associated(pobsm))  deallocate(pobsm)
         status=vgd_levels(vco_trl%vgrid,ip1_list=vco_trl%ip1_M,
     &                     levels=pobsm,sfc_field=zovar,in_log=.false.)
c
         if(status.ne.VGD_OK)then
            write(nulout,*) 'ERROR with vgd_levels for desired levels '
            call exit(1)
         endif
c
         zppobs_M = transpose(pobsm(1,:,:))
c
         if (associated(pobsm))  deallocate(pobsm)
         status=vgd_levels(vco_trl%vgrid,ip1_list=vco_trl%ip1_T,
     &                     levels=pobsm,sfc_field=zovar,in_log=.false.)
c
         if(status.ne.VGD_OK)then
             write(nulout,*) 'ERROR with vgd_levels for desired levels '
             call exit(1)
         endif
c
         zppobs_T = transpose(pobsm(1,:,:))
c
c-------ETA  trial field 
      elseif(vco_trl%iversion .eq. 5001) then
        call col_pointStagToUnstag(lcolumnhr)
        call vco_calcpres(vco_trl,zppobs_M,nlv_M,zovar,col_getNumCol(lcolumng))
        do jlev   = 1,nlv_M 
          do jobs = 1,col_getNumCol(lcolumng)
            zppobs_T(jlev,jobs) = zppobs_M(jlev,jobs) 
          enddo
        enddo
      else
        call abort3d(nulout
     &           ,'SUGOMOBS:Problem with vertical lvls in trial file')
c        
      endif
c      
c Remplir la pression sur le niveaux du trial au points d'observations
      call col_fillmvo(lcolumnhr,'PP','MM',zppobs_M)
      call col_fillmvo(lcolumnhr,'PP','TH',zppobs_T)
c      
c Variable GZ qui se trouve sur les niveaux momentum et thermodynamiques
c
      write(nulout,*)' ----- Initializing GZ ----'
      do jgrid=1,numgrids
c
c     Get horizontal field parameters
c
      call getfldprm(iip1s2,iip2,iip3,itrlnlev,cletiket,cltypvar
     &         ,itrlgid,'GZ  ',obs_get_datestamp(lobsSpaceData),jpnflev*2
     &         ,nultrl(nstepanltime,jgrid),nulout,ip1_pak_trl,ip1_vco_trl)
      if(itrlnlev <= 0 ) then
        write(nulout,1002) 'GZ  ',idate((col_getNumStep(lcolumng)-1)/2 + 1)
     &        ,itime((col_getNumStep(lcolumng)-1)/2 + 1)
        call abort3d(nulout
     &       ,'SUGOMOBS:Problem with background file')
      endif
      write(nulout,*) ' ITRLNLEV =',itrlnlev
c
      ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
c     Lire les GZ des niveaux Momentum
c
      call tmg_start(27,'XHR2XY')
      allocate(zvar3d(ini,inj,col_getNumStep(lcolumng)))
      do jlev = 1,nlv_M
        IIP1 = vco_trl%ip1_M(jlev)
        call tmg_start(7,'FSTLIR')
!$OMP PARALLEL DO PRIVATE(jstep,ier,zvar)
        do jstep = 1,col_getNumStep(lcolumng)
          if(nobs(jstep,jgrid) > 0) then
            ier=fstlir(ZVAR,nultrl(jstep,jgrid),ini,inj,ink,
     &          datestamplist(jstep) ,cletiket,iip1,-1,-1,
     &          cltypvar,'GZ  ')
            zvar3d(:,:,jstep)=zvar(:,:)
            if(ier.lt.0)then
              write(nulout,1001) 'GZ  ',iip1,idate(jstep)
     &             ,itime(jstep)
              call abort3d(nulout
     &            ,'SUGOMOBS:Problem with background file')
            end if
          endif
        enddo
!$OMP END PARALLEL DO
        call tmg_stop(7)
c
        do jstep = 1,col_getNumStep(lcolumng)
          if(nobs(jstep,jgrid) > 0) then
            zvar(:,:)=zvar3d(:,:,jstep)
            call tmg_start(8,'EZSCINT_INIT')
            iset = ezdefset(nobsgid(jstep,jgrid),itrlgid)
            call tmg_stop(8)
            call tmg_start(9,'EZSCINT_INTRP')
            ier = vezsint2(zopart(1:nobs(jstep,jgrid)),zvar,nobs(jstep,jgrid),1,1,ini
     &            ,inj,1)
            call tmg_stop(9)
            do jobs = 1, nobs(jstep,jgrid)
              zmobs_M((jlev),notag(jobs,jstep,jgrid)) = zopart(jobs)
            enddo
          endif
        enddo
      enddo
      deallocate(zvar3d)
c
c     Lire les GZ des niveaux Thermodynamique
c
      allocate(zvar3d(ini,inj,col_getNumStep(lcolumng)))
      do jlev = 1, nlv_T
        IIP1 = vco_trl%ip1_T(jlev)
        call tmg_start(7,'FSTLIR')
!$OMP PARALLEL DO PRIVATE(jstep,ier,zvar)
        do jstep = 1,col_getNumStep(lcolumng)
          if(nobs(jstep,jgrid) > 0) then
            ier=fstlir(ZVAR,nultrl(jstep,jgrid),ini,inj,ink,
     &          datestamplist(jstep) ,cletiket,iip1,-1,-1,
     &          cltypvar,'GZ  ')
            zvar3d(:,:,jstep)=zvar(:,:)
            if(ier.lt.0)then
              write(nulout,1001) 'GZ  ',iip1,idate(jstep)
     &             ,itime(jstep)
              call abort3d(nulout
     &            ,'SUGOMOBS:Problem with background file')
            end if
          endif
        enddo
!$OMP END PARALLEL DO
        call tmg_stop(7)
c
        do jstep = 1,col_getNumStep(lcolumng)
          if(nobs(jstep,jgrid) > 0) then
            zvar(:,:)=zvar3d(:,:,jstep)
            call tmg_start(8,'EZSCINT_INIT')
            iset = ezdefset(nobsgid(jstep,jgrid),itrlgid)
            call tmg_stop(8)
            call tmg_start(9,'EZSCINT_INTRP')
            ier = vezsint2(zopart(1:nobs(jstep,jgrid)),zvar,nobs(jstep,jgrid),1,1,ini
     &            ,inj,1)
            call tmg_stop(9)
            do jobs = 1, nobs(jstep,jgrid)
              zmobs_T(jlev,notag(jobs,jstep,jgrid)) = zopart(jobs) 
            enddo
          endif
        enddo
      enddo
      deallocate(zvar3d)
      call tmg_stop(27)
      enddo ! jgrid
c
          write(nulout,*) 'sugomobs:GZ_M*10.*rg '
          do jlev = 1,nlv_M
            write(nulout,*) 'GZ,',jlev
     &           ,zPPOBS_M(jlev,1),zmobs_M(jlev,1)*10.*rg
          enddo
      zmobs_M(:,:)=zmobs_M(:,:)*10.0d0*RG
      call col_fillmvo(lcolumnhr,'GZ  ','MM',zmobs_M)
c
c     remplir aussi columnhr_gz avec le GZ momentum (Needed for background check!)
      call col_fillmvo(lcolumnhr,'GZ  ','NA',zmobs_M)

          write(nulout,*) 'sugomobs:GZ_TH (*10.*rg)'
          do jlev = 1,nlv_T
            write(nulout,*)'GZ,',jlev
     &           ,zPPOBS_T(jlev,1),zmobs_T(jlev,1)*10.*rg
          enddo
      zmobs_T(:,:)=zmobs_T(:,:)*10.0d0*RG
      call col_fillmvo(lcolumnhr,'GZ  ','TH',zmobs_T)
c
c Now all of the other 3D variables
c
      do jvar=1, vnl_numvarmax3D
        if(.not.gsv_varExist(varNameList3D(jvar))) cycle

        select case ( varNameList3D(jvar) )
c
c Variables sur les niveaux momentum
c
        case ('UU')
          write(nulout,*)' '
          write(nulout,*)' ----- Initializing UU and VV  ----'
          write(nulout,*)' '
          call flush(nulout)
c
          do jgrid = 1,numgrids

          call getfldprm(iip1s,iip2,iip3,itrlnlev,cletiket,cltypvar
     &         ,itrlgid,varNameList3D(jvar),obs_get_datestamp(lobsSpaceData),jpnflev
     &         ,nultrl(nstepanltime,jgrid),nulout,ip1_pak_trl,ip1_vco_trl)
          if(itrlnlev <= 0 .or. itrlnlev /= nlv_M ) then
            write(nulout,1002) varNameList3D(jvar),idate((col_getNumStep(lcolumng)-1)/2 + 1)
     &           ,itime((col_getNumStep(lcolumng)-1)/2 + 1)
            call abort3d(nulout
     &           ,'SUGOMOBS:Problem with background file')
          endif
          write(nulout,*) ' ITRLNLEV =',itrlnlev,' nlv_M ',nlv_M
          ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
c loop through levels of UU,VV
c
          if (.not. allocated(zvar2)) allocate(zvar2(ini,inj))
          allocate(zvar3d(ini,inj,col_getNumStep(lcolumng)))
          call tmg_start(27,'XHR2XY')
          do jlev = 1,nlv_M
            IIP1=vco_trl%ip1_M(jlev)
            call tmg_start(7,'FSTLIR')
!$OMP PARALLEL DO PRIVATE(jstep,ier,zvar)
            do jstep = 1,col_getNumStep(lcolumng)
              if(nobs(jstep,jgrid) > 0) then
                ier=fstlir(zvar,nultrl(jstep,jgrid),INI,INJ,INK,
     &               datestamplist(jstep),cletiket,iip1,-1,-1,
     &               cltypvar,'UU  ')
                zvar3d(:,:,jstep)=zvar(:,:)
                if(ier.lt.0)then
                  write(nulout,1001) 'UU  ',iip1,idate(jstep)
     &                 ,itime(jstep)
                  call abort3d(nulout
     &                 ,'SUGOMOBS:Problem with background file')
                end if
              endif
            enddo
!$OMP END PARALLEL DO
            call tmg_stop(7)
c
            do jstep = 1,col_getNumStep(lcolumng)
              if(nobs(jstep,jgrid) > 0) then
                zvar(:,:)=zvar3d(:,:,jstep)
                zvar2 = 0.d0
                call tmg_start(8,'EZSCINT_INIT')
                iset = ezdefset(nobsgid(jstep,jgrid),itrlgid)
                call tmg_stop(8)
                call tmg_start(9,'EZSCINT_INTRP')
                ier = vezuvint2(zopart(1:nobs(jstep,jgrid))
     &               ,zopart2(1:nobs(jstep,jgrid)),zvar,zvar2,nobs(jstep,jgrid)
     &               ,ini*inj)
                call tmg_stop(9)
                do jobs = 1, nobs(jstep,jgrid)
                  zmobs_M(jlev,notag(jobs,jstep,jgrid)) = zopart(jobs)
                  zmobs2_M(jlev,notag(jobs,jstep,jgrid)) = zopart2(jobs)
                enddo
              endif
            enddo
c
            call tmg_start(7,'FSTLIR')
!$OMP PARALLEL DO PRIVATE(jstep,ier,zvar2)
            do jstep = 1,col_getNumStep(lcolumng)
              if(nobs(jstep,jgrid) > 0) then
                ier=fstlir(zvar2,nultrl(jstep,jgrid),INI,INJ,INK,
     &               datestamplist(jstep) ,cletiket,iip1,-1,-1,
     &               cltypvar,'VV  ')
                zvar3d(:,:,jstep)=zvar2(:,:)
                if(ier.lt.0)then
                  write(nulout,1001) 'VV  ',iip1,idate(jstep)
     &                 ,itime(jstep)
                  call abort3d(nulout
     &                 ,'SUGOMOBS:Problem with background file')
                endif
              endif
            enddo
!$OMP END PARALLEL DO
            call tmg_stop(7)
c
            do jstep = 1,col_getNumStep(lcolumng)
              if(nobs(jstep,jgrid) > 0) then
                zvar2(:,:)=zvar3d(:,:,jstep)
                zvar = 0.d0
                call tmg_start(8,'EZSCINT_INIT')
                iset = ezdefset(nobsgid(jstep,jgrid),itrlgid)
                call tmg_stop(8)
                call tmg_start(9,'EZSCINT_INTRP')
                ier = vezuvint2(zopart(1:nobs(jstep,jgrid))
     &               ,zopart2(1:nobs(jstep,jgrid)),zvar,zvar2,nobs(jstep,jgrid)
     &               ,ini*inj)
                call tmg_stop(9)
c
                do jobs = 1, nobs(jstep,jgrid)
                  zmobs_M(jlev,notag(jobs,jstep,jgrid)) = zmobs_M(jlev
     &                 ,notag(jobs,jstep,jgrid)) + zopart(jobs)
                  zmobs2_M(jlev,notag(jobs,jstep,jgrid)) = zmobs2_M(jlev
     &                 ,notag(jobs,jstep,jgrid)) + zopart2(jobs)
                enddo
              endif
            enddo
          enddo
          call tmg_stop(27)
          deallocate(zvar3d)

          enddo ! jgrid
c         
          call tmg_start(29,'VINTPROF')
c
          call vintprof(zom_M,zppobsg,col_getNumLev(lcolumng),zmobs_M,zppobs_M,nlv_M,col_getNumCol(lcolumng))
          zom_M(:,:)=zom_M(:,:)*MPC_M_PER_S_PER_KNOT_R8
          call col_fillmvo(lcolumng,'UU  ','NA',zom_M)
c
          call vintprof(zom_M,zppobsg,col_getNumLev(lcolumng),zmobs2_M,zppobs_M,nlv_M,col_getNumCol(lcolumng))
          zom_M(:,:)=zom_M(:,:)*MPC_M_PER_S_PER_KNOT_R8
          call col_fillmvo(lcolumng,'VV  ','NA',zom_M)
c
c  Remplir dans un vecteur surdimentionne en repetant le dernier niveau
          write(nulout,*) 'sugomobs: UU ,nlev= ',nlv_M
          do jlev = 1,nlv_M
            write(nulout,*) varNameList3D(jvar),jvar,jlev
     &           ,zPPOBS_M(jlev,1),zmobs_M(jlev,1)
          enddo
          write(nulout,*) 'sugomobs: VV ,nlev= ',nlv_M
          do jlev = 1,nlv_M
            write(nulout,*) varNameList3D(jvar),jvar,jlev
     &           ,zPPOBS_M(jlev,1),zmobs2_M(jlev,1)
          enddo
ccc dbug out
          zmobs_M(:,:)=zmobs_M(:,:)*MPC_M_PER_S_PER_KNOT_R8
          call col_fillmvo(lcolumnhr,'UU  ','MM',zmobs_M)
          zmobs2_M(:,:)=zmobs2_M(:,:)*MPC_M_PER_S_PER_KNOT_R8
          call col_fillmvo(lcolumnhr,'VV  ','MM',zmobs2_M)
c
          call tmg_stop(29)
c          
c Variable sur les niveaux thermodynamiques
c
        case ('TT','HU')
          write(nulout,*)' '
          write(nulout,*)' ----- Initializing ',varNameList3D(jvar),' ----'
          write(nulout,*)' '
          call flush(nulout)
c
          do jgrid = 1,numgrids

          call getfldprm(iip1s,iip2,iip3,itrlnlev,cletiket,cltypvar
     &         ,itrlgid,varNameList3D(jvar),obs_get_datestamp(lobsSpaceData),jpnflev
     &         ,nultrl(nstepanltime,jgrid),nulout,ip1_pak_trl,ip1_vco_trl)
          if(itrlnlev <= 0 .or. itrlnlev /= nlv_T) then
            write(nulout,1002) varNameList3D(jvar),idate((col_getNumStep(lcolumng)-1)/2 + 1)
     &           ,itime((col_getNumStep(lcolumng)-1)/2 + 1)
            call abort3d(nulout
     &          ,'SUGOMOBS:Problem with background file')
          endif
          write(nulout,*) ' ITRLNLEV =',itrlnlev,' nlv_T ',nlv_T
c
          ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
c loop through levels of field jvar
c
c Reading 3D fields
c
          allocate(zvar3d(ini,inj,col_getNumStep(lcolumng)))
          call tmg_start(27,'XHR2XY')
          do jlev = 1,nlv_T
            IIP1=vco_trl%ip1_T(jlev)
            call tmg_start(7,'FSTLIR')
!$OMP PARALLEL DO PRIVATE(jstep,ier,zvar)
            do jstep = 1,col_getNumStep(lcolumng)
              if(nobs(jstep,jgrid) > 0) then
                ier=fstlir(zvar,nultrl(jstep,jgrid),INI,INJ,INK,
     &                datestamplist(jstep) ,cletiket,iip1,-1,-1,
     &                cltypvar,varNameList3D(jvar))
                zvar3d(:,:,jstep)=zvar(:,:)
                if(ier.lt.0)then
                  write(nulout,1001) varNameList3D(jvar),iip1,idate(jstep)
     &                 ,itime(jstep)
                  call abort3d(nulout
     &                 ,'SUGOMOBS:Problem with background file')
                end if
              endif
            enddo
!$OMP END PARALLEL DO
            call tmg_stop(7)
c
            do jstep = 1,col_getNumStep(lcolumng)
              if(nobs(jstep,jgrid) > 0) then
                zvar(:,:)=zvar3d(:,:,jstep)
                call tmg_start(8,'EZSCINT_INIT')
                iset = ezdefset(nobsgid(jstep,jgrid),itrlgid)
                call tmg_stop(8)
                call tmg_start(9,'EZSCINT_INTRP')
                ier = vezsint2(zopart(1:nobs(jstep,jgrid)),zvar,nobs(jstep,jgrid),1
     &             ,1,ini,inj,1)
                call tmg_stop(9)
                do jobs = 1, nobs(jstep,jgrid)
                  zmobs_T(jlev,notag(jobs,jstep,jgrid)) =zopart(jobs)
                enddo
              endif
            enddo
          enddo
          call tmg_stop(27)
          deallocate(zvar3d)

          enddo ! jgrid
c
          call vintprof(zom_T,zppobsg,col_getNumLev(lcolumng),zmobs_T,zppobs_T,nlv_T,col_getNumCol(lcolumng))
c
          call tmg_start(30,'FILLMVO')
          if(varNameList3D(jvar).eq.'TT') then
            zom_T(:,:)=zom_T(:,:)+MPC_K_C_DEGREE_OFFSET_R8
            zmobs_T(:,:)=zmobs_T(:,:)+MPC_K_C_DEGREE_OFFSET_R8
          elseif(varNameList3D(jvar).eq.'HU') then
            do jobs=1,col_getNumCol(lcolumng)
              do jlev=1,col_getNumLev(lcolumng)
                zom_T(jlev,jobs)=log(max(zom_T(jlev,jobs),rhumin))
              enddo
              do jlev=1,nlv_T
                zmobs_T(jlev,jobs)=log(max(zmobs_T(jlev,jobs),rhumin))
              enddo
            enddo
          endif
          call col_fillmvo(lcolumng ,varNameList3D(jvar),'NA',zom_T)
          call col_fillmvo(lcolumnhr,varNameList3D(jvar),'NA',zmobs_T)
          call tmg_stop(30)
c
        endselect 
      enddo
c
c Initialisation of TLM operators
c
      call tmg_start(17,'subasic_obs')
      call subasic_obs(lcolumng)
      call tmg_stop(17)
c
c Using T, q and PS to compute GZ for columng
c
      call tmg_start(18,'tt2phi_g')
      do jobs = 1, col_getNumCol(lcolumng)
        call col_setMountain(lcolumng ,jobs,col_getMountain(lcolumnhr,jobs))
      enddo
      call tt2phi(lcolumng)
      call tmg_stop(18)
c
c Using T, q and PS to compute GZ for columnhr
c
      call tmg_start(19,'tt2phi_hr')
      if(vco_trl%iversion .eq. 5001 ) then  ! only in non-staggered mode
        call tt2phi(lcolumnhr)
      endif
      call tmg_stop(19)
c
c Close the files
c
      do jgrid=1,numgrids
        do jstep=1,ntrials
          ier=fstfrm(ninmpg_yinyan(jstep,jgrid))  
        enddo
      enddo
c
      deallocate(datestamplist)
      deallocate(nobsgid)
      deallocate(notag)
      deallocate(nobs)
      deallocate(zppobsg)
      deallocate(zom_T)
      deallocate(zom_M)
      deallocate(zovar)
      deallocate(zvar,zvar2,zmobs_T)
      deallocate(zmobs_M,zmobs2_M)
      deallocate(zppobs_T,zppobs_M)
      deallocate(zopart,zopart2)
      deallocate(nultrl)
      deallocate(ninmpg_yinyan)
      deallocate(idate)
      deallocate(itime)
      deallocate(dlatfld)
      deallocate(dlonfld)
c
      write(nulout,*) ' '
      write(nulout,*) '-------- Leaving SUGOMOBS ---------'
      write(nulout,*) ' '
 1001 format(1x,'SUGOMOBS: Problem finding variable',1x,a4,1x,'at level'
     &     ,i10,1x,', on',1x,i8,1x,'at',1x,i8.8,1x,'HHMMSSss')
 1002 format(1x,'SUGOMOBS: Problem finding variable',1x,a4,1x
     &     ,', on',1x,i8,1x,'at',1x,i8.8,1x,'HHMMSSss')
c
      return
      end
