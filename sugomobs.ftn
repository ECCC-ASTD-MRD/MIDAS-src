!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      subroutine sugomobs(lcolumng,lcolumnhr)
#if defined (DOC)
*
***s/r sumgomobs
*
*     Author  : S. Pellerin ARMA/AES Nov. 1999
*     Revision:
*
**    Purpose: Fill in COLUMNG and COLUMNHR with trial profiles
*
*Arguments: COLUMNG, COLUMNHR
*
#endif
      use MathPhysConstants_mod
      use modfgat, only : nstamplist, nobsgid, nobs, notag, nstepobs
      use stag_shared, only : tg_vco_trl,tg_vgrid_trl
      use columnData_mod 
      implicit none
#include "comlun.cdk"
#include "pardim.cdk"
#include "comgem.cdk"
#include "comgdpar.cdk"
#include "cvcord.cdk"
c
      type(struct_columnData) :: lcolumng,lcolumnhr
      integer vfstlir,vezuvint,vezsint,ezdefset,ezgprm
      integer ezsetopt,jstep
      integer jlev,jobs,ier,iset
      integer ini, inj, iig1, iig2, iig3, iig4,ink,jvar
      integer itrlnlev,istep
      character*1 clgrtyp,cltypvar
      character*8 cletiket
      real*8, allocatable, dimension(:,:) :: zvar,zvar2,zmobs,zmobs2
      real*8, allocatable, dimension(:,:) :: zmobs_T,zmobs_M,zmobs2_M
      real*8, allocatable, dimension(:,:) :: zmobs_MT,zmobs2_MT
      real*8, allocatable, dimension(:,:) :: zppobs_MT,zppobs_T,zppobs_M
      real*8 zovar(1)
      real*8, allocatable, dimension(:) :: zopart,zopart2,zhybhr
      real*8 zom_T(1),zom_M(1)
      integer ip1_pak_trl,ip1_vco_trl
      real*8  zptophr,zrcoefhr,zprefhr
      integer nlv_T,nlv_M
c
      integer itrlgid,iip1s(jpnflev),iip1,iip2,iip3
      integer iip1s2(jpnflev*2)
c
      integer, allocatable, dimension(:) :: idate,itime,nultrl
      integer :: newdate,nstepanltime

      pointer (pzovar,zovar)
      pointer (pzom_T,zom_T),(pzom_M,zom_M)
c
      write(nulout,*) ' '
      write(nulout,*) '-------- ENTERING SUGOMOBS ---------'
      write(nulout,*) ' '
c
      call hpalloc(pzom_T,max(lcolumng%nlev*lcolumng%nobtot,1),ier,8)
      call hpalloc(pzom_M,max(lcolumng%nlev*lcolumng%nobtot,1),ier,8)
      call hpalloc(pzovar,max(lcolumng%nobtot,1),ier,8)
      allocate(zopart(maxval(nobs)))
      allocate(zopart2(maxval(nobs)))
      allocate(idate(nstepobs))
      allocate(itime(nstepobs))
      allocate(nultrl(nstepobs))
c
c Computing date and time of step obs for error message
c
      do jstep = 1,nstepobs
        ier = newdate(nstamplist(jstep),idate(jstep),itime(jstep),-3)
        itime(jstep) = itime(jstep)
      enddo
c
c     Setting degree of horizontal interpolations
c
      ier = ezsetopt('INTERP_DEGREE', 'LINEAR')
c
c------- fill lcolumng with zero
c
      do jlev=1,lcolumng%nkgdimo
        do jobs=1,lcolumng%nobtot
          lcolumng%all(jlev,jobs) = 0.
        enddo
      enddo
c
c     Get vertical coordinate parameters from trial field !! structure
c
      nlv_M = tg_vco_trl%ink_M
      nlv_T = tg_vco_trl%ink_T
      write(nulout,*)'sugomobs:niv thermo:',nlv_T,' momentum',nlv_M
c      
      zptophr = tg_vco_trl%dpt_T
      zprefhr = tg_vco_trl%dprf_T
      zrcoefhr= tg_vco_trl%drcf2
      write(nulout,*)'sugomobs:zptophr,zprefhr,zrcoefhr ',zptophr
     &     ,zprefhr,zrcoefhr
c
c     Allocation des tableaux a remplir par fillmvo
c
      istep = nlv_T
      lcolumnhr%nlev = nlv_T
      lcolumnhr%nlev_T = nlv_T
      lcolumnhr%nlev_M = nlv_M
      call col_allocate(lcolumnhr,istep,lcolumng%nobtot)
      call col_zero(lcolumnhr)
c
c     reading 2D fields
c
      nultrl=0
      do jvar=1, nfstvar2d
        do jstep = 1,nstepobs
          if(nstamplist(jstep) == nbrpstamp) nstepanltime = jstep
          if(nultrl(jstep) == 0) then
            call getfldprm2(IIP1S,IIP2,IIP3,ITRLNLEV,CLETIKET,CLTYPVAR
     &           ,ITRLGID,cfstvar2d(jvar),nstamplist(jstep),jpnflev
     &           ,ninmpg,nulout,ip1_pak_trl,ip1_vco_trl,ntrials
     &           ,nultrl(jstep))
          else
            call getfldprm(IIP1S,IIP2,IIP3,ITRLNLEV
     &           ,CLETIKET,CLTYPVAR,ITRLGID,cfstvar2d(jvar)
     &           ,nstamplist(jstep),jpnflev,nultrl(jstep),nulout
     &           ,ip1_pak_trl,ip1_vco_trl)
          endif
          if(nobs(jstep) > 0) then
            if(itrlnlev <= 0) then
              write(nulout,1002) cfstvar2d(jvar),idate(jstep)
     &             ,itime(jstep)
              call abort3d(nulout
     &             ,'SUGOMOBS:Problem with background file')
            endif
c
            ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
            if (.not. allocated(zvar)) allocate(zvar(ini,inj))
c
            ier=vfstlir(zvar,nultrl(jstep),ini,inj,ink,
     &           nstamplist(jstep) ,cletiket,iip1s(1),iip2,iip3,
     &           cltypvar,cfstvar2d(jvar))
            if(ier.lt.0)then
              write(nulout,1001) cfstvar2d(jvar),iip1s(1),idate(jstep)
     &             ,itime(jstep)

              call abort3d(nulout
     &             ,'SUGOMOBS:Problem with background file')
            end if
c
            iset = ezdefset(nobsgid(jstep),itrlgid)
            ier = vezsint(zopart(1:nobs(jstep)),zvar,nobs(jstep),1,1,ini
     &           ,inj,1)
            do jobs = 1, nobs(jstep)
              zovar(notag(jobs,jstep)) = zopart(jobs)
            enddo
          endif
        enddo
c
        call col_fillmvo(lcolumng,cfstvar2d(jvar),'NA',zovar,1,lcolumng%nobtot)
c
      enddo
c
c-----Derive the pressure fields at observation points from the hybrid
C     levels(vhybinc), the hybrid coordinate parameters of the
C     increment analysis and the surface pressure of the trial field
c
      do jobs = 1,lcolumng%nobtot
        zovar(jobs) = lcolumng%ps(1,jobs)
      enddo
c
      call calcpres(lcolumng%rppobs(1,1),vhybinc,lcolumng%nlev,zovar,rptopinc
     &     ,rprefinc,rcoefinc,lcolumng%nobtot)
      do jlev = 1,lcolumng%nlev
        write(nulout,*) 'sugomobs: jlev, vhybinc(jlev), LCOLUMNG%RPPOBS(jlev,1) = ',
     +    jlev,vhybinc(jlev),LCOLUMNG%RPPOBS(jlev,1)
        call flush(nulout)
      enddo
c
c ------- Prepare for interpolation of the 3D fields
c
      if (.not. allocated(zmobs))     allocate(zmobs(    nlv_T,lcolumng%nobtot))
      if (.not. allocated(zmobs_T))   allocate(zmobs_T(  nlv_T,lcolumng%nobtot))
      if (.not. allocated(zmobs_MT))  allocate(zmobs_MT( nlv_T,lcolumng%nobtot))
      if (.not. allocated(zmobs2_MT)) allocate(zmobs2_MT(nlv_T,lcolumng%nobtot))
      if (.not. allocated(zppobs_MT)) allocate(zppobs_MT(nlv_T,lcolumng%nobtot))
      if (.not. allocated(zppobs_T))  allocate(zppobs_T( nlv_T,lcolumng%nobtot))
      if (.not. allocated(zmobs_M))   allocate(zmobs_M(  nlv_M,lcolumng%nobtot))
      if (.not. allocated(zmobs2_M))  allocate(zmobs2_M (nlv_M,lcolumng%nobtot))
      if (.not. allocated(zppobs_M))  allocate(zppobs_M( nlv_M,lcolumng%nobtot))
      if (.not. allocated(zhybhr))    allocate(zhybhr(   nlv_T))
c
c------- Calculate profiles of pressure values at station location

      write(nulout,*) 'sugomobs:iversion= ',tg_vco_trl%iversion
      write(nulout,*) 'sugomobs:ikind= ',tg_vco_trl%ikind
      write(nulout,*) 'sugomobs:svcod= ',tg_vco_trl%svcod

c-------Staggered hybrid trial field 
      if (tg_vco_trl%iversion .eq. 5002) then 
        call calcpres_vgrid(tg_vgrid_trl,zovar, tg_vco_trl%ip1_M
     &         ,nlv_M,lcolumng%nobtot,nulout,zppobs_M(1,1))
        call calcpres_vgrid(tg_vgrid_trl,zovar, tg_vco_trl%ip1_T
     &         ,nlv_T,lcolumng%nobtot,nulout,zppobs_T(1,1))
c       Copier le niveaux du bas momentum dans le dernier niveau du
c       vecteur surdimentionne
cnwa        zppobs_M(nlv_T,:) = zppobs_M(nlv_M,:)
c-------ETA  trial field 
      elseif(tg_vco_trl%iversion .eq. 5001) then
        call col_pointStagToUnstag(lcolumnhr)
        call calcpres_vgrid(tg_vgrid_trl,zovar, tg_vco_trl%ip1_M
     &         ,tg_vco_trl%ink_M,lcolumng%nobtot,nulout,zppobs_M(1,1))

        zptophr = tg_vco_trl%dpt_M
        zprefhr = tg_vco_trl%dprf_M
        zrcoefhr= tg_vco_trl%drcf2
        itrlnlev = tg_vco_trl%ink_M
        zhybhr = tg_vco_trl%dhyb_M
        do jlev = 1,nlv_M
          zhybhr(jlev) = tg_vco_trl%dhyb_M(jlev)
        enddo
        call calcpres(zppobs_M,zhybhr,nlv_M,zovar,zptophr
     &         ,zprefhr,zrcoefhr,lcolumng%nobtot)
        do jlev   = 1,nlv_M 
          do jobs = 1,lcolumng%nobtot
            zppobs_T(jlev,jobs) = zppobs_M(jlev,jobs) 
          enddo
        enddo
      else
        call abort3d(nulout
     &           ,'SUGOMOBS:Problem with vertical lvls in trial file')
c        
      endif
c      
c  Remplir dans un vecteur surdimentionne en repetant le dernier niveau
      do jlev = 1, nlv_M
        do jobs = 1, lcolumng%nobtot
          zppobs_MT(jlev,jobs) = zppobs_M(jlev,jobs)
        enddo
      enddo
      do jobs = 1, lcolumng%nobtot
        zppobs_MT(nlv_T,jobs) = zppobs_M(nlv_M,jobs)
      enddo
c
c Remplir la pression sur le niveaux du trial au points d'observations
      call col_fillmvo(lcolumnhr,'PP','MM',zppobs_MT,nlv_T,lcolumng%nobtot)
      call col_fillmvo(lcolumnhr,'PP','TH',zppobs_T,nlv_T,lcolumng%nobtot)
      call col_fillmvo(lcolumnhr,'PP','NA',zppobs_T,nlv_T,lcolumng%nobtot)
c      
c Remplir les valeur eta ou zeta des niveaux du trial
c     surdimension (de 1) vecteur des niveaux momentum
      do jlev = 1,nlv_M
        zhybhr(jlev) = tg_vco_trl%dhyb_M(jlev)
      enddo
c     On copie le dernier niveau pour le niveau suplementaire
      zhybhr(nlv_T) = zhybhr(nlv_M)
c
      call col_fillmvo(lcolumnhr,'HY','MM',zhybhr,nlv_T,1)
      call col_fillmvo(lcolumnhr,'HY','NA',zhybhr,nlv_T,1)
c
      do jlev = 1,nlv_T
        zhybhr(jlev) = tg_vco_trl%dhyb_T(jlev)
      enddo
      call col_fillmvo(lcolumnhr,'HY','TH',zhybhr,nlv_T,1)
c
c Variable GZ qui se trouve sur les niveaux momentum et thermodynamiques
c
      write(nulout,*)' ----- Initializing GZ ----'
c
c     Get horizontal field parameters
c
      call getfldprm(iip1s2,iip2,iip3,itrlnlev,cletiket,cltypvar
     &         ,itrlgid,'GZ',nbrpstamp,jpnflev*2
     &         ,nultrl(nstepanltime),nulout,ip1_pak_trl,ip1_vco_trl)
      if(itrlnlev <= 0 ) then
        write(nulout,1002) 'GZ',idate((nstepobs-1)/2 + 1)
     &        ,itime((nstepobs-1)/2 + 1)
        call abort3d(nulout
     &       ,'SUGOMOBS:Problem with background file')
      endif
      write(nulout,*) ' ITRLNLEV =',itrlnlev
c
      ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
c     Lire les GZ des niveaux Momentum
c
      do jlev = 1,nlv_M
        do jstep = 1,nstepobs
          if(nobs(jstep) > 0) then
            IIP1 = tg_vco_trl%ip1_M(jlev)
c
            ier=vfstlir(ZVAR,nultrl(jstep),ini,inj,ink,
     &          nstamplist(jstep) ,cletiket,iip1,-1,-1,
     &          cltypvar,'GZ')
            if(ier.lt.0)then
              write(nulout,1001) 'GZ',iip1,idate(jstep)
     &             ,itime(jstep)
              call abort3d(nulout
     &            ,'SUGOMOBS:Problem with background file')
            end if
c
            iset = ezdefset(nobsgid(jstep),itrlgid)
            ier = vezsint(zopart(1:nobs(jstep)),zvar,nobs(jstep),1,1,ini
     &            ,inj,1)
            do jobs = 1, nobs(jstep)
              zmobs((jlev),notag(jobs,jstep)) = zopart(jobs)
c             Copier le niveaux du bas momentum dans le dernier niveau du
c             vecteur surdimentionne
              if ( jlev == nlv_M ) 
     &        zmobs(nlv_T,notag(jobs,jstep)) = zmobs(jlev,notag(jobs,jstep))
            enddo
          endif
        enddo
      enddo
c
c     remplir gomobsgzhr_M avec la dimention des niveaux thermo 
          write(nulout,*) 'sugomobs:GZ_M*10.*rg '
          do jlev = 1,nlv_T
            write(nulout,*) 'GZ,',jlev
     &           ,zPPOBS_T(jlev,1),zmobs(jlev,1)*10.*rg
          enddo
      call col_fillmvo(lcolumnhr,'GZ','MM',zmobs,nlv_T,lcolumng%nobtot)
c
c     remplir aussi columnhr%gz avec le GZ momentum
      call col_fillmvo(lcolumnhr,'GZ','NA',zmobs,nlv_T,lcolumng%nobtot)
c
c     Lire les GZ des niveaux Thermodynamique
c
      do jlev = 1, nlv_T
        do jstep = 1,nstepobs
          if(nobs(jstep) > 0) then
            IIP1 = tg_vco_trl%ip1_T(jlev)
c
            ier=vfstlir(ZVAR,nultrl(jstep),ini,inj,ink,
     &          nstamplist(jstep) ,cletiket,iip1,-1,-1,
     &          cltypvar,'GZ')
            if(ier.lt.0)then
              write(nulout,1001) 'GZ',iip1,idate(jstep)
     &             ,itime(jstep)
              call abort3d(nulout
     &            ,'SUGOMOBS:Problem with background file')
            end if
c
            iset = ezdefset(nobsgid(jstep),itrlgid)
            ier = vezsint(zopart(1:nobs(jstep)),zvar,nobs(jstep),1,1,ini
     &            ,inj,1)
            do jobs = 1, nobs(jstep)
c              zmobs(jlev,notag(jobs,jstep)) = zopart(jobs)  *10.*rg
c             La conversion d unite sa fait dasn col_fillmvo
              zmobs(jlev,notag(jobs,jstep)) = zopart(jobs) 
c             On remplis aussi le champs de GZ a la surface rmtmobs 
              if (jlev == nlv_T) lcolumng%rmtmobs(notag(jobs,jstep)) = zopart(jobs) *10.*rg
            enddo
          endif
        enddo
      enddo
c
c     remplir gomobsgzhr_T
          write(nulout,*) 'sugomobs:GZ_TH (*10.*rg)'
          do jlev = 1,nlv_T
            write(nulout,*)'GZ,',jlev
     &           ,zPPOBS_T(jlev,1),zmobs(jlev,1)*10.*rg
          enddo
      call col_fillmvo(lcolumnhr,'GZ','TH',zmobs,nlv_T,lcolumng%nobtot)
c
c Now all of the other 3D variables
c
      do jvar=1, nfstvar
        select case ( cfstvar(jvar) )
c
c Variables sur les niveaux momentum
c
        case ('UU')
          write(nulout,*)' '
          write(nulout,*)' ----- Initializing UU and VV  ----'
          write(nulout,*)' '
          call flush(nulout)
c
          call getfldprm(iip1s,iip2,iip3,itrlnlev,cletiket,cltypvar
     &         ,itrlgid,cfstvar(jvar),nbrpstamp,jpnflev
     &         ,nultrl(nstepanltime),nulout,ip1_pak_trl,ip1_vco_trl)
          if(itrlnlev <= 0 .or. itrlnlev /= nlv_M ) then
            write(nulout,1002) cfstvar(jvar),idate((nstepobs-1)/2 + 1)
     &           ,itime((nstepobs-1)/2 + 1)
            call abort3d(nulout
     &           ,'SUGOMOBS:Problem with background file')
          endif
          write(nulout,*) ' ITRLNLEV =',itrlnlev,' nlv_M ',nlv_M
          ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
c loop through levels of UU,VV
c
          if (.not. allocated(zvar2)) allocate(zvar2(ini,inj))
          call tmg_start(27,'XHR2XY')
          do jlev = 1,nlv_M
            IIP1=tg_vco_trl%ip1_M(jlev)
            do jstep = 1,nstepobs
              if(nobs(jstep) > 0) then
                iset = ezdefset(nobsgid(jstep),itrlgid)
c
                ier=vfstlir(zvar,nultrl(jstep),INI,INJ,INK,
     &               nstamplist(jstep),cletiket,iip1,-1,-1,
     &               cltypvar,'UU')
                if(ier.lt.0)then
                  write(nulout,1001) 'UU',iip1,idate(jstep)
     &                 ,itime(jstep)
                  call abort3d(nulout
     &                 ,'SUGOMOBS:Problem with background file')
                end if
c
                zvar2 = 0.d0
                ier = vezuvint(zopart(1:nobs(jstep))
     &               ,zopart2(1:nobs(jstep)),zvar,zvar2,nobs(jstep)
     &               ,ini*inj)
                do jobs = 1, nobs(jstep)
                  zmobs_M(jlev,notag(jobs,jstep)) = zopart(jobs)
                  zmobs2_M(jlev,notag(jobs,jstep)) = zopart2(jobs)
                enddo
c
                ier=vfstlir(zvar2,nultrl(jstep),INI,INJ,INK,
     &               nstamplist(jstep) ,cletiket,iip1,-1,-1,
     &               cltypvar,'VV')
                if(ier.lt.0)then
                  write(nulout,1001) 'VV',iip1,idate(jstep)
     &                 ,itime(jstep)
                  call abort3d(nulout
     &                 ,'SUGOMOBS:Problem with background file')
                endif
c
                zvar = 0.d0
                ier = vezuvint(zopart(1:nobs(jstep))
     &               ,zopart2(1:nobs(jstep)),zvar,zvar2,nobs(jstep)
     &               ,ini*inj)
c
                do jobs = 1, nobs(jstep)
                  zmobs_M(jlev,notag(jobs,jstep)) = zmobs_M(jlev
     &                 ,notag(jobs,jstep)) + zopart(jobs)
                  zmobs2_M(jlev,notag(jobs,jstep)) = zmobs2_M(jlev
     &                 ,notag(jobs,jstep)) + zopart2(jobs)
                enddo
              endif
            enddo
          enddo
c         
          call tmg_start(29,'VINTPROF')
c
          call vintprof(zom_M,lcolumng%rppobs,lcolumng%nlev,zmobs_M,zppobs_M,nlv_M,lcolumng%nobtot)
          call col_fillmvo(lcolumng,'UU','NA',zom_M,lcolumng%nlev,lcolumng%nobtot)
c
          call vintprof(zom_M,lcolumng%rppobs,lcolumng%nlev,zmobs2_M,zppobs_M,nlv_M,lcolumng%nobtot)
          call col_fillmvo(lcolumng,'VV','NA',zom_M,lcolumng%nlev,lcolumng%nobtot)
c
c  Remplir dans un vecteur surdimentionne en repetant le dernier niveau
          do jlev = 1, nlv_M
            zmobs_MT(jlev,:) = zmobs_M(jlev,:)
            zmobs2_MT(jlev,:) = zmobs2_M(jlev,:)
          enddo 
          zmobs_MT(nlv_T,:) = zmobs_M(nlv_M,:)
          zmobs2_MT(nlv_T,:) = zmobs2_M(nlv_M,:)
ccc dbug in
          write(nulout,*) 'sugomobs: UU ,nlev= ',nlv_T
          do jlev = 1,nlv_T
            write(nulout,*) cfstvar(jvar),jvar,jlev
     &           ,zPPOBS_T(jlev,1),zmobs_MT(jlev,1)
          enddo
          write(nulout,*) 'sugomobs: VV ,nlev= ',nlv_T
          do jlev = 1,nlv_T
            write(nulout,*) cfstvar(jvar),jvar,jlev
     &           ,zPPOBS_T(jlev,1),zmobs2_MT(jlev,1)
          enddo
ccc dbug out
          call col_fillmvo(lcolumnhr,'UU','NA',zmobs_MT,nlv_T,lcolumng%nobtot)
          call col_fillmvo(lcolumnhr,'VV','NA',zmobs2_MT,nlv_T,lcolumng%nobtot)
c
          call tmg_stop(29)
c          
c Variable sur les niveaux thermodynamiques
c
        case ('TT','HU')
          write(nulout,*)' '
          write(nulout,*)' ----- Initializing ',cfstvar(jvar),' ----'
          write(nulout,*)' '
          call flush(nulout)
c
          call getfldprm(iip1s,iip2,iip3,itrlnlev,cletiket,cltypvar
     &         ,itrlgid,cfstvar(jvar),nbrpstamp,jpnflev
     &         ,nultrl(nstepanltime),nulout,ip1_pak_trl,ip1_vco_trl)
          if(itrlnlev <= 0 .or. itrlnlev /= nlv_T) then
            write(nulout,1002) cfstvar(jvar),idate((nstepobs-1)/2 + 1)
     &           ,itime((nstepobs-1)/2 + 1)
            call abort3d(nulout
     &          ,'SUGOMOBS:Problem with background file')
          endif
          write(nulout,*) ' ITRLNLEV =',itrlnlev,' nlv_T ',nlv_T
c
          ier = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)
c
c loop through levels of field jvar
c
c Reading 3D fields
c
          call tmg_start(27,'XHR2XY')
          do jlev = 1,nlv_T
            IIP1=tg_vco_trl%ip1_T(jlev)
            do jstep = 1,nstepobs
              if(nobs(jstep) > 0) then
                iset = ezdefset(nobsgid(jstep),itrlgid)
                ier=vfstlir(zvar,nultrl(jstep),INI,INJ,INK,
     &                nstamplist(jstep) ,cletiket,iip1,-1,-1,
     &                cltypvar,cfstvar(jvar))
                if(ier.lt.0)then
                  write(nulout,1001) cfstvar(jvar),iip1,idate(jstep)
     &                 ,itime(jstep)
                  call abort3d(nulout
     &                 ,'SUGOMOBS:Problem with background file')
                end if
c
                  ier = vezsint(zopart(1:nobs(jstep)),zvar,nobs(jstep),1
     &               ,1,ini,inj,1)
                do jobs = 1, nobs(jstep)
                  zmobs_T(jlev,notag(jobs,jstep)) =zopart(jobs)
                enddo
              endif
            enddo
          enddo
          call tmg_stop(27)
c
          zptophr = tg_vco_trl%dpt_T
          zprefhr = tg_vco_trl%dprf_T
          zrcoefhr= tg_vco_trl%drcf1
          itrlnlev = tg_vco_trl%ink_T
c
          call vintprof(zom_T,lcolumng%rppobs,lcolumng%nlev,zmobs_T,zppobs_T,nlv_T,lcolumng%nobtot)
c
          call tmg_start(30,'FILLMVO')
          call col_fillmvo(lcolumng ,cfstvar(jvar),'NA',zom_T,lcolumng%nlev,lcolumng%nobtot)
          call col_fillmvo(lcolumnhr,cfstvar(jvar),'NA',zmobs_T,nlv_T,lcolumng%nobtot)
          call tmg_stop(30)
c
        endselect 
      enddo
c
c Initialisation of TLM operators
c
      call subasic_obs(lcolumng)
c
c Using T, q and PS to compute GZ 
c
      call tt2phi(lcolumng)
c
c At this point columng is complete
c
c Copy 2D variables (PS,TG and RMTMOBS) from lcolumng to lcolumnhr
c
      call col_copy2d(lcolumng,lcolumnhr)
c
c Using T, q and PS to compute GZ 
c
      if(tg_vco_trl%iversion .eq. 5001 ) then  ! only in non-staggered mode
        call tt2phi(lcolumnhr)
      endif
c
c At this point columnhr contains background state on original levels
c
      call hpdeallc(pzom_T,ier,1)
      call hpdeallc(pzom_M,ier,1)
      call hpdeallc(pzovar,ier,1)
      deallocate(zvar,zvar2,zmobs,zmobs_T)
      deallocate(zmobs_M,zmobs2_M)
      deallocate(zmobs_MT,zmobs2_MT)
      deallocate(zppobs_T,zppobs_M,zppobs_MT)
      deallocate(zopart,zopart2,zhybhr)
      deallocate(nultrl)
      deallocate(idate)
      deallocate(itime)
c
      write(nulout,*) ' '
      write(nulout,*) '-------- Leaving SUGOMOBS ---------'
      write(nulout,*) ' '
 1001 format(1x,'SUGOMOBS: Problem finding variable',1x,a4,1x,'at level'
     &     ,i10,1x,', on',1x,i8,1x,'at',1x,i8.8,1x,'HHMMSSss')
 1002 format(1x,'SUGOMOBS: Problem finding variable',1x,a4,1x
     &     ,', on',1x,i8,1x,'at',1x,i8.8,1x,'HHMMSSss')
c
      return
      end
