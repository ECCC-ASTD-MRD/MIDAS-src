!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE DOBSSFC(PJO,CDFAM,lcolumnhr,lobsSpaceData)
#if defined (DOC)
*
***s/r DOBSSFC  - Computation of Jo and the residuals to the observations
*                 FOR SURFACE DATAFILES
*
*
*Author  : P. Koclas *CMC/AES  September 1994
*Revision:
*           P. Koclas *CMC/AES February 1995
*            - Minor modifications
*            - Allow for multiple data files.
*           P. KoCLAS CMC/CMSV AUGUST 1998
*            - ANALYSYS ON ETA COORDINATE
*           C. Charette ARMA/AES NOV 1998
*            - Extrapolation GZ below model orography.
*            - Adapt code to follow Luc Fillion's notes on 3dvar-eta
*              analysis. LLPRINT to print diagnostics
*           B. Brasnett CMC/CMDA NOV 1999
*            - Addition of variational quality control
*           C. Charette ARMA/AES Jun 2000
*            - Adapt code to process data with height as vertical coordinate.
*              Special care for surface temperature(12004) and for
*              sfc pressure(10004) and mean sea level pressure(10051)
*           C. Charette ARMA/AES Oct 2000
*            - Process elements 12203,11215,11216 at the reported height
*              rather than at the model surface. These observations are
*              no longer displaced to the model surface in SFCADJUSTZ.
*           C. Charette ARMA/SMC FEV. 2002
*            - Commented out the if(llprint...) statements within
*              the do loops. They were preventing vectorization.
*           S. Macpherson ARMA/MRD Sep 2009
*            - modifications for GPS surface observations
*
**    Purpose:  -Interpolate vertically the contents of commvo to
*                the pressure levels of the observations. Then
*                compute Jo.
*                A linear interpolation in ln(p) is performed.
*
*
*Arguments
*     PJO  :  CONTRIBUTION to Jo
*     CDFAM: FAMILY OF OBSERVATION
*
#endif
      use MathPhysConstants_mod
      use obsSpaceData_mod
      use columnData_mod 
      use bufr
      IMPLICIT NONE
      REAL*8 PJO
      CHARACTER *2 CDFAM
*implicits
#include "cvcord.cdk"
#include "comfilt.cdk"
*
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData
      INTEGER IPB,IPT,IXTR
      INTEGER IOBS,IK,IBEGIN,ILAST,JO,IDATA,IDATEND
      INTEGER J,JDATA,IBEGINOB,ILASTOB,ITYP,JJ,ISTYP
      INTEGER ICOUNT,IERR,ILEN,JLIST,JCOUNT,IPOINTR(1)
      REAL*8 ZVAR,ZOER,ZCON,ZINC,ZPHI,ZJON,ZGAMI,ZSLEV,ZQCARG,ZPPOST
      REAL*8 ZWB,ZWT,ZEXP,zexpgz,ZGAMMA,ZTVG,ZPSGOBS
      REAL*8 ZLEV,ZPT,ZPB,ZHHH,ZGAMAZ,ZSLOPE,GZHR
      REAL*8 DLSUM
      REAL*8 columnVarB,LQTOES
      LOGICAL LLOK, LLPRINT,LLUV
      CHARACTER*2 CVAR
      POINTER(PXPOINTR    ,IPOINTR)
C
C     Temperature lapse rate for extrapolation of gz below model surface
C
      LLPRINT = .FALSE.
      ZGAMMA = 0.0065 / GRAV
      zexp = 1.0/(MPC_RGAS_DRY_AIR_R8*ZGAMMA)
      ZEXPGZ = MPC_RGAS_DRY_AIR_R8*ZGAMMA
C
      DLSUM=0.
      DO J = 1,NFILES
         IF ( (CFAMTYP(J) .EQ. CDFAM) .AND.( NBEGINTYP(J) .GT. 0)) THEN
            IBEGIN=NBEGINTYP(J)
            ILAST=NENDTYP(J)
C
C*    1. Computation of (HX - Z)/SIGMA
C     .  -----------------------------
C
 100        CONTINUE
C
C     Process all data within the domain of the model
C
C
            ILEN = ILAST - IBEGIN +1
            CALL HPALLOC(PXPOINTR,ILEN,IERR,8)
            DO JLIST = 1,NELEMS
              ICOUNT = 0
              DO JDATA=IBEGIN,ILAST
                LLOK=.FALSE.
                IF ( obs_elem_i(lobsSpaceData,'VCO ',JDATA) .EQ. 1 ) THEN
                  ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
                  IF (ITYP.EQ.BUFR_NETS .OR. ITYP.EQ.BUFR_NEPS .OR.
     &                 ITYP.EQ.BUFR_NEUS .OR. ITYP.EQ.BUFR_NEVS .OR.
     &                 ITYP.EQ.BUFR_NESS  .OR. ITYP.EQ.BUFR_NEPN) THEN
                    LLOK=(obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1 .AND.
     &                   ITYP .EQ. NLIST(JLIST))
                  ELSE IF (ITYP.EQ.BUFR_NEZD .OR. ITYP.EQ.BUFR_NEFE) THEN
                    LLOK=.FALSE.
                  ELSE
                    LLOK=(obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1 .AND.
     &                   ITYP .EQ. NLIST(JLIST)        .AND.
     &                   obs_elem_i(lobsSpaceData,'XTR ',JDATA)  .EQ. 0)
                  ENDIF
                  IF ( LLOK ) THEN
                    ICOUNT = ICOUNT + 1
                    IPOINTR(ICOUNT) = JDATA
                  ENDIF
                ENDIF
              ENDDO
C--------------T2m,(T-TD)2m,US,VS
C              In this section we always extrapolate linearly the trial
C              field at the model surface to the height of the
C              surface observation whether the observation is above or
C              below the model surface.
C              NOTE: For (T-TD)2m,US,VS we do a zero order extrapolation
C
              IF ((NLIST(JLIST).EQ.BUFR_NETS .OR. NLIST(JLIST).EQ.BUFR_NESS .OR.
     &             NLIST(JLIST).EQ.BUFR_NEUS .OR. NLIST(JLIST).EQ.BUFR_NEVS)
     &                                   .AND. ICOUNT.GT.0)        THEN

                IF(NLIST(JLIST).EQ.BUFR_NETS) THEN
                  ZSLOPE = ZGAMMA
                ELSE
                  ZSLOPE = 0.0
                ENDIF

                DO JCOUNT = 1,ICOUNT
                  JDATA = IPOINTR(JCOUNT)
                  IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
                  ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
                  ZVAR = obs_elem_r8(lobsSpaceData,'VAR ',JDATA)
                  ZOER = obs_elem_r8(lobsSpaceData,'OER ',JDATA)
                  IK   = obs_elem_i(lobsSpaceData,'LYR ',JDATA)
                  IXTR = obs_elem_i(lobsSpaceData,'XTR ',JDATA)
                  ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
                  ZHHH = ZLEV * GRAV
                  CALL GETVARTYPE(ITYP,CVAR)
                  IPT  = col_getNumLev(LCOLUMNHR,cvar)-1 + col_varnoOffset(lcolumnhr,ityp)
                  IPB  = IPT+1
                  if(ityp.eq.bufr_ness) then
                    columnVarB=lqtoes(col_getElem(lcolumnhr,col_getNumLev(LCOLUMNHR,'TH'),IOBS,'HU'),
     +                                col_getElem(lcolumnhr,col_getNumLev(LCOLUMNHR,'TH'),IOBS,'TT'),
     +                                col_getPressure(lcolumnhr,col_getNumLev(LCOLUMNHR,'TH'),IOBS,'TH'))
                  else
                    columnVarB=col_getElem(lcolumnhr,IPB,IOBS)
                  endif
                  GZHR=col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,cvar),IOBS,cvar)
                  call obs_set_r8(lobsSpaceData,'OMA ',JDATA,
     +                  (columnVarB
     +                 - ZSLOPE*(ZHHH-GZHR)-ZVAR)
     +                 / ZOER)
                ENDDO
C--------------Surface Pressure Mean sea level Pressure
C              In this section we always extrapolate linearly the trial
C              field at the model surface to the height of the
C              surface observation whether the observation is above or
C              below the model height
              ELSEIF ((NLIST(JLIST).EQ.BUFR_NEPS .OR.
     &               NLIST(JLIST).EQ.BUFR_NEPN).AND. ICOUNT.GT.0) THEN
                DO JCOUNT = 1,ICOUNT
                  JDATA = IPOINTR(JCOUNT)
                  IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
                  ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
                  ZVAR = obs_elem_r8(lobsSpaceData,'VAR ',JDATA)
                  ZOER = obs_elem_r8(lobsSpaceData,'OER ',JDATA)
                  IK   = obs_elem_i(lobsSpaceData,'LYR ',JDATA)
                  IXTR = obs_elem_i(lobsSpaceData,'XTR ',JDATA)
                  ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
                  ZHHH = ZLEV * GRAV
                  CALL GETVARTYPE(ITYP,CVAR)
                  ZGAMAZ= ZGAMMA*(ZHHH-col_getHeight(lcolumnhr,col_getNumLev(LCOLUMNHR,cvar),IOBS,cvar))
                  ZTVG = (1.0 + MPC_DELTA_R8 * EXP(col_getElem(lcolumnhr,col_getNumLev(LCOLUMNHR,'TH'),IOBS,'HU')))
     &                    *col_getElem(lcolumnhr,col_getNumLev(LCOLUMNHR,'TH'),IOBS,'TT')
                  ZCON = ((ZTVG-ZGAMAZ)/ZTVG)
                  call obs_set_r8(lobsSpaceData,'OMA ',JDATA,
     &                 ((col_getElem(lcolumnhr,1,IOBS,'P0')*ZCON**ZEXP)-ZVAR)/ZOER)
                ENDDO
              ENDIF
            ENDDO
            CALL HPDEALLC(PXPOINTR,IERR,1)
C
C                 CONTRIBUTION TO Jo
C
            IBEGINOB = obs_elem_i(lobsSpaceData,'OBS ',IBEGIN)
            ILASTOB  = obs_elem_i(lobsSpaceData,'OBS ',ILAST)
            DO 150 JO = IBEGINOB, ILASTOB
               IDATA   = obs_elem_i(lobsSpaceData,'RLN ',JO)
               IDATEND = obs_elem_i(lobsSpaceData,'NLV ',JO) + IDATA - 1
               DO JDATA=IDATA,IDATEND
                  LLOK=.false.
                  IF ( obs_elem_i(lobsSpaceData,'VCO ',JDATA) .EQ. 1 ) THEN
                     ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
                     IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
                     ZOER = obs_elem_r8(lobsSpaceData,'OER ',JDATA)
                     IF (ITYP.EQ.BUFR_NETS .OR. ITYP.EQ.BUFR_NEPS .OR.
     &                   ITYP.EQ.BUFR_NEUS .OR. ITYP.EQ.BUFR_NEVS .OR.
     &                   ITYP.EQ.BUFR_NESS  .OR. ITYP.EQ.BUFR_NEPN) THEN
                        LLOK=(obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1)
                     ELSE IF (ITYP.EQ.BUFR_NEZD .OR. ITYP.EQ.BUFR_NEFE) THEN
                        LLOK=.FALSE.
                     ELSE
                        LLOK=(obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1 .AND.
     &                        obs_elem_i(lobsSpaceData,'XTR ',JDATA)  .EQ. 0)
                     ENDIF
                     IF(LLOK)     THEN
                        DLSUM=DLSUM+obs_elem_r8(lobsSpaceData,'OMA ',JDATA)*
     1                        obs_elem_r8(lobsSpaceData,'OMA ',JDATA)
                        call obs_set_r8(lobsSpaceData,'OMN ',JDATA, 
     +                    obs_elem_r8(lobsSpaceData,'OMA ',JDATA))
                        call obs_set_r8(lobsSpaceData,'OMI ',JDATA, 
     +                    obs_elem_r8(lobsSpaceData,'OMA ',JDATA))
                     ENDIF
                  ENDIF
C
               ENDDO

 150        CONTINUE
 200        CONTINUE
C
C     Process all geopotential data below model's orography
C
            DO JDATA=IBEGIN,ILAST
ccc debut
*cc               LLOK=(obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1)
*cc     &              .AND. (obs_elem_i(lobsSpaceData,'XTR ',JDATA) .EQ. 2)
*cc     &         .AND. (obs_elem_i(lobsSpaceData,'VNM ',JDATA) .EQ. BUFR_NEGZ )
               LLOK=(obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1)
     &              .AND. (obs_elem_i(lobsSpaceData,'XTR ',JDATA) .EQ. 2)
     &         .AND. (obs_elem_i(lobsSpaceData,'VNM ',JDATA) .EQ. BUFR_NEGZ )
     &         .AND. (obs_elem_i(lobsSpaceData,'VCO ',JDATA) .EQ. 1)
ccc fin
               IF ( LLOK ) THEN
                  IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
                  ZVAR = obs_elem_r8(lobsSpaceData,'VAR ',JDATA)
                  ZOER = obs_elem_r8(lobsSpaceData,'OER ',JDATA)
                  ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
C
C                 CONTRIBUTION TO Jo
C
c
c  forward nonlinear model for geopotential data below model's orography
c
                  ZTVG = (1.0 + MPC_DELTA_R8 * EXP(col_getElem(lcolumnhr,col_getNumLev(LCOLUMNHR,'TH'),IOBS,'HU')))
     &                        *col_getElem(lcolumnhr,col_getNumLev(LCOLUMNHR,'TH'),IOBS,'TT')
                  call obs_set_r8(lobsSpaceData,'OMA ',JDATA,(col_getMountain(lcolumnhr,iobs)
     &                        + ZTVG/zgamma
     &                        *(1.-(zlev/col_getElem(lcolumnhr,1,iobs,'P0'))**zexpgz)
     &                        - zvar)/zoer)
                  DLSUM =DLSUM+obs_elem_r8(lobsSpaceData,'OMA ',JDATA)
     +                        *obs_elem_r8(lobsSpaceData,'OMA ',JDATA)
                  call obs_set_r8(lobsSpaceData,'OMI ',JDATA,obs_elem_r8(lobsSpaceData,'OMA ',JDATA))
                  DLSUM =DLSUM+obs_elem_r8(lobsSpaceData,'OMA ',JDATA)
     +                               *obs_elem_r8(lobsSpaceData,'OMA ',JDATA)
                  call obs_set_r8(lobsSpaceData,'OMI ',JDATA,obs_elem_r8(lobsSpaceData,'OMA ',JDATA))
                  call obs_set_r8(lobsSpaceData,'OMN ',JDATA,obs_elem_r8(lobsSpaceData,'OMA ',JDATA))
               ENDIF
C
            END DO
 300  CONTINUE
C
      ENDIF
      END DO
C--------------------------------------------------------------------
      PJO = DLSUM
C--------------------------------------------------------------------
      RETURN
      END
