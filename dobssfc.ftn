!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE DOBSSFC(PJO,CDFAM,columnhr,obsSpaceData)
#if defined (DOC)
*
***s/r DOBSSFC  - Computation of Jo and the residuals to the observations
*                 FOR SURFACE DATA (except ground-based GPS zenith delay)
*
**    Purpose:  -Interpolate vertically the contents of columnhr to
*                the pressure levels of the observations. Then
*                compute Jo.
*                A linear interpolation in ln(p) is performed.
*
*
*Arguments
*     PJO  :  CONTRIBUTION to Jo
*     CDFAM: FAMILY OF OBSERVATION
*
#endif
      use EarthConstants_mod
      use MathPhysConstants_mod
      use obsSpaceData_mod
      use columnData_mod 
      use bufr
      IMPLICIT NONE
      REAL*8 PJO
      CHARACTER(len=*) :: CDFAM
      type(struct_columnData) :: columnhr
      type(struct_obs) :: obsSpaceData

      INTEGER IPB,IPT,INDEX_HEADER,INDEX_BODY,ITYP
      REAL*8 ZVAR,ZCON,ZEXP,ZGAMMA,ZTVG
      REAL*8 ZLEV,ZHHH,ZGAMAZ,ZSLOPE,GZHR
      REAL*8 columnVarB,LQTOES
      LOGICAL LLOK
      CHARACTER*2 VARTYPE
C
C     Temperature lapse rate for extrapolation of gz below model surface
C
      ZGAMMA = 0.0065 / GRAV
      zexp = 1.0/(MPC_RGAS_DRY_AIR_R8*ZGAMMA)

      ! loop over all header indices of the 'SF' family
      call obs_set_current_header_list(obsSpaceData,CDFAM)
      HEADER: do
        index_header = obs_getHeaderIndex(obsSpaceData)
        if (index_header < 0) exit HEADER
C
C*    1. Computation of (HX - Z)/SIGMA
C     .  -----------------------------
C
C     Process all data within the domain of the model
C
C
        ! loop over all body indices for this index_header
        call obs_set_current_body_list(obsSpaceData, index_header)
        BODY: do 
          index_body = obs_getBodyIndex(obsSpaceData)
          if (index_body < 0) exit BODY

          LLOK=.FALSE.

          IF(obs_bodyElem_i(obsSpaceData,OBS_VCO,INDEX_BODY).EQ.1 .AND.
     &       obs_bodyElem_i(obsSpaceData,OBS_ASS,INDEX_BODY).EQ.1) THEN
            ITYP = obs_bodyElem_i(obsSpaceData,OBS_VNM,INDEX_BODY)
            IF( ITYP.EQ.BUFR_NETS .OR. ITYP.EQ.BUFR_NEPS .OR.
     &          ITYP.EQ.BUFR_NEUS .OR. ITYP.EQ.BUFR_NEVS .OR.
     &          ITYP.EQ.BUFR_NESS .OR. ITYP.EQ.BUFR_NEPN ) THEN
              LLOK= .true.
            ENDIF
          ENDIF
          IF(.NOT.LLOK) cycle body

C---------T2m,(T-TD)2m,US,VS
C         In this section we always extrapolate linearly the trial
C         field at the model surface to the height of the
C         surface observation whether the observation is above or
C         below the model surface.
C         NOTE: For (T-TD)2m,US,VS we do a zero order extrapolation
C
          IF(ITYP.EQ.BUFR_NETS .OR. ITYP.EQ.BUFR_NESS .OR.
     &       ITYP.EQ.BUFR_NEUS .OR. ITYP.EQ.BUFR_NEVS) THEN

            IF(ITYP.EQ.BUFR_NETS) THEN
              ZSLOPE = ZGAMMA
            ELSE
              ZSLOPE = 0.0d0
            ENDIF

            ZVAR = obs_bodyElem_r(obsSpaceData,OBS_VAR,INDEX_BODY)
            ZLEV = obs_bodyElem_r(obsSpaceData,OBS_PPP,INDEX_BODY)
            ZHHH = ZLEV * GRAV
            varType = vnl_vartypeFromVarnum(ITYP)
            IPT  = col_getNumLev(COLUMNHR,varType)-1 + col_getOffsetFromVarno(columnhr,ityp)
            IPB  = IPT+1
            if(ityp.eq.bufr_ness) then
              columnVarB=lqtoes(col_getElem(columnhr,col_getNumLev(COLUMNHR,'TH'),INDEX_HEADER,'HU'),
     +                          col_getElem(columnhr,col_getNumLev(COLUMNHR,'TH'),INDEX_HEADER,'TT'),
     +                          col_getPressure(columnhr,col_getNumLev(COLUMNHR,'TH'),INDEX_HEADER,'TH'))
            else
              columnVarB=col_getElem(columnhr,IPB,INDEX_HEADER)
            endif
            GZHR=col_getHeight(columnhr,col_getNumLev(COLUMNHR,varType),INDEX_HEADER,varType)
            call obs_bodySet_r(obsSpaceData,OBS_OMP,INDEX_BODY,
     +            (  ZVAR-columnVarB
     +             + ZSLOPE*(ZHHH-GZHR))
     +            )
C---------Surface Pressure Mean sea level Pressure
C         In this section we always extrapolate linearly the trial
C         field at the model surface to the height of the
C         surface observation whether the observation is above or
C         below the model height
          ELSEIF(ITYP.EQ.BUFR_NEPS .OR.
     &           ITYP.EQ.BUFR_NEPN) THEN
            ZVAR = obs_bodyElem_r(obsSpaceData,OBS_VAR,INDEX_BODY)
            ZLEV = obs_bodyElem_r(obsSpaceData,OBS_PPP,INDEX_BODY)
            ZHHH = ZLEV * GRAV
            varType = vnl_vartypeFromVarnum(ITYP)
            ZGAMAZ= ZGAMMA*(ZHHH-col_getHeight(columnhr,
     &              col_getNumLev(COLUMNHR,varType),
     &              INDEX_HEADER,varType))
            ZTVG = (1.0 + MPC_DELTA_R8 * EXP(col_getElem(columnhr,
     &              col_getNumLev(COLUMNHR,'TH'),
     &              INDEX_HEADER,'HU')))*
     &              col_getElem(columnhr,
     &              col_getNumLev(COLUMNHR,'TH'),INDEX_HEADER,'TT')
            ZCON = ((ZTVG-ZGAMAZ)/ZTVG)
            call obs_bodySet_r(obsSpaceData,OBS_OMP,INDEX_BODY,
     &           ZVAR-(col_getElem(columnhr,1,INDEX_HEADER,'P0')*
     *           ZCON**ZEXP))
          ENDIF
C
C         CONTRIBUTION TO Jo
C
          PJO = PJO +(obs_bodyElem_r(obsSpaceData,OBS_OMP,INDEX_BODY)*
     1                obs_bodyElem_r(obsSpaceData,OBS_OMP,INDEX_BODY)) /
     2               (obs_bodyElem_r(obsSpaceData,OBS_OER,INDEX_BODY)*
     3                obs_bodyElem_r(obsSpaceData,OBS_OER,INDEX_BODY))

        ENDDO BODY

      ENDDO HEADER

      PJO=0.5d0*PJO

      RETURN
      END
