!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
subroutine preproc(lcolumng,lcolumnhr,lobsSpaceData, &
                   obsColumnMode, obsMpiStrategy, numAnalyses)
  !
  !**s/r preproc  - Control of the preprocessing of the 3D variational assimilation
  !
  use mpi
  use MathPhysConstants_mod
  use horizontalCoord_mod
  use timeCoord_mod
  use WindRotation_mod
  use Vgrid_Descriptors, only: vgrid_descriptor
  use obsSpaceData_mod
  use controlVector_mod
  use gridStateVector_mod
  use minimization_mod
  use columndata_mod
  use LamAnalysisGrid_mod
  use bmatrix_mod
  use gaussgrid_mod
  use tovs_mod
  use burpFiles_mod
  IMPLICIT NONE
  !implicits
#include "comct0.cdk"
  
  type(struct_obs) :: lobsSpaceData
  type(struct_columnData) :: lcolumng,lcolumnhr
  character (len=*) :: obsColumnMode
  character (len=*) :: obsMpiStrategy
  integer :: numAnalyses,datestamp

  type(struct_vco), pointer :: vco_anl => null()
  type(struct_vco), pointer :: vco_trl => null()
  type(struct_hco), pointer  :: hco_anl

  integer :: get_max_rss
  character(len=256) :: BURP_SPLIT_VAR
  integer :: length_burp_split, status, indexAnalysis
  logical :: burp_split_L

  write(*,*) ''
  write(*,*) '-------------------------------'
  write(*,*) '--Starting subroutine preproc--'
  write(*,*) '-------------------------------'

  !     
  !- Initialize burp file names and set datestamp (in timeCoord_mod)
  !
  call burp_setupFiles(datestamp)
  call tim_setDatestamp(datestamp)
  
  !
  !- Initialize constants
  !
  call mpc_printConstants(6)

  !
  !- Set vertical coordinate parameters from !! record in trial file
  !
  write(*,*)''
  write(*,*)' preproc: Set vcoord parameters for trial grid'
  if(numAnalyses.eq.1) then
    call vco_SetupFromFile(vco_trl,'./trlm_01',.false.)
  else
    call vco_SetupFromFile(vco_trl,'./trlm_01_001',.false.)
  endif
  call col_setVco(lcolumnhr,vco_trl)
  
  !
  !- Initialize variables of the model states
  !
  call gsv_setup
  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
  
  !
  !- Initialize the Temporal grid
  !
  call tim_setup

  !
  !- Initialize the Analysis grid
  !
  write(*,*)''
  write(*,*)' preproc: Set hco parameters for analysis grid'
  call hco_SetupFromFile( './analysisgrid', 'ANALYSIS', 'Analysis' ) ! IN
  hco_anl => hco_Get('Analysis')

  if ( hco_anl % global ) then
    !- Setup the global analysis grid metrics
    call gaus_SetupFromHCO(hco_anl) ! IN
  else
    !- Iniatilized the core (Non-Exteded) analysis grid
    call hco_SetupFromFile( './analysisgrid', 'COREGRID', 'AnalysisNonExt' ) ! IN
    !- Setup the LAM analysis grid metrics
    call lag_SetupFromHCO( 'Analysis', 'AnalysisNonExt' ) ! IN
  end if

  if ( hco_anl % rotated ) then
    call uvr_Setup(hco_anl) ! IN 
  end if
  
  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

  !
  ! Specify the active observation-array columns
  !
  call obs_class_initialize(obsColumnMode)
  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

  !
  !- Determine if the observation files are already split by subdomain
  !
  status = 0
  burp_split_L = .false.
  call get_environment_variable('ARMA_BURP_SPLIT',BURP_SPLIT_VAR,length_burp_split,status,.true.)
  if (status.gt.1) then
     write(*,*) 'Routine preproc: Problem when getting the environment variable ARMA_BURP_SPLIT'
  end if
  if (status.eq.1) then !! The variable 'ARMA_BURP_SPLIT' does not exist so we didn't split the observations
     write(*,*) 'Routine preproc: The environment variable ARMA_BURP_SPLIT has not been detected so we read global observation files'
     burp_split_L = .false.
  else
     write(*,*) 'Routine preproc: The environment variable ARMA_BURP_SPLIT has been detected so we read splitted observation files'
     burp_split_L = .true.
  end if

  !
  ! Allocate memory for observation arrays
  !
  call obs_initialize(lobsSpaceData,mpi_local=burp_split_L)
  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
  
  !     
  !- Initialisation of the analysis grid vertical coordinate from !! in Bnmc file
  !
  call vco_SetupFromFile(vco_anl,'./bgcov',.true.)
  call col_setVco(lcolumng,vco_anl)
  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

  !
  !- Miscellaneous initializations associated with the observations
  !
  call suobs(lobsSpaceData)
  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

  !
  !- Initialize TOVS processing
  !
  call tovs_setup
  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

  !
  !- Basic setup of columnData module (nouu, novv, etc. needed in suprep)
  !
  call col_setup
  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

  !
  !- Filter out data from CMA
  !
  call tmg_start(14,'SUPREP')
  call suprep(lobsSpaceData)
  call tmg_stop(14)
  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

  !
  !     Check env variable ARMA_BURP_SPLIT to know if burp files already split by subdomains
  !
  if (.not.burp_split_L) then !! we read global observations files so we have to localized them for each MPI process
     call setObsMpiStrategy(lobsSpaceData,obsMpiStrategy)
     call obs_reduceToMpiLocal(lobsSpaceData)
  end if
  if (obsMpiStrategy .eq. 'LATBANDS') then
     call checkObsMpiIP(lobsSpaceData,burp_split_L)
  end if
  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
  
  !
  !- Memory allocation for background column data
  !
  call col_allocate(lcolumng, obs_numheader(lobsSpaceData),mpi_local=.true.)
  call col_allocate(lcolumnhr,obs_numheader(lobsSpaceData),mpi_local=.true.)

  !
  !- Point GZ_T,GZ_M and RPPOBS_T,RPPOBS_M and VHYB_T,VHYB_M to their unstaggered values in lcolumng
  !
  call col_pointStagToUnstag(lcolumng)

  !
  !- Memory allocation for TOVS processing
  !
  call tovs_nl_setupallo(lobsSpaceData)
  if (nconf==101) call BGCK_IR_SETUP(lobsSpaceData)
  if (nconf==141) call tovs_lin_setupallo()

  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

  !
  !- Initialize the observation error covariances
  !
  call sucovo(lobsSpaceData)
  write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'

  !
  !- Initialize the background-error covariance, also sets up control vector module (cvm)
  !
  if (nconf == 141) then
    call bmat_setup(hco_anl,vco_anl,tim_getDatestamp())
    write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
  end if

  !
  !- Set up the minimization module, now that the required parameters are known
  !  NOTE: some global variables remain in minimization_mod that must be initialized before sugomobs
  !
  if (nconf == 141) then
    call min_setup( cvm_nvadim ) ! IN
    write(*,*) 'Memory Used: ',get_max_rss()/1024,'Mb'
  end if

end subroutine preproc
