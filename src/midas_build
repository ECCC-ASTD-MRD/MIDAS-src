#! /bin/sh

###############################################################################
##  MIDAS automated build script
##
##  @SYNOPSIS
##      * edit configuration: `./config.dot.sh`
##
##      * compile, link and install all programs on both architectures
##        ```
##        ./midas_build
##        ```
##      * build specific targets on both architectures
##        ```
##        ./midas_build [ <target_1> [ <target_2> [ ... ] ] ]
##        ```
##  
##      * install auto-completion feature
##        ```
##        ./install_build_completion.sh
##        source ${HOME}/.bash_completion
##        ```
##
##  @REFERENCES 
##      * `./README.md`
##      * `./Makefile`
##  
##  @AUTHORS
##      Martin Deshaies-Jacques (@mad001) - CMDA - January 2020
##
###############################################################################


##=========================================================
##  functions
function are_jobs_completed {
    set -e
    typeset job_or_pid_front=$1
    typeset pid_back=$2
    typeset headnode_frontend=$3

    typeset __sleep_interval=3
    typeset __front_done=0
    typeset __back_done=0
    while true; do
        typeset __status=0

        if [ "${__front_done}" = 0 ]; then 
            if [ "${headnode_frontend}" == true ]; then
                [ $(ps ${job_or_pid_front} | wc -l) -le 1 ] && __status=1
                __id_type="pid"
            else
                jobchk -c ${MIDAS_COMPILE_FRONTEND} ${job_or_pid_front} \
                    || __status=$?
                __id_type="jobid"
            fi
            if [ "${__status}" -ne 0 ]; then
                echo "Compilation on ${MIDAS_COMPILE_FRONTEND} \
(${__id_type}: ${job_or_pid_front}) has finished."
                __front_done=1
        fi; fi

        if [ "${__back_done}" = 0 ]; then
        if [ $(ps ${pid_back} | wc -l) -le 1 ]; then
                echo "Compilation on ${MIDAS_COMPILE_BACKEND} \
(pid: ${pid_back}) has finished."
                __back_done=1
        fi; fi

        [ ${__front_done} == 1 -a ${__back_done} == 1 ] && break
        sleep ${__sleep_interval}
    done
}

function abs_path {
    abs_name=${1}
    platform=${2}
    typeset __abs_prfx=${MIDAS_COMPILE_DIR_MAIN}/${__exec_leafdir_midas}/midas-
    echo ${__abs_prfx}${abs_name}_${platform}-${__revnum}.Abs
}



##=========================================================
## some prior defitions 
typeset __target
typeset __job
typeset __job_opt
typeset __job_test_target
typeset __here
typeset __abs_exist_list
typeset __abs_all

__here=$(pwd)
__date=$(date +%Y%m%d%H%S)

##=========================================================
##  sourcing user configuration

## env. variable new naming convention + retrocompatibility
__toplevel=$(git rev-parse --show-toplevel)
source ${__toplevel}/src/programs/commons/retroComp_warning.sh
##--------------------------------------------------------

source ${__here}/config.dot.sh  &> .tmp.config.out
__listing_config=${MIDAS_COMPILE_JOBNAME}.config-${__date}.out
mv .tmp.config.out ${__listing_config}

__abs_all=$(ls programs/*.f90 | sed 's/programs\/\(.*\).f90/\1/' )
__abs_all="${__abs_all} splitobs"

##=========================================================
##  parsing input and building job for submissions
##

if [ $# -eq 0 ]
## default: make all 
then 
    __target='all'
    __abs_exist_list=${__abs_all}
else
    __target=$@
    __abs_exist_list=$(echo ${__target} | tr -s ' ' '\n'  | grep '.Abs' | sed 's/\.Abs//' | column )
    ## ^ there must be a simpler solution
fi

##=========================================================
## testing target validity on frontend first

__job_opt="MIDAS_COMPILE_DIR_MAIN=${MIDAS_COMPILE_DIR_MAIN}"
__job_test_target="make -n ${__target} ${__job_opt}"

##-- lauching dry-run to test target
echo ${__job_test_target}
${__job_test_target} > /dev/null 2>&1 || {
    echo
    echo "> ${__target}"
    echo "+-------------------+"
    echo "|                   |"
    echo "| INVALID TARGET(S) |"
    echo "|                   |"
    echo "+-------------------+"
    exit 1
    }

##-- if the dry-run passes, then we define the job adding multi-cores query
__job="make ${__target} -j ${MIDAS_COMPILE_NCORES} -O ${__job_opt}"


##=========================================================
##  Check prior existence of absolutes
##  - remove them first
if [ ! -z "${__abs_exist_list}" ]; then
    echo "Checking prior existence of target absolutes"
    for __abs in ${__abs_exist_list}; do
    for __plat in ${ORDENV_PLAT} ${__plat_super}; do
        typeset __abs_full=$(abs_path ${__abs} ${__plat})
        [ -f  "${__abs_full}" ] && \
        ( echo "${__abs_full} exists; removing it" >>  ${__listing_config}
        rm ${__abs_full} )
    done; done
    echo
fi



##=========================================================
##  Compilation on backend (in the background)


##-- passing active environment to the job 
##  (before sourcing config.dot.sh)
cat > .compile_job << EOF
#! /bin/bash
set -ex

export MIDAS_COMPILE_BACKEND=${MIDAS_COMPILE_BACKEND}
export MIDAS_COMPILE_FRONTEND=${MIDAS_COMPILE_FRONTEND}
export MIDAS_COMPILE_JOBNAME=${MIDAS_COMPILE_JOBNAME}
export MIDAS_COMPILE_DIR_MAIN=${MIDAS_COMPILE_DIR_MAIN}
export MIDAS_COMPILE_NCORES=${MIDAS_COMPILE_NCORES}
export MIDAS_COMPILE_VERBOSE=${MIDAS_COMPILE_VERBOSE}
export MIDAS_COMPILE_CLEAN=${MIDAS_COMPILE_CLEAN}
export MIDAS_COMPILE_HEADNODE_FRONTEND=${MIDAS_COMPILE_HEADNODE_FRONTEND}
export MIDAS_COMPILE_KEEP_LISTING=${MIDAS_COMPILE_KEEP_LISTING}
export MIDAS_COMPILE_ADD_DEBUG_OPTIONS=${MIDAS_COMPILE_ADD_DEBUG_OPTIONS}
export MIDAS_SSM_TARGET=${MIDAS_SSM_TARGET}
export MIDAS_SSM_PKGNAME=${MIDAS_SSM_PKGNAME}
export MIDAS_SSM_MAINTAINER=${MIDAS_SSM_MAINTAINER}
export MIDAS_SSM_DESCRIPTION=${MIDAS_SSM_DESCRIPTION}
export MIDAS_SSM_GITREPO=${MIDAS_SSM_GITREPO}
export MIDAS_SSM_VERSION=${MIDAS_SSM_VERSION}

cd ${__here}
source ${__midas_dot_cfg}
EOF
echo "${__job}" >> .compile_job

__listing_backend=${MIDAS_COMPILE_JOBNAME}.${MIDAS_COMPILE_BACKEND}-${__date}.out
echo "========================================================================"
echo "... Launching direct compilation on ${MIDAS_COMPILE_BACKEND}"
echo "    > listing_${__listing_backend}" 
(cat .compile_job | ssh ${MIDAS_COMPILE_BACKEND} bash --login > \
    ${__listing_backend} 2>&1) &  
__pid_backend=$!
echo "    ${MIDAS_COMPILE_BACKEND} compilation process id: ${__pid_backend}"

##=========================================================
##  Compilation on frontend
echo "========================================================================"
echo "... Launching compilation on ${MIDAS_COMPILE_FRONTEND}"
if ${MIDAS_COMPILE_HEADNODE_FRONTEND}
then
    ## compile directly on head node
    __listing_frontend=${MIDAS_COMPILE_JOBNAME}.${MIDAS_COMPILE_FRONTEND}-${__date}.out
    echo "    > ${__listing_frontend}"
    ${__job} >  ${__listing_frontend} 2>&1 &
    __job_or_pid_frontend=$!
    echo "    ${MIDAS_COMPILE_FRONTEND} (headnode) compilation process id: ${__job_or_pid_frontend}"
else
    ## use ord_soumet
    __job_or_pid_frontend=$(ord_soumet .compile_job -jn ${MIDAS_COMPILE_JOBNAME} \
        -mach ${MIDAS_COMPILE_FRONTEND} -listing ${PWD} -w 5 \
        -cpus ${MIDAS_COMPILE_NCORES}  -m 8G -shell /bin/bash)
    __listing_frontend_search="${MIDAS_COMPILE_JOBNAME}.${MIDAS_COMPILE_FRONTEND}-*-$(date +%Y%m%d%H)*.out"
fi

## waiting for backend compilation to terminate
echo 
echo "Compilation underway in working directory: ${__build_dir_version}"
echo 

are_jobs_completed ${__job_or_pid_frontend} ${__pid_backend} \
    ${MIDAS_COMPILE_HEADNODE_FRONTEND}




##====| POST make processing |==================================================

## Organizing logs
if [ -z ${__listing_frontend+x} ]
then 
    __listing_frontend=$(ls -rt ${__listing_frontend_search} | tail -1) 
fi
cat ${__listing_frontend} >> ${__listing_config}
mv ${__listing_config} ${__listing_frontend}

##=========================================================
## Checking if compilation and linking have been successful

## regex elements to find errors
typeset __err_regex='error #|(?<!-)undefined|make.*Circular'

typeset __err_comp=0
typeset __err_back=$(grep -En "${__err_regex}" ${__listing_frontend})
typeset __err_front=$(grep -En "${__err_regex}" ${__listing_backend})
if [ ! -z "${__err_front}" ]; then 
    echo
    echo "<!> some error found in ${__listing_frontend}"
    echo "${__err_front}"
    __err_comp=1
fi
if [ ! -z "${__err_back}" ]; then 
    echo
    echo "<!> some error found in ${__listing_backend}"
    echo "${__err_back}"
    __err_comp=1
fi
if [ "${__err_comp}" == "1" ]; then
    exit 1
fi



##========================================================
##  Installing (copying + renaming) target programs
if [ ! -z "${__abs_exist_list}" -a  "${__install_always_midas}" == "true" ]
then
    ##  Copying target programs to the install directory
    echo 
    echo "Installing target programs"
    typeset __status=0
    typeset __abs_name
    typeset __plat
    typeset __install_dir=${MIDAS_COMPILE_DIR_MAIN}/${__exec_leafdir_midas}
    [ ! -d ${__install_dir} ] && mkdir -p ${__install_dir} 
    for __abs in ${__abs_exist_list}; do
    for __plat in ${ORDENV_PLAT} ${__plat_super}; do
        typeset __abs_installed=$(abs_path ${__abs} ${__plat})
        if [ ! "${__abs}" == "splitobs" ]; then
          ## splitobs is already compiled and installed (as an external program)
          typeset __bld_dir=${MIDAS_COMPILE_DIR_MAIN}/midas_bld-${__revnum}/${__plat}/
          find ${__bld_dir} -name ${__abs}.Abs -exec cp {} ${__abs_installed} \; 
        fi
        if [ ! -f  "${__abs_installed}" ]; then
            echo "  <!> ${__abs} not found in ${__install_dir}"
            __status=1
        else
            echo "  ${__abs_installed} installed" >> .checkAbs 
        fi

    done; done
    [ -f ".checkAbs" ] && (cat .checkAbs >> ${__listing_frontend} && rm .checkAbs)

    if [ "${__status}" -eq 0 ]; then
        if [ "${__abs_exist_list}" = "${__abs_all}" ]; then
            echo
            echo "+------------------------------+"
            echo "|                              |"
            echo "| MIDAS INSTALLATION COMPLETED |"
            echo "|   ALL PROGRAMS INSTALLED     |"
            echo "|                              |"
            echo "+------------------------------+"
        else
            echo
            echo "+------------------------------+"
            echo "|                              |"
            echo "| MIDAS INSTALLATION COMPLETED |"
            echo "|                              |"
            echo "+------------------------------+"
            echo "    All target programs have been installed correctly!"
            for __abs in ${__abs_exist_list}; do echo "    * ${__abs}"; done
        fi
        echo
        echo "  > ${MIDAS_COMPILE_DIR_MAIN}/${__exec_leafdir_midas}"
        echo
        if ${MIDAS_COMPILE_CLEAN}
        then
            echo 
            echo "MIDAS_COMPILE_CLEAN=true (in config.dot.sh)"
            echo " ... cleaning build directory "
            make clean MIDAS_COMPILE_DIR_MAIN=${MIDAS_COMPILE_DIR_MAIN} \
                MIDAS_COMPILE_VERBOSE=${MIDAS_COMPILE_VERBOSE}
        fi
    else
        echo
        echo "+--------------------------------------+"
        echo "|                                      |"
        echo "| SOME PROGRAMS COULD NOT BE INSTALLED |"
        echo "|                                      |"
        echo "+--------------------------------------+"
        echo
        exit 1
    fi
fi


##=========================================================
## Some final clean up if compilation (and possibly linking 
## and installation) was successful
[ "${__keep_jobsubmit_ofile}" = false ] && rm -rf ${__listing_frontend}.o

if [ "${MIDAS_COMPILE_KEEP_LISTING}" = false ]; then 
    echo "MIDAS_COMPILE_KEEP_LISTING=false (in config.dot.sh)" 
    echo " ... removing listings"
    rm -rf ${__listing_frontend} ${__listing_backend}
fi

rm -rf .compile_job
