#! /bin/sh

###############################################################################
##  MIDAS automated build script
##
##  @SYNOPSIS
##      * edit configuration: `./config.dot.sh`
##
##      * compile, link and install all programs on both architectures
##        ```
##        ./midas_build
##        ```
##      * build specific targets on both architectures
##        ```
##        ./midas_build [ <target_1> [ <target_2> [ ... ] ] ]
##        ```
##  
##      * install auto-completion feature
##        ```
##        ./install_build_completion.sh
##        source ${HOME}/.bash_completion
##        source ${HOME}/.profile.d/interactive/post
##        ```
##
##  @REFERENCES 
##      * `./README.md`
##      * `./Makefile`
##  
##  @AUTHORS
##      Martin Deshaies-Jacques (@mad001) - CMDA - January 2020
##
###############################################################################


##=========================================================
##  functions
function is_compilation_done {
    set -e
    jobid_front=$1
    pid_back=$2

    __sleep_interval=3
    __front_done=0
    __back_done=0
    while true; do
        __status=0

        if [ "${__front_done}" = 0 ]; then 
            jobchk -c ${MIDAS_COMPILE_FRONTEND} ${jobid_front} || __status=$?
            if [ "${__status}" -ne 0 ]; then
                echo "Compilation on ${MIDAS_COMPILE_FRONTEND} (jobid: ${jobid_front}) has finished."
                __front_done=1
            fi
        fi

        ## that check does not work
        ## the process `pid_back` is not the compilation process
        if [ "${__back_done}" = 0 ]; then
            if [ $(ps ${pid_back} | wc -l) -le 1 ]; then
                echo "Compilation on ${MIDAS_COMPILE_BACKEND} (pid: ${pid_back}) has finished."
                __back_done=1
            
            fi
        fi

        if  [[ ${__front_done} == 1  &&  ${__back_done} == 1 ]]; then 
            break
        fi
        sleep ${__sleep_interval}
    done
}


##=========================================================
## some prior defitions and checks
typeset __target
typeset __job
typeset __job_header
typeset __here

## check if called from midas/src
##   install_build_completion.sh make midas_build visible from PATH
##   but won't work unless called in midas/src
__here=$(pwd)
__date=$(date +%Y%m%d%H%S)
if [ ! "$(realpath $0)" == "$(pwd -P)/midas_build" ]
then
    echo '`midas_build` need to be called from `src`'
    exit 1
fi 

##=========================================================
##  sourcing user configuration

## env. variable new naming convention + retrocompatibility
__toplevel=$(git rev-parse --show-toplevel)
source ${__toplevel}/src/programs/commons/retroComp_warning.sh
##--------------------------------------------------------

source ${__here}/config.dot.sh  &> .tmp.config.out
__listing_config=${MIDAS_COMPILE_JOBNAME}.config-${__date}.out
mv .tmp.config.out ${__listing_config}

##=========================================================
##  parsing input
##
##  @TODO: more than one target?


if [ $# -eq 0 ]
## default: make all 
then 
    __job="make all -j ${MIDAS_COMPILE_NCORES} -O  MIDAS_COMPILE_DIR_MAIN=${MIDAS_COMPILE_DIR_MAIN} MIDAS_COMPILE_ADD_DEBUG=${MIDAS_COMPILE_ADD_DEBUG} MIDAS_COMPILE_COMPF_GLOBAL=${MIDAS_COMPILE_COMPF_GLOBAL} MIDAS_COMPILE_VERBOSE=${MIDAS_COMPILE_VERBOSE}"
else
    __target=$@
    __job="make ${__target} -j ${MIDAS_COMPILE_NCORES} -O  MIDAS_COMPILE_DIR_MAIN=${MIDAS_COMPILE_DIR_MAIN} MIDAS_COMPILE_ADD_DEBUG=${MIDAS_COMPILE_ADD_DEBUG} MIDAS_COMPILE_COMPF_GLOBAL=${MIDAS_COMPILE_COMPF_GLOBAL} MIDAS_COMPILE_VERBOSE=${MIDAS_COMPILE_VERBOSE}"
fi

if [ "${__install_always_midas}" == "true" ]
then 
    __job="${__job} && make install -j ${MIDAS_COMPILE_NCORES} -O  MIDAS_COMPILE_DIR_MAIN=${MIDAS_COMPILE_DIR_MAIN} __exec_leafdir_midas=${__exec_leafdir_midas} MIDAS_COMPILE_VERBOSE=${MIDAS_COMPILE_VERBOSE}"
fi

##=========================================================
##  Compilation on backend (in the background)

##=========================================================
##  sourcing user configuration
source ./config.dot.sh

##=========================================================
##  Compilation on backend (in the background)
here=$(pwd)
cat > .compile_job << EOF
#! /bin/bash
set -ex
cd ${here}
source ${DOT_CONFIG} 
make ${__target} -j ${NCORES} -O  DIR_BLD_ROOT=${DIR_BLD_ROOT} VERBOSE=${VERBOSE}
EOF

__listing_backend=${MIDAS_COMPILE_JOBNAME}.${MIDAS_COMPILE_BACKEND}-${__date}.out
echo "#####################################"
echo "... Launching direct compilation on ${MIDAS_COMPILE_BACKEND}"
echo "    > listing_${__listing_backend}" 
(cat .compile_job | ssh ${MIDAS_COMPILE_BACKEND} bash --login > \
    ${__listing_backend} 2>&1) &  
__pid_backend=$!
echo "    ${MIDAS_COMPILE_BACKEND} compilation process id: ${__pid_backend}"

##=========================================================
##  Compilation on frontend
echo "######################################"
echo "... Launching compilation on ${MIDAS_COMPILE_FRONTEND}"
if ${MIDAS_COMPILE_ON_MIDAS_COMPILE_FRONTEND_HEADNODE}
then
    ## compile directly on head node
    __listing_frontend=${MIDAS_COMPILE_JOBNAME}.${MIDAS_COMPILE_FRONTEND}-${__date}.out
    echo "    > ${__listing_frontend}"
    echo ${__job}
    ${__job} >  ${__listing_frontend} 2>&1 &
    __pid_frontend=$!
else
    ## use ord_soumet
    __jobid_frontend=$(ord_soumet .compile_job -jn ${MIDAS_COMPILE_JOBNAME} \
        -mach ${MIDAS_COMPILE_FRONTEND} -listing ${PWD} -w 60 \
        -cpus ${MIDAS_COMPILE_NCORES}  -m 8G -shell /bin/bash)
    __listing_frontend_search="${MIDAS_COMPILE_JOBNAME}.${MIDAS_COMPILE_FRONTEND}-*-${MIDAS_COMPILE_FRONTEND}-$(date +%Y%m%d%H)*.out"
fi

## waiting for backend compilation to terminate
echo 
echo "Compilation underway in working directory: ${__build_dir_version}"
echo 

if ${MIDAS_COMPILE_ON_MIDAS_COMPILE_FRONTEND_HEADNODE}
then
    wait ${__pid_backend}
    echo 
    echo "Compilation completed successfully on ${MIDAS_COMPILE_BACKEND}"
    wait ${__pid_frontend}
    echo 
    echo "Compilation completed successfully on ${MIDAS_COMPILE_FRONTEND}"
else
    is_compilation_done ${__jobid_frontend} ${__pid_backend} 
fi


if ${MIDAS_COMPILE_CLEAN}
then
    yes | make clean MIDAS_COMPILE_DIR_MAIN=${MIDAS_COMPILE_DIR_MAIN} MIDAS_COMPILE_VERBOSE=${MIDAS_COMPILE_VERBOSE}
    rm -rf .compile_job
fi

## Organizing logs
if [ -z ${__listing_frontend+x} ]
then 
    __listing_frontend=$(ls -rt ${__listing_frontend_search} | tail -1) 
fi
cat ${__listing_frontend} >> ${__listing_config}
mv ${__listing_config} ${__listing_frontend}
if [ "${__keep_jobsubmit_ofile}" = false ]
then
    rm -rf ${__listing_frontend}.o
fi

echo "######################################"
echo "#"
echo "#  MIDAS COMPILATION COMPLETED"
echo "#"
echo "#  > ${MIDAS_COMPILE_DIR_MAIN}"
echo "#"
echo "######################################"
