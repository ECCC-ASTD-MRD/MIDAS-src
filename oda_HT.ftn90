!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
subroutine oda_HT(lcolumn,lcolumng,lobsSpaceData)
  use MathPhysConstants_mod
  use obsSpaceData_mod
  use columnData_mod 
  implicit none
  !
  !Purpose:
  !Call the several adjoint of observation operators
  !
  !Author  : S. Pellerin *ARMA/MRB January 2009
  !
#include "pardim.cdk"
#include "comdim.cdk"
#include "comdimo.cdk"
#include "comgem.cdk"
#include "comstate.cdk"
#include "comgpsgb.cdk"
!!
  type(struct_columnData) :: lcolumn,lcolumng
  type(struct_obs) :: lobsSpaceData
!
  call tmg_start(64,'GPSZTD') !
  call oda_HTgp
  call tmg_stop (64)        !

  call tmg_start(63,'ZPROF') !
  call oda_HTzp
  call tmg_stop (63)

  call tmg_start(90,'GPSRO') !
  call oda_HTro
  call tmg_stop (90)      !     !

  call tmg_start(60,'RTTOV') !
  call oda_HTto
  call tmg_stop (60)      !

  call tmg_start(59,'SFC')
  call oda_HTsf
  call tmg_stop (59)      !

  call tmg_start(56,'PPROF') !
  call oda_HTpp
  call tmg_stop (56)

  CONTAINS

      SUBROUTINE oda_HTpp
      use modmask, only : lmaskpp_in,lmaskpp_out
      use bufr
!*
!***s/r AOBSPPP  - Adjoint of the "vertical" interpolation
!*                  for "UPPER AIR" data files.
!*
!*
!*
!*Author  : P. Koclas *CMC/AES  April 1996
!*
!*     Purpose: based on vint3d to build the adjoint of the
!*              vertical interpolation for UPPER-AIR data files.
!*
      INTEGER IPB,IPT,IDBURP,ITYP
      REAL*8 ZRES,ZOER
      REAL*8 ZWB,ZWT,zcon,zexp,zgamma,ZATV,ZTVG
      REAL*8 ZLEV,ZPT,ZPB,ZDADPS,ZPRESBPB,ZPRESBPT
      INTEGER IOBS,IPOS,IK,ISTRIDE
      INTEGER J,JDATA
      LOGICAL LLPRINT
      REAL*8 columngVarT,columngVarB,lqtoes
!C
!C     Temperature lapse rate for extrapolation of gz below model surface
!C
      LLPRINT = .FALSE.
!ccc      LLPRINT = .TRUE.
      zgamma = 0.0065 / GRAV
      zexp = RGASD*zgamma
!C
!C*    1. Fill in COMMVO by using the adjoint of the "vertical"
!c interpolation
!C     .  ---------------------------------------------------------------
!c ----
!C
!C      TO eliminate dependancies in vector loop, a stride
!C      is chosen so that the data in the inner loop always
!C      comes from different "oservations" of the CMA.
!C      ------------------------------------------------------
!C         stride = first odd number greater than the longest
!C          observation.
!C
      ISTRIDE=2*(NMAXLEN/2) + 1
!C
!C     Process all data within the domain of the model
!C
      DO J=1,ISTRIDE
!*vdir nodep
        DO JDATA=J,obs_num_obstotal(lobsSpaceData),ISTRIDE
          IF (lmaskpp_in(jdata)) THEN
            IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
            IPOS = obs_elem_i(lobsSpaceData,'POS ',JDATA)
            ZOER = obs_elem_r8(lobsSpaceData,'OER ',JDATA)
            ZRES = obs_elem_r8(lobsSpaceData,'OMI ',JDATA)
            ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
            IDBURP = MOD(obs_elem_i(lobsSpaceData,'ITY ',IOBS),1000)
            ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
            IK   = obs_elem_i(lobsSpaceData,'LYR ',JDATA)
            IPT  = IK  + IPOS*NFLEV
            IPB  = IPT+1
            ZPT  = LCOLUMNG%RPPOBS(IK,IOBS)
            ZPB  = LCOLUMNG%RPPOBS(IK+1,IOBS)
            ZWB  = LOG(ZLEV/ZPT)/LOG(ZPB/ZPT)
            ZWT  = 1.0D0 - ZWB
!c            call obs_set_r8(lobsSpaceData,'OMN ',JDATA, obs_elem_r8(lobsSpaceData,'OMN ',JDATA)
!c     &           * obs_elem_r8(lobsSpaceData,'OMA ',JDATA))
!C
            zpresbpt = ((vhybinc(ik) - rptopinc/rprefinc)  &
                 /(1.0-rptopinc/rprefinc))**rcoefinc
            zpresbpb = ((vhybinc(ik+1) - rptopinc/rprefinc)  &
                 /(1.0-rptopinc/rprefinc))**rcoefinc

            ZDADPS   = ( (ZPRESBPT/ZPT)*LOG(ZLEV/ZPB) &
                 -(ZPRESBPB/ZPB)*LOG(ZLEV/ZPT) ) &
                 /LOG(ZPB/ZPT)**2
!C
!C               Set ZDADPS to zero for HUMSAT (idtyp=158)
            IF (IDBURP .EQ. 158) THEN
              ZDADPS = 0.0
            ENDIF

            if(ITYP.eq.BUFR_NEES) then
              call lqtoes_ad(lcolumn%hu(IK+1,IOBS),lcolumn%tt(IK+1,IOBS),lcolumn%ps(1,IOBS),  &
                ZWB*ZRES,lcolumng%hu(IK+1,IOBS),lcolumng%rppobs(IK+1,IOBS),vhybinc(IK+1))
              call lqtoes_ad(lcolumn%hu(IK  ,IOBS),lcolumn%tt(IK  ,IOBS),lcolumn%ps(1,IOBS),  &
                ZWT*ZRES,lcolumng%hu(IK  ,IOBS),lcolumng%rppobs(IK  ,IOBS),vhybinc(IK  ))
              columngVarB=lqtoes(lcolumng%hu(IK+1,IOBS),lcolumng%tt(IK+1,IOBS),lcolumng%rppobs(IK+1,IOBS))
              columngVarT=lqtoes(lcolumng%hu(IK  ,IOBS),lcolumng%tt(IK  ,IOBS),lcolumng%rppobs(IK  ,IOBS))
            else
              LCOLUMN%ALL(IPB,IOBS) = LCOLUMN%ALL(IPB,IOBS) + ZWB*ZRES
              LCOLUMN%ALL(IPT,IOBS) = LCOLUMN%ALL(IPT,IOBS) + ZWT*ZRES
              columngVarB=lcolumng%all(IPB,IOBS)
              columngVarT=lcolumng%all(IPT,IOBS)
            endif
            LCOLUMN%PS(1,IOBS)    = LCOLUMN%PS(1,IOBS)    +         &
                 (columngVarB - columngVarT)  &
                 *ZDADPS*ZRES
          elseif (lmaskpp_out(jdata)) THEN
            IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
            IPOS = obs_elem_i(lobsSpaceData,'POS ',JDATA)
            ZOER = obs_elem_r8(lobsSpaceData,'OER ',JDATA)
            ZRES = obs_elem_r8(lobsSpaceData,'OMI ',JDATA)
            ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
            IDBURP = MOD(obs_elem_i(lobsSpaceData,'ITY ',IOBS),1000)
            IPT  = NFLEV-1 + IPOS*NFLEV
            IPB  = IPT+1
!c            call obs_set_r8(lobsSpaceData,'OMN ',JDATA, obs_elem_r8(lobsSpaceData,'OMN ',JDATA)
!c     &           * obs_elem_r8(lobsSpaceData,'OMA ',JDATA))
!c
!c-------------adjoint of TL of geopotential extrapolation below
!c orography
!c
            zcon = (zlev/lcolumng%ps(1,iobs))**zexp
            ZATV = ((1.0 - ZCON)/ZGAMMA)*ZRES
            ZTVG = OLTV(1,NFLEV,IOBS)*lcolumng%tt(NFLEV,IOBS)
            lcolumn%ps(1,iobs)    = lcolumn%ps(1,iobs)  &
                 + RGASD*ZTVG*zcon*zres/lcolumng%ps(1,iobs)
            lcolumn%tt(nflev,iobs) = lcolumn%tt(nflev,iobs)  &
                 + OLTV(1,NFLEV,IOBS)*ZATV
            lcolumn%hu(nflev,iobs) = lcolumn%hu(nflev,iobs)  &
                 + OLTV(2,NFLEV,IOBS)*ZATV
          ENDIF
        END DO
      END DO
      RETURN
      END subroutine oda_HTpp


      SUBROUTINE oda_HTsf
      use modmask, only : lmasksf_in,lmasksf_out
      use bufr
!*
!***s/r AOBSSFC  - Adjoint of the "vertical" interpolation
!*                  for "SURFACE" data files.
!*
!*Author  : P. Koclas *CMC/AES  April 1996
!*    -------------------
!*
!*     Purpose: based on surfc1dz to build the adjoint of the
!*              vertical interpolation for SURFACE data files.
!*
      INTEGER IPB,IPT
      REAL*8 ZRES
      REAL*8 ZWB,ZWT,zcon,zexp,zexpgz,zgamma,ZATV,ZTVG
      REAL*8 ZLEV,ZPT,ZPB,ZDADPS,ZDELPS,ZDELTV,ZGAMAZ,ZHHH
      INTEGER IOBS,IPOS,IK,ISTRIDE
      INTEGER J,JDATA,ITYP
!C
!C     Temperature lapse rate for extrapolation of gz below model surface
!C
      zgamma = 0.0065 / GRAV
      zexp   = 1.0/(RGASD*zgamma)
      zexpgz = RGASD*zgamma
!C
!C*    1. Fill in COMMVO by using the adjoint of the "vertical"
!c interpolation
!C     .  ---------------------------------------------------------------
!c ----
!C
!C      TO eliminate dependancies in vector loop, a stride
!C      is chosen so that the data in the inner loop always
!C      comes from different "oservations" of the CMA.
!C      ------------------------------------------------------
!C         stride = first odd number greater than the longest
!C          observation.
!C
      ISTRIDE=2*(NMAXLEN/2) + 1
!C
!C     Process all data within the domain of the model
!C
      DO J=1,ISTRIDE
!*vdir nodep
        DO JDATA=j,obs_num_obstotal(lobsSpaceData),ISTRIDE
          IF (lmasksf_in(jdata)) THEN
            IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
            IPOS = obs_elem_i(lobsSpaceData,'POS ',JDATA)
            ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
            IK   = obs_elem_i(lobsSpaceData,'LYR ',JDATA)
            ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
            ZHHH = ZLEV * GRAV
            IPT  = lcolumn%nlev-1 + IPOS*lcolumn%nlev
            IPB  = IPT+1
            ZRES = obs_elem_r8(lobsSpaceData,'OMI ',JDATA)
!c            call obs_set_r8(lobsSpaceData,'OMN ',JDATA, obs_elem_r8(lobsSpaceData,'OMN ',JDATA)
!c     &           * obs_elem_r8(lobsSpaceData,'OMA ',JDATA))
            IF (ITYP.EQ.BUFR_NETS .OR. ITYP.EQ.BUFR_NESS .OR.  &
                ITYP.EQ.BUFR_NEUS .OR. ITYP.EQ.BUFR_NEVS ) THEN
              if(ityp.eq.bufr_ness) then
                call lqtoes_ad(lcolumn%hu(lcolumn%nlev,IOBS),lcolumn%tt(lcolumn%nlev,IOBS),lcolumn%ps(1,IOBS),  &
                  ZRES,lcolumng%hu(lcolumn%nlev,IOBS),lcolumng%rppobs(lcolumn%nlev,IOBS),vhybinc(lcolumn%nlev))
              else
                LCOLUMN%ALL(IPB,IOBS)    = LCOLUMN%ALL(IPB,IOBS) + ZRES
              endif
            ELSEIF (ITYP.EQ.BUFR_NEPS .OR. ITYP.EQ.BUFR_NEPN) THEN
              ZTVG  = OLTV(1,NFLEV,IOBS)*lcolumng%tt(NFLEV,IOBS)
              ZGAMAZ= ZGAMMA*(ZHHH-lcolumng%gz(NFLEV,IOBS))
              ZCON  = ((ZTVG-ZGAMAZ)/ZTVG)
              ZDELTV= (lcolumng%ps(1,IOBS)*ZEXP*ZCON**(ZEXP-1))  &
                   *(ZGAMAZ/(ZTVG*ZTVG))
              ZDELPS= ZCON**ZEXP
              ZATV  = ZDELTV*ZRES
              LCOLUMN%PS(1,IOBS)    = LCOLUMN%PS(1,IOBS)  &
                   + ZDELPS*ZRES
              lcolumn%tt(nflev,iobs) = lcolumn%tt(nflev,iobs)  &
                   + OLTV(1,NFLEV,IOBS)*ZATV
              lcolumn%hu(nflev,iobs)= lcolumn%hu(nflev,iobs)   &
                   + OLTV(2,NFLEV,IOBS)*ZATV
            ELSE
              IPT  = IK + IPOS*NFLEV
              IPB  = IPT+1
              ZPT  = lcolumng%gz(IK,IOBS)
              ZPB  = lcolumng%gz(IK+1,IOBS)
              ZWB  = (ZPT-ZHHH)/(ZPT-ZPB)
              ZWT  = 1. - ZWB
!ccc ATTN ATTN ZDADPS EST A DEFINIR POUR UNE COORDONNEE Z
              ZDADPS= 0.
              LCOLUMN%ALL(IPB,IOBS) = LCOLUMN%ALL(IPB,IOBS) + ZWB*ZRES
              LCOLUMN%ALL(IPT,IOBS) = LCOLUMN%ALL(IPT,IOBS) + ZWT*ZRES
              LCOLUMN%PS(1,IOBS)    = LCOLUMN%PS(1,IOBS)    +         &
                   (lcolumng%all(IPB,IOBS) - lcolumng%all(IPT,IOBS))  &
                   *ZDADPS*ZRES
            ENDIF
            
          elseif(lmasksf_out(jdata)) then
            IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
            ZRES = obs_elem_r8(lobsSpaceData,'OMI ',JDATA)
            ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
!C
!c  adjoint of TL of geopotential extrapolation below orography
!c
            zcon = (zlev/lcolumng%ps(1,iobs))**zexpgz
            ZATV = ((1.0 - ZCON)/ZGAMMA)*ZRES
            ZTVG = OLTV(1,NFLEV,IOBS)*lcolumng%tt(NFLEV,IOBS)
!c            call obs_set_r8(lobsSpaceData,'OMN ',JDATA, obs_elem_r8(lobsSpaceData,'OMN ',JDATA)
!c     &           * obs_elem_r8(lobsSpaceData,'OMA ',JDATA))
            lcolumn%ps(1,iobs)    = lcolumn%ps(1,iobs)     &
                 + RGASD*ZTVG*zcon*zres/lcolumng%ps(1,iobs)
            lcolumn%tt(nflev,iobs) = lcolumn%tt(nflev,iobs)  &
                 + OLTV(1,NFLEV,IOBS)*ZATV
            lcolumn%hu(nflev,iobs) = lcolumn%hu(nflev,iobs)  &
                 + OLTV(2,NFLEV,IOBS)*ZATV                
          endif
        END DO
      END DO
      RETURN
      END subroutine oda_HTsf


subroutine oda_HTto
!
!**s/r tovs_obs_ad  - Adjoint of computation of residuals to the tovs observations
!
!
!author        : j. halle *cmda/aes  april 19, 2005
!
!revision 001  :
!                S. Pellerin - ARMA, jan. 2009
!                - call  to oda_get_radiance_ad
!
!    -------------------
!     purpose:
!
!     1.   Getting the adjoint of the residuals
!     .    ----------------------------------
!
  call oda_get_radiance_ad(lobsSpaceData)

!     2.   Adjoint of computing radiance
!     .    -----------------------------
!
  call tovs_rttov_ad(lobsSpaceData)


!     3.   Adjoint of preparation of atmospheric profiles
!     .    ----------------------------------------------
!

  call tovs_fill_profiles_ad(lcolumn%uu,lcolumn%vv,lcolumn%tt,lcolumn%hu,lcolumn%ps,lcolumn%tg, &
                             lcolumng%rppobs,lcolumng%nkgdimo,nflev,lcolumng)

end subroutine oda_HTto


      SUBROUTINE oda_HTro
!*
!***s/r AVGPSRO - Adjoint of the computation of Jo and
!*                the residuals to the GPSRO observations
!*
!*Author  : J. M. Aparicio Jan 2004
!*    -------------------
!**    Purpose:
!*
      use modgps04profile
      use modgps06gravity
      use modgps08refop

      REAL*8 DPJO0(ngpscvmx)
      REAL*8 DPJO1(ngpscvmx)

      REAL*8 ZTODEG
      REAL*8 ZLAT, Lat
      REAL*8 ZLON, Lon
      REAL*8 ZETA(JPNFLEV)
      REAL*8 BTT(JPNFLEV)
      REAL*8 BHU(JPNFLEV)
      REAL*8 BGZ(JPNFLEV)
      REAL*8 BP0
      REAL*8 BPT, BPR, BCF
      REAL*8 BMT
      REAL*8 HNH1

      REAL*8 ZOBS, ZMHX, ZINC, ZOBI
      REAL*8 JAC(ngpscvmx)

      INTEGER IDATYP
      INTEGER JL, NGPSLEV
      integer, dimension(:), allocatable :: list_header, list_body
      integer :: size_list_header, index_list_header, index_header
      integer :: size_list_body,   index_list_body,   index_body

      LOGICAL  ASSIM, LUSE

      INTEGER NH, NH1
      TYPE(GPSPROFILE)           :: PRF
      REAL(DP)     , ALLOCATABLE :: H   (:)
      TYPE(GPSDIFF), ALLOCATABLE :: RSTV(:)
!C
!C     * 1.  Initializations
!C     *     ---------------
!C
      allocate(list_header( obs_num_stn     (lobsSpaceData) ))
      ZTODEG = 180.0 / RPI
!C
!C     *     Eta vector:
!C
      NGPSLEV=NFLEV
      DO JL = 1, NFLEV
        ZETA(JL) = VLEV(JL)
      ENDDO

      !
      ! loop over all header indices of the 'RO' family (Radio Occultation)
      !
      call obs_getHeaderIndices(lobsSpaceData, 'RO', list_header, &
                                size_list_header)
!$omp parallel do default(shared) &
!$omp private(dpjo0,idatyp,assim,nh) &
!$omp private(luse,lat,lon,zlat,zlon,jl,btt) &
!$omp private(bhu,bgz,bp0,bpt,bmt,bpr,bcf,prf) &
!$omp private(h,rstv,nh1,hnh1,zmhx,zobi,zobs) &
!$omp private(jac,zinc,dpjo1) &
!$omp private(index_header,list_body,size_list_body,index_list_body,index_body)
      HEADER_INDEX: do index_list_header = 1, size_list_header
         index_header = list_header(index_list_header)
         DPJO0 = 0._dp
         allocate(list_body  ( obs_num_obstotal(lobsSpaceData) ))
!C
!C     *    Calculate DPJO0 only for refractivity observations (codtyp 169)
!C
         IDATYP = MOD(obs_elem_i(lobsSpaceData,'ITY ',INDEX_HEADER),1000)
         DATYP: IF ( IDATYP .EQ. 169 ) THEN
           ASSIM = .FALSE.
!C
!C              Scan for requested assimilations, and count them
!C
           NH = 0
           ! loop over all body indices (still in the 'RO' family)
           call obs_getBodyIndices(lobsSpaceData, index_header, list_body, &
                                   size_list_body)
           do index_list_body = 1, size_list_body
              index_body = list_body(index_list_body)
             LUSE=( obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY).EQ.1 )
             IF ( LUSE ) THEN
               ASSIM = .TRUE.
               NH = NH + 1
             ENDIF
           ENDDO
!C
!C     *           If assimilations are requested, apply the observation
!c operator
!C
           ASSIMILATE: IF (ASSIM) THEN
!C
!C     *           Profile at the observation location:
!C
             Lat  = obs_elem_r4(lobsSpaceData,'LAT ',INDEX_HEADER)
             Lon  = obs_elem_r4(lobsSpaceData,'LON ',INDEX_HEADER)
             ZLAT = obs_elem_r4(lobsSpaceData,'LAT ',INDEX_HEADER) * ZTODEG
             ZLON = obs_elem_r4(lobsSpaceData,'LON ',INDEX_HEADER) * ZTODEG
             DO JL = 1, NFLEV
!C
!C     *              Profile x_b
!C
               BTT(JL) = lcolumng%tt(JL,INDEX_HEADER) - 273.15
               BHU(JL) = lcolumng%hu(JL,INDEX_HEADER)
               BGZ(JL) = lcolumng%gz(JL,INDEX_HEADER)
             ENDDO
             BP0 = lcolumng%ps(1,INDEX_HEADER)
             BPT = LCOLUMNG%RPPOBS(1,INDEX_HEADER)
             BMT = BGZ(NFLEV)/RG
             BMT = gpsgeopotential(Lat, BMT)/RG
             BPR = rprefinc
             BCF = rcoefinc
!C
!C     *           GPS profile structure:
!C
             CALL GPSSTRUCT1H(NGPSLEV,ZLAT,ZLON,ZETA,  &
                  BTT,BHU,BP0,BMT,BPT,BPR,BCF,PRF)
             call gpsgeo(prf)
!C
!C     *           Prepare the vector of all the observations
!C
             ALLOCATE( H    (NH) )
             ALLOCATE( RSTV (NH) )
             NH1 = 0
             ! loop over all body indices (still in the 'RO' family)
             do index_list_body = 1, size_list_body
                index_body = list_body(index_list_body)
               LUSE=( obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY).EQ.1 )
               IF ( LUSE ) THEN
                 NH1 = NH1 + 1
                 HNH1  = obs_elem_r8(lobsSpaceData,'PPP ',INDEX_BODY)
                 H(NH1)= gpsgeopotential(Lat,HNH1)/9.80616
               ENDIF
             ENDDO
!C
!C     *           Apply the observation operator
!C
             CALL GPSREFOPV(H, PRF, RSTV)
!C
!C     *           Perform the (H(xb)DX-Y')/S operation
!C
             NH1 = 0
             ! loop over all body indices (still in the 'RO' family)
             BODY_INDEX: do index_list_body = 1, size_list_body
                index_body = list_body(index_list_body)
               LUSE=( obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY).EQ.1 )
               IF ( LUSE ) THEN
                 NH1 = NH1 + 1
!C
!C     *                 Observation operator H(x)
!C
                 ZMHX = RSTV(NH1)%VAR
!C
!C     *                 Observation increment Y'=Y-H(x)
!C
                 ZOBI = obs_elem_r8(lobsSpaceData,'VAR ',INDEX_BODY)
!C
!C     *                 Observation value    Y
!C
                 ZOBS = ZMHX + ZOBI
!C
!C     *                 Observation jacobian
!C
                 JAC = RSTV(NH1)%DVAR
!C
!C     *                 Normalized increment
!C
                 ZINC = obs_elem_r8(lobsSpaceData,'OMI ',INDEX_BODY)
!c                 call obs_set_r8(lobsSpaceData,'OMN ',INDEX_BODY, obs_elem_r8(lobsSpaceData,'OMN ',INDEX_BODY)
!c     &                * obs_elem_r8(lobsSpaceData,'OMA ',INDEX_BODY))
!C
!C                       O-F Tested criteria:
!C
                 DPJO1 = ZINC * JAC
!C
!C     *                 Accumulate the gradient of the observation
!C     *                 cost function
!C
                 DPJO0 = DPJO0 + DPJO1

               ENDIF
             ENDDO BODY_INDEX
             DEALLOCATE( RSTV )
             DEALLOCATE( H    )
           ENDIF ASSIMILATE
         ENDIF DATYP
!C
!C     *        Store H* (HX - Z)/SIGMA in COMMVO
!C
         DO JL = 1, NFLEV
           LCOLUMN%TT(JL,INDEX_HEADER) = DPJO0(JL)
           LCOLUMN%HU(JL,INDEX_HEADER) = DPJO0(JL+NFLEV)
         ENDDO
         LCOLUMN%PS  ( 1,INDEX_HEADER) = DPJO0(1+2*NFLEV)

         deallocate(list_body)
      ENDDO HEADER_INDEX
!$omp end parallel do

      deallocate(list_header)

      RETURN
      END subroutine oda_HTro


      SUBROUTINE oda_HTzp
      use modmask, only : lmaskzp
!*
!***s/r AOBSZZZ  - Adjoint of the "vertical" interpolation in z
!*                 for profiler data.
!*
!*Author  : J. St-James *CMDA/SMC  July 2003
!*Revision :
!*    -------------------
!*
!*     Purpose: based on vint3d to build the adjoint of the
!*              vertical interpolation for profiler data.
!*
      INTEGER IPB,IPT
      REAL*8 ZRES,ZDA1,ZDA2,ZDENO
      REAL*8 ZWB,ZWT
      REAL*8 ZLEV,ZPT,ZPB
      INTEGER IOBS,IPOS,IK,ISTRIDE
      INTEGER J,JDATA

      ISTRIDE=2*(NMAXLEN/2) + 1
!C
!C     Process all data within the domain of the model
!C
      DO J=1,ISTRIDE
!*vdir nodep
        DO JDATA=J, obs_num_obstotal(lobsSpaceData),ISTRIDE
          IF (lmaskzp(jdata) ) THEN
            IOBS = obs_elem_i(lobsSpaceData,'OBS ',JDATA)
            IPOS = obs_elem_i(lobsSpaceData,'POS ',JDATA)
            ZRES = obs_elem_r8(lobsSpaceData,'OMI ',JDATA)
            ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
            IK   = obs_elem_i(lobsSpaceData,'LYR ',JDATA)
            IPT  = IK  + IPOS*NFLEV
            IPB  = IPT+1
            ZPT  = lcolumng%gz(IK,IOBS)/RG
            ZPB  = lcolumng%gz(IK+1,IOBS)/RG
            ZDENO= ZPT-ZPB
            ZWB  = (ZPT-ZLEV)/ZDENO
            ZWT  = 1.0D0 - ZWB

            ZDA1= (ZLEV-ZPB)/(ZDENO**2)
            ZDA2= (ZPT-ZLEV)/(ZDENO**2)
!c            call obs_set_r8(lobsSpaceData,'OMN ',JDATA, obs_elem_r8(lobsSpaceData,'OMN ',JDATA)
!c     &           * obs_elem_r8(lobsSpaceData,'OMA ',JDATA))
!C
            LCOLUMN%GZ(IK+1,IOBS) = LCOLUMN%GZ(IK+1,IOBS) +    &
                 (lcolumng%all(IPB,IOBS)-lcolumng%all(IPT,IOBS))*ZDA2*ZRES/RG
            LCOLUMN%GZ(IK,IOBS) = LCOLUMN%GZ(IK,IOBS) +        &
                 (lcolumng%all(IPB,IOBS)-lcolumng%all(IPT,IOBS))*ZDA1*ZRES/RG
            LCOLUMN%ALL(IPB,IOBS) = LCOLUMN%ALL(IPB,IOBS) + ZWB*ZRES
            LCOLUMN%ALL(IPT,IOBS) = LCOLUMN%ALL(IPT,IOBS) + ZWT*ZRES

          ENDIF
        END DO
      END DO
      RETURN
      END subroutine oda_HTzp


      SUBROUTINE oda_HTgp
      use modmask, only : lmaskgp
!*
!***s/r  -oda_HTgp Adjoint of TL routine oda_Hgp
!*
!*
!*Author  : S. Macpherson *ARMA December 2004
!*    -------------------
!**    Purpose: Compute Ht*grad(Jo) for all GPS ZTD observations using
!*              adjoint of gpsztdop
!*
      REAL*8 ZTODEG
      REAL*8 ZLAT
      REAL*8 ZLON
      REAL*8 ZETA(NFLEV)
      REAL*8 ZTT (NFLEV)
      REAL*8 ZHU (NFLEV)
      REAL*8 ZGZ (NFLEV)
      REAL*8 ZTTB (NFLEV)
      REAL*8 ZHUB (NFLEV)
      REAL*8 ZP0
      REAL*8 ZP0B
      REAL*8 ZPT
      REAL*8 ZMT

      REAL*8 ZHX, ZLEV
      REAL*8 ZHXB

      REAL*8 DZTT (NFLEV)
      REAL*8 DZHU (NFLEV)
      REAL*8 DZP0

      INTEGER JL
      integer, dimension(:), allocatable :: list_header, list_body
      integer :: size_list_header, index_list_header, index_header
      integer :: size_list_body,   index_list_body,   index_body

      LOGICAL  ASSIM, LLOK

      INTEGER NH, NH1
!C
!C     * 1.  Initializations
!C     *     ---------------
!C
      ZTODEG= 180.0 / RPI
      allocate(list_header( obs_num_stn     (lobsSpaceData) ))
      allocate(list_body  ( obs_num_obstotal(lobsSpaceData) ))
!C
!C     *    .   1.1  Eta vector
!C     *    .        ----------
!C
      DO JL = 1, NFLEV
         ZETA(JL) = VLEV(JL)
      ENDDO

      write(*,fmt='(/,4x,A)') 'AVGPSZTD- Adjoint Version: GPS ZTD observations'

      ! loop over all header indices of the 'GP' family (GPS observations)
      call obs_getHeaderIndices(lobsSpaceData, 'GP', list_header, &
                                size_list_header)
      HEADER_LIST: do index_list_header = 1, size_list_header
         index_header = list_header(index_list_header)
         DZTT(:) = 0.0
         DZHU(:) = 0.0
         DZP0 = 0.0
!C
!C       Scan for requested ZTD assimilation
!C
         NH = 0
         ASSIM = .FALSE.
         ! loop over all body indices (still in the 'GP' family)
         call obs_getBodyIndices(lobsSpaceData, index_header, list_body, &
                                 size_list_body)
         do index_list_body = 1, size_list_body
            index_body = list_body(index_list_body)
            LLOK = ( lmaskgp(INDEX_BODY) )
            IF ( LLOK ) THEN
               ASSIM = .TRUE.
               NH = NH + 1
            ENDIF
         ENDDO
!C
!C     * If ZTD assimilation, apply the AD observation operator
!C
         IF (ASSIM) THEN
!C
!C     *    LR background profile:
!C
            ZLAT = obs_elem_r4(lobsSpaceData,'LAT ',INDEX_HEADER) * ZTODEG
            ZLON = obs_elem_r4(lobsSpaceData,'LON ',INDEX_HEADER) * ZTODEG
            DO JL = 1, NFLEV
              ZTTB(JL) = lcolumng%tt(JL,INDEX_HEADER)
              ZTT(JL)  = 0.0
              ZHUB(JL) = EXP(lcolumng%hu(JL,INDEX_HEADER))
              ZHU(JL)  = 0.0
              ZGZ(JL)  = lcolumng%gz(JL,INDEX_HEADER)
            ENDDO
            ZP0B = lcolumng%ps(1,INDEX_HEADER)
            ZP0  = 0.0
            ZPT  = LCOLUMNG%RPPOBS(1,INDEX_HEADER)
            ZMT  = ZGZ(NFLEV)/GRAV
!C
!C     *       Apply AD of ZTD observation operator to get 
!C             Ht*grad(Index_header) = Ht*(H'dx - d)/sigma_o^2
!C
            NH1 = 0
            do index_list_body = 1, size_list_body
               index_body = list_body(index_list_body)
               IF ( lmaskgp(INDEX_BODY) ) THEN
                  NH1 = NH1 + 1
!C                call obs_set_r8(lobsSpaceData,'OMI ',INDEX_BODY, grad(Index_header) 
!c                                        = (H'dx - d)/sigma_o^2)
                  ZHX = obs_elem_r8(lobsSpaceData,'OMI ',INDEX_BODY)

!C     *          Observation height (m)
                  ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',INDEX_BODY)
!C     *          Call GP-ZTD adjoint operator: input = ZHX,
!c                   output = ZTT,ZHU,ZP0
                  CALL GPSZTDOPAD(ZLAT,ZLON,ZLEV,ZETA,ZTTB,   &
                                  ZHUB,ZP0B,ZPT,ZMT,ZGZ,ZHXB,ZTT,ZHU,ZP0,ZHX)

                  DZTT(:) = DZTT(:) + ZTT(:)
!C                dJo/dQ ---> dJo/d(lnQ) 
                  DZHU(:) = DZHU(:) + ZHUB(:)*ZHU(:)
                  DZP0 = DZP0 + ZP0
               ENDIF
            ENDDO

         ENDIF ! ASSIM
!c
!C      *   Store Ht*grad(Index_header) in COMMVO
!c
         DO JL = 1, NFLEV
            LCOLUMN%TT(JL,INDEX_HEADER) = DZTT(JL)
            LCOLUMN%HU(JL,INDEX_HEADER) = DZHU(JL)
         ENDDO
         LCOLUMN%PS(1,INDEX_HEADER) = DZP0
      ENDDO HEADER_LIST

      deallocate(list_header)
      deallocate(list_body)

      RETURN
      END subroutine oda_HTgp



end subroutine oda_HT
