!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE reBuildCMA 
#if defined (DOC)
*
***s/r reBuildCMA - re-construct CMA by giving local Obs TAG. 
*
*Author    . Bin He (ARMA/MRB )
*
*Revision:
*      PURPOSE:  
*
*    ARGUMENTS:
*                INPUT:  NONE
*
*                OUTPUT: NONE
*
#endif
*
      USE mod4dv, only : l4dvar 
      USE obstag  
      use obsSpaceData_mod
      IMPLICIT NONE
#include "comlun.cdk"
#include "comdimo.cdk"
#include "comcst.cdk"
#include "cvcord.cdk"
! Declaire Local Variables. 
      CHARACTER(len=9),ALLOCATABLE,DIMENSION(:) :: cstnid_tmp
      CHARACTER(len=2),ALLOCATABLE,DIMENSION(:) :: cfamily_tmp
      REAL,ALLOCATABLE,DIMENSION(:,:) :: ROBHDR_tmp,ROBDATA_tmp
      REAL*8,ALLOCATABLE,DIMENSION(:,:) :: ROBDATA8_tmp

      INTEGER,ALLOCATABLE,DIMENSION(:,:) :: MOBHDR_tmp,MOBDATA_TMP 
      INTEGER,ALLOCATABLE,DIMENSION(:) :: locObsTag_tmp 
      
*     Declaire local variables. 
      INTEGER :: i,j,iobs,ierr ,locObsize ,startindx,endindx 
      INTEGER :: idataend,jj,ifamid,istart,idata,ii 
      LOGICAL :: lfirst 
!!---------------------------------------------------------------
      WRITE(*,*) '============= Enter reBuildCMA =============='
      locObsize=size(locObsTag) 

      ALLOCATE(cfamily_tmp(locObsize),STAT=ierr) 
      ALLOCATE(cstnid_tmp(locObsize),STAT=ierr) 
      ALLOCATE(ROBHDR_tmp(NCM_LET,locObsize),STAT=ierr) 
      ALLOCATE(MOBHDR_tmp(NCM_LET,locObsize),STAT=ierr) 
      ALLOCATE(MOBDATA_tmp(NCM_LBO,obsSpaceData%numobs_recorded_l),STAT=ierr) 
      ALLOCATE(ROBDATA_tmp(NCM_LBO,obsSpaceData%numobs_recorded_l),STAT=ierr) 
      ALLOCATE(ROBDATA8_tmp(3:11,obsSpaceData%numobs_recorded_l),STAT=ierr) 
!  
      call obs_allocateG(obsSpaceData,nobtot)
!
!0.1  Sorting locObsTag according to the family ID. 
      IF(l4dvar) THEN
         ALLOCATE(locObsTag_tmp(locObsize),STAT=ierr) 
         ALLOCATE(ObsTagLoc(nobtot),STAT=ierr) 
         ALLOCATE(ObsTagLocRev(nobtot),STAT=ierr) 
         ALLOCATE(locObsTag0(locObsize),STAT=ierr) 
         ObsTagLoc=0 
         locObsTag0=locObsTag
         CALL SORT(locObsTag0,locObsize) 
         ii=0
         DO J=1,NFILES
            DO i=1,locObsize
               iobs=locObsTag(i) 
               ifamid=obsSpaceData%MOBHDR(NCM_OEC,iobs) 
               if(j == ifamid) then
                 ii=ii+1
                 locObsTag_tmp(ii) = iobs  
                 ObsTagLoc(iobs) = ii   
                 ObsTagLocRev(iobs) = i   
               endif
            ENDDO 
         ENDDO 

         locObsTag=locObsTag_tmp
         DEALLOCATE(locObsTag_tmp)  
      ENDIF  
 !  nobtotp and obsSpaceData%mxobstotal are used in CMAABRP of POSTMIN . 
      nobtotp=nobtot
      obsSpaceData%mxobstotal=obsSpaceData%numobs_recorded

!! keep the Global ROBHDR and MOBHDR
      DO iobs=1,nobtotp
        obsSpaceData%MOBHDR_G(1:NCM_LET,iobs)=obsSpaceData%MOBHDR(1:NCM_LET,iobs)
        obsSpaceData%ROBHDR_G(1:NCM_LET,iobs)=obsSpaceData%ROBHDR(1:NCM_LET,iobs)
      ENDDO  
!!
      DO i=1,locObsize 
        iobs=locObsTag(i) 
        ROBHDR_tmp(1:NCM_LET,i)=obsSpaceData%ROBHDR(1:NCM_LET,iobs)
        MOBHDR_tmp(1:NCM_LET,i)=obsSpaceData%MOBHDR(1:NCM_LET,iobs)
        cstnid_tmp(i) = obsSpaceData%cstnid(iobs) 
        cfamily_tmp(i) = obsSpaceData%cfamily(iobs) 
        IF(i== 1) THEN
           MOBHDR_tmp(NCM_RLN,1) = 1
        ELSE
           MOBHDR_tmp(NCM_RLN,i)=MOBHDR_tmp(NCM_RLN,i-1) + MOBHDR_tmp(NCM_NLV,i-1) 
        ENDIF 
      ENDDO !  


      ii=0 
      DO i=1,locObsize
        iobs=locObsTag(i) 
        idata= obsSpaceData%MOBHDR(NCM_RLN,iobs) 
        idataend = obsSpaceData%MOBHDR(NCM_NLV,iobs) + idata -1 
        DO j=idata,idataend 
           ii=ii+1 
           ROBDATA8_tmp(3:11,ii)=obsSpaceData%ROBDATA8(3:11,j)
           MOBDATA_tmp(1:NCM_LBO,ii)=obsSpaceData%MOBDATA(1:NCM_LBO,j) 
           ROBDATA_tmp(1:NCM_LBO,ii)=obsSpaceData%ROBDATA(1:NCM_LBO,j) 
           MOBDATA_tmp(NCM_OBS,ii) = i
        ENDDO 
      ENDDO 
 
!     save the global nobtot and obsSpaceData%numobs_recorded to nobtotp and obsSpaceData%mxobstotal 
      
      nobtot=locObsize  
      obsSpaceData%numobs_recorded=obsSpaceData%numobs_recorded_l
      write(*,*) 'NOBTOT= ',nobtot 
      call obs_deallocate(obsSpaceData)
      call obs_allocate(obsSpaceData,nobtot,obsSpaceData%numobs_recorded)
!
      DO i=1,nobtot
         obsSpaceData%cfamily(i)=cfamily_tmp(i) 
         obsSpaceData%cstnid(i)=cstnid_tmp(i) 
         obsSpaceData%ROBHDR(1:NCM_LET,i)=ROBHDR_tmp(1:NCM_LET,i)
         obsSpaceData%MOBHDR(1:NCM_LET,i)=MOBHDR_tmp(1:NCM_LET,i) 
      ENDDO 

      DO i=1,obsSpaceData%numobs_recorded
         obsSpaceData%ROBDATA8(3:11,i)=ROBDATA8_tmp(3:11,i) 
         obsSpaceData%MOBDATA(1:NCM_LBO,i)=MOBDATA_tmp(1:NCM_LBO,i) 
         obsSpaceData%ROBDATA(1:NCM_LBO,i)=ROBDATA_tmp(1:NCM_LBO,i)
      ENDDO 

      deallocate(cfamily_tmp)
      deallocate(cstnid_tmp)
      deallocate(ROBHDR_tmp)
      deallocate(MOBHDR_tmp)
      deallocate(ROBDATA8_tmp)
      deallocate(MOBDATA_tmp)
      deallocate(ROBDATA_tmp)

   ! re build NBEGINTYP and NENDTYP  
 !============================
      jj=0
      NBEGINTYP_G=NBEGINTYP
      NENDTYP_G=NENDTYP
 
      NBEGINTYP=0
      NENDTYP=0
      DO j=1,NFILES
        lfirst=.true. 
        DO i=1,locObsize
          istart=obsSpaceData%MOBHDR(NCM_RLN,i)
          idata=obsSpaceData%MOBHDR(NCM_NLV,i)
          ifamid=obsSpaceData%MOBHDR(NCM_OEC,i)
          IF(ifamid == J) THEN
             IF(lfirst) THEN
               NBEGINTYP(j) = istart 
               lfirst=.false. 
             ENDIF 
             JJ=JJ+idata 
          ENDIF 
        ENDDO 
        NENDTYP(J) = JJ 
        IF(NBEGINTYP(j) == 0)  NENDTYP(J) = 0
        WRITE(*,*) 'J NBEGINTYP(j) NENDTYP(j)= ',J,NBEGINTYP(j), NENDTYP(j),ifamid
      ENDDO  
      
      WRITE(*,*) '============= Leave reBuildCMA =============='
!!
      RETURN
      END
