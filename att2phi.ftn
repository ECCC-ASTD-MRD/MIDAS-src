!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE att2phi
#if defined (DOC)
*
***s/r att2phi - adjoint of Temperature to phi transformation
*
*
*Author  : S. Pellerin *ARMA/AES September 1998
*
*Revision: L. Fillion *ARMA/AES - 24 nov 98
*        - Include ES option
*Revision: L. Charette *ARMA/AES - 08 dec 98
*        - Added llprint for diagnostics
*Revision: L. Fillion *ARMA/AES - 3 feb 1999
*        - Introduce adjoint of ps dependence of TLM
*Revision: C. Charette *ARMA/AES - 8 feb 1999
*        - Replaced zptop by columng%rppobs(1,jobs)
*          and zpscon by columng%ps(1,jobs)
*
*           JM Belanger CMDA/SMC  Dec 2000
*                   . 32 bits conversion
*                     (replace real constant by REAL*8 alpha in
*                      call to MATAPAT).
*           C. Charette ARMA/SMC FEV. 2002
*            - Commented out the if(llprint...) statements within
*              the do loops. They were preventing vectorization.
*           P. Koclas P. Koclas
*                -changed nesting of loops ( conversion to IBM)
*           C. Charette - ARMA/SMC - Jun. 2003
*                - Conversion to hybrid vertical coordinate
*
*     Purpose:  -call avtap for computation of adjoint of phi to adjoint
*                of tv transformation
**              -Computation of adjoint temperature variable and
*                adjoint of logarith of specific humidity due to virtual
*                temperature increments
#endif
      use MathPhysConstants_mod
      use columnData_mod 

      IMPLICIT NONE
*implicits
*------------------------------------------------------------------------
#include "comlun.cdk"
#include "pardim.cdk"
#include "comdim.cdk"
#include "comcva.cdk"
#include "comdimo.cdk"
#include "comgem.cdk"
*
      integer jobs,jlev
      logical llprint
      real*8 zcon, zalpha, psurf
      real*8 zpresb,zpresbd,zterm
*
**
C
      llprint = .false.
c      llprint = .true.
c
      zalpha=0.0D0
      call matapat(vhybinc,zalpha,nflev)
      call avtap
c
c*    Adjoint of preparation r.h.s. for TL-Hydrostatic equation
c     ---------------------------------------------------------
c
!$OMP PARALLEL DO PRIVATE(jobs,jlev,zpresb,zterm,zpresbd,zcon)

      do jobs = 1, nobtot

        do jlev = 1, nflev
c
c        zcon = d(rtapfac)/d(ps)
c
          zpresb = ((vhybinc(jlev) - rptopinc/rprefinc)
     &               /(1.0D0-rptopinc/rprefinc))**rcoefinc
          if((rcoefinc-1.0) .lt. RPRECIS) then
            zterm = 1.0
          else
            zterm = ((vhybinc(jlev) - rptopinc/rprefinc)
     &              /(1.0-rptopinc/rprefinc))**(rcoefinc-1.0)
          endif
          zpresbd= rcoefinc * zterm
          zcon   = (zpresbd-zpresb*rtapfac(jlev,jobs))/columng%rppobs(jlev,jobs)
          column%ps(1,jobs)=column%ps(1,jobs)+
     &          columng%tt(jlev,jobs)*zcon * column1%tt(jlev,jobs)

          column1%tt(jlev,jobs)=rtapfac(jlev,jobs)*column1%tt(jlev,jobs)

        enddo
      enddo
!$OMP END PARALLEL DO
c
      if(chum.eq.'LQ') then
c
!$OMP PARALLEL DO PRIVATE(jobs,jlev)
        do jobs = 1, nobtot
          do jlev = 1, nflev
            column%tt(jlev,jobs) = column%tt(jlev,jobs)+
     &                        oltv(1,jlev,jobs)*column1%tt(jlev,jobs)
            column%hu(jlev,jobs) = column%hu(jlev,jobs)+
     &                        oltv(2,jlev,jobs)*column1%tt(jlev,jobs)
***************************************************************
c          if(llprint .and. jobs.le.15) then
c             write(nulout,*)'att2phi: jobs,jlev,OLTV(1,,),OLTV(2,,)'
c     &            , jobs,jlev,OLTV(1,jlev,jobs),OLTV(2,jlev,jobs)
c             write(nulout,*)'att2phi:gmt1,GMQ(lev,obs),GMT(lev,obs) '
c     &            ,column1%tt(jlev,jobs),column%hu(jlev,jobs),column%tt(jlev,jobs)
c             call vflush(nulout)
c          endif
***************************************************************
          enddo
        enddo
!$OMP END PARALLEL DO
      endif
c
      return

      contains

      SUBROUTINE AVTAP
*S/P AVTAP: Adjoint de VTAP
C
C AUTHOR: Luc Fillion - ARMA/AES CAN, 21 jul, 11 sep 98
C
C REVISION:
*           S. Pellerin - Sept 97 - Introduction of site constants
*                                   common (comphy)
*                                 - Introduction of surface pressure
*                                   dependant factor (rtapfac) for eta
*                                   coordinates
*                                 - use of column1%tt for virtual temperature
* revision: Luc Fillion - ARMA/AES CAN, 3 feb 1999
*                  - Eliminate rtapfac
*           C.Charette  - ARMA sep 1999
*                  - Added LLPRINT
*           S. Pellerin *ARMA/SMC May 2000
*                  - Fix for F90 conversion
*           C. Charette ARMA/SMC FEV. 2002
*            - Commented out the if(llprint...) statements within
*              the do loops. They were preventing vectorization.
*           Bin He     - ARMA June 2005
*            - OpenMP optimization.
*           C. Charette ARMA/SMC jan. 2005
*            - Replaced print statements by write statements

      use MathPhysConstants_mod
      IMPLICIT NONE
C
      INTEGER  jobs, IKLEVM2, JK, IK
      REAL*8     ZAK, ZBK, ZCK, ZCON
      LOGICAL  LLPRINT
*implicits
#include "comode.cdk"

      integer mythread,numthd,omp_get_thread_num,omp_get_num_threads
c
      LLPRINT = .FALSE.
      ZCON = -RGASD
      IKLEVM2 = nflev-2
!$OMP PARALLEL PRIVATE(jobs,jk,mythread,numthd,zak,zbk,zck)
      mythread=omp_get_thread_num()+1
      numthd=omp_get_num_threads()
      do jobs = mythread, nobtot,numthd
         do jk=1,nflev
            column1%tt(jk,jobs) = 0.0
         enddo
c
      do jk=iklevm2,1,-1
        ik = nflev-1-jk
        zak = -2.0*ZCON*vma(ik+1)
        zbk = -2.0*ZCON*vmb(ik+1)
        zck = -2.0*ZCON*vmc(ik+1)
!        do jobs = 1, nobtot
          column1%tt(ik,jobs)   = column1%tt(ik,jobs)+
     &                       column%gz(ik,jobs)*zak
          column1%tt(ik+1,jobs) = column1%tt(ik+1,jobs)+
     &                       column%gz(ik,jobs)*zbk
          column1%tt(ik+2,jobs) = column1%tt(ik+2,jobs)+
     &                       column%gz(ik,jobs)*zck
           column%gz(ik+2,jobs) = column%gz(ik+2,jobs)+column%gz(ik,jobs)
          column%gz(ik,jobs)  = 0.0
********************************************************
c          IF(LLPRINT .AND. JOBS.EQ.1) THEN
c             write(nulout,*)'avtap:ik,jobs,zak,zbk,zck= '
c     &            ,ik,jobs,zak,zbk,zck
c             write(nulout,*)
c     &            'avtap:ik,jobs,gmt1(ik,),gmt1(ik+1,),gmt1(ik+2,)= '
c     &       ,ik,jobs,column1%tt(IK,jobs),column1%tt(IK+1,jobs),column1%tt(IK+2,jobs)
c             write(nulout,*)'avtap:ik,jobs,column%gz(ik,),column%gz(ik+2,)= '
c     &            ,ik,jobs,column%gz(ik,jobs),column%gz(ik+2,jobs)
c             write(nulout,*)'avtap:ik,jobs= ',ik,jobs
c          ENDIF
**********************************************************
        enddo

      ZAK = -2.0*ZCON*VMA(nflev)
      ZBK = -2.0*ZCON*VMB(nflev)
      ZCK = -2.0*ZCON*VMC(nflev)
!      do jobs = 1, nobtot
        column1%tt(nflev-1,jobs) = column1%tt(nflev-1,jobs)+
     &             ZAK*column%gz(nflev-1,jobs)
        column1%tt(nflev,jobs)   = column1%tt(nflev,jobs)+
     &             ZBK*column%gz(nflev-1,jobs)
        column1%tt(nflev-2,jobs) = column1%tt(nflev-2,jobs)+
     &             ZCK*column%gz(nflev-1,jobs)
        column%gz(nflev-1,jobs)= 0.0
        column%gz(nflev,jobs)  = 0.0
********************************************************
c        IF(LLPRINT .AND. JOBS.EQ.1) THEN
c           write(nulout,*)'avtap:ik,jobs,zak,zbk,zck= ',
c     &          ik,jobs,zak,zbk,zck
c           write(nulout,*)
c     &        'avtap:ik,jobs,column1%tt(nf,),column1%tt(nf-1,),column1%tt(nf-2,)= '
c     &          ,nflev,jobs,column1%tt(NFLEV,jobs),column1%tt(NFLEV-1,jobs)
c     &          ,column1%tt(NFLEV-2,jobs)
c           write(nulout,*)
c     &         'avtap:nflev,jobs,column%gz(nflev,),column%gz(nflev-1,)= '
c     &          ,nflev,jobs,column%gz(nflev,jobs),column%gz(nflev-1,jobs)
c           write(nulout,*)'avtap:nflev,jobs= ',nflev,jobs
c        ENDIF
**********************************************************
      enddo
!$OMP END PARALLEL
C
C
      RETURN
      END SUBROUTINE avtap


      end
