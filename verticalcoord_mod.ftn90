!--------------------------------------- LICENCE BEGIN -----------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------

module verticalCoord_mod
  use mpi_mod
  use MathPhysConstants_mod
  use Vgrid_Descriptors
  use utilities_mod
  implicit none
  private

  ! public derived type
  public :: struct_vco
  ! public procedures
  public :: vco_SetupFromFile, vco_SetupManual, vco_getNumLev, vco_equal
  ! public entities accessed through inheritance
  public :: vgd_get,vgd_levels,vgd_ok,vgd_dpidpis,vgd_write

  type struct_vco
     logical :: initialized=.false.
     integer :: nlev_T= 0
     integer :: nlev_M= 0
     integer :: ip1_sfc  ! ip1 value for the surface (Vcode=5005)
     integer,pointer,dimension(:) :: ip1_T,ip1_M   ! encoded IP1 levels (Thermo/Moment)
     type(vgrid_descriptor) :: vgrid
     character(len=8) :: setuptype
  end type struct_vco

  contains

  subroutine vco_allocate(vco)
    implicit none
    type(struct_vco), pointer :: vco
    integer :: ilnk,stat,nl_stat

    stat        = 0

    ilnk = vco_getNumLev(vco,'MM')
    allocate (vco%ip1_M(ilnk),stat=nl_stat)
    stat = stat + nl_stat

    ilnk = vco_getNumLev(vco,'TH')
    allocate (vco%ip1_T(ilnk),stat=nl_stat)
    stat = stat + nl_stat

    if(stat .ne. 0 ) then
       call utl_abort(' vco: problem with allocate in vco ')
    endif

  end subroutine vco_allocate


  subroutine vco_SetupManual(vco,ip1,numLev)
    implicit none
    type(struct_vco), pointer :: vco
    integer, intent(in) :: numLev
    integer, intent(in) :: ip1(numlev)

    integer :: ip1_sfc
    character(len=10) :: blk_S

    write(*,*) 
    write(*,*) 'vco_SetupManual: Creating an adhoc verticalgrid using'
    write(*,*) '                   number of level = ', numLev
    write(*,*) '                   ip1             = ', ip1

    if (.not.associated(vco)) allocate(vco)

    vco%setupType = 'Manual'
 
    vco%nlev_T    = numLev
    vco%nlev_M    = numLev
    !vco%vgrid    = ???

    call vco_allocate(vco)

    vco%ip1_T(:)  = ip1(:)
    vco%ip1_M(:)  = ip1(:)

    ! determine IP1 of sfc (hyb=1.0)
    call convip(ip1_sfc, 1.0, 5, 2, blk_s, .false.)

    vco%ip1_sfc   = ip1_sfc  ! ip1 value for the surface (Vcode=5005)

    vco%initialized=.true.

  end subroutine vco_SetupManual


  subroutine vco_SetupFromFile(vco,templatefile,etiket,beSilent)
    !  s/r vco_SetupFromFile - Initialize structure for a standard file using vgrid_descriptors library.
    implicit none
    type(struct_vco),pointer :: vco
    character(len=*) :: templatefile
    character(len=*) :: etiket
    logical, optional :: beSilent

    integer :: Vcode,kind,jlev,jlev2,stat,sigdigits,nultemplate,ierr,ikey
    integer :: fnom,fstouv,fstfrm,fclos,fstinf,fstprm
    integer :: vgd_nlev_M, vgd_nlev_T
    integer,   pointer :: vgd_ip1_M(:),vgd_ip1_T(:)
    integer :: ip1_sfc
    real    :: hyb_r4
    real*8  :: zterm
    character(len=10) :: blk_S
    logical :: isExist_L, ip1_found
    integer :: ni,nj,nk
    character(len=4) :: nomvar_T, nomvar_M

    if(present(beSilent)) then
      if( .not.beSilent ) then
        write(*,*) 'vco_SetupFromFile: WARNING: you specified "beSilent=.false."'
        write(*,*) '                   but this s/r only checks the presence of beSilent'
        write(*,*) '                   and not its value, so it will be silent!'
      endif
    endif

    if(mpi_myid.eq.0 .and. .not.present(beSilent)) then
      write(*,*) 'vco_SetupFromFile: TEMPLATEFILE=', templatefile
    endif
    inquire(file=templatefile,exist=isExist_L)
    if( isExist_L )then
      nultemplate=0
      ierr=fnom(nultemplate,templatefile,'RND+OLD+R/O',0)
      if( ierr .eq. 0 ) then
        if(mpi_myid.eq.0 .and. .not.present(beSilent)) then
          write(*,*) ' opened as unit file ',nultemplate
        endif
        ierr =  fstouv(nultemplate,'RND+OLD')
      else
        call utl_abort('vco_SetupFromFile: CANNOT OPEN TEMPLATE FILE!')
      endif
    else
      call utl_abort('vco_SetupFromFile: CANNOT FIND TEMPLATE FILE!')
    endif

    if(.not.associated(vco)) allocate(vco)

    vco%setupType='FromFile'

    !==========================================================================
    ! Get vertical coordinate descriptors from standard file (vgd_new reads "!!" record)
  
    stat = vgd_new(vco%vgrid,unit=nultemplate,format="fst",ip1=-1,ip2=-1)
    if(stat.ne.VGD_OK)then
      call utl_abort('ERROR with vgd_new')
    endif

    ! Print out vertical structure 
    if(mpi_myid.eq.0 .and. .not.present(beSilent)) then
      stat = vgd_print(vco%vgrid)
      if(stat.ne.VGD_OK)then
        call utl_abort('ERROR with vgd_print')
      endif
    endif

    !==========================================================================
    ! Get version of the vertical coordinate

    stat = 0
    stat = vgd_get(vco%vgrid,key='ig_1 - vertical coord code',value=Vcode)
    if(stat.ne.VGD_OK) then
      call utl_abort('vco: problem with vgd_get: key= ig_1 - vertical coord code')
    endif

    ! Get vgrid values for ip1
    stat = 0

    stat = vgd_get(vco%vgrid,key='vipm - vertical levels (m)',value=vgd_ip1_m)
    stat = stat + VGD_OK

    stat = vgd_get(vco%vgrid,key='vipt - vertical ip1 levels (t)',value=vgd_ip1_t)
    stat = stat + VGD_OK

    if(stat.ne.0) then
      call utl_abort('vco: problem with vgd_get')
    endif

    vgd_nlev_M = size(vgd_ip1_M)
    vgd_nlev_T = size(vgd_ip1_T)

    !==========================================================================
    ! Set the number of vertical levels and allocate vco arrays

    vco%nlev_T = 0
    nomvar_T = 'TT  '
    do jlev = 1, vgd_nlev_T
      ikey = fstinf(nultemplate, ni, nj, nk, -1 ,etiket, vgd_ip1_T(jlev), -1, -1, ' ', nomvar_T)
      if(ikey.gt.0) vco%nlev_T = vco%nlev_T + 1
    enddo
    if(vco%nlev_T.eq.0) then
      if(mpi_myid.eq.0 .and. .not.present(beSilent)) then 
        write(*,*) 'vco: TT not found looking for UT to get nlev_T'
      endif
      nomvar_T = 'UT  '
      do jlev = 1, vgd_nlev_T
        ikey = fstinf(nultemplate, ni, nj, nk, -1 ,etiket, vgd_ip1_T(jlev), -1, -1, ' ', nomvar_T)
        if(ikey.gt.0) vco%nlev_T = vco%nlev_T + 1
      enddo
    endif
    if(vco%nlev_T.eq.0) then
      write(*,*) 'vco_setupfromfile: template file name=',templatefile
      write(*,*) 'vco_setupfromfile: etiket=',etiket
      write(*,*) 'vco_setupfromfile: variable name=',nomvar_T
      call utl_abort('vco_setupfromfile: Could not find a valid thermodynamic variable in the template file!')
    endif

    vco%nlev_M = 0
    nomvar_M = 'UU  '
    do jlev = 1, vgd_nlev_M
      ikey = fstinf(nultemplate, ni, nj, nk, -1 ,etiket, vgd_ip1_M(jlev), -1, -1, ' ', nomvar_M)
      if(ikey.gt.0) vco%nlev_M = vco%nlev_M + 1
    enddo
    if(vco%nlev_M.eq.0) then
      if(mpi_myid.eq.0 .and. .not.present(beSilent)) then
        write(*,*) 'vco: UU not found looking for PP to get nlev_M'
      endif
      nomvar_M = 'PP  '
      do jlev = 1, vgd_nlev_M
        ikey = fstinf(nultemplate, ni, nj, nk, -1 ,etiket, vgd_ip1_M(jlev), -1, -1, ' ', nomvar_M)
        if(ikey.gt.0) vco%nlev_M = vco%nlev_M + 1
      enddo
    endif
    if(vco%nlev_M.eq.0) then
      if(mpi_myid.eq.0 .and. .not.present(beSilent)) then
        write(*,*) 'vco: PP not found looking for QR to get nlev_M'
      endif
      nomvar_M = 'QR  '
      do jlev = 1, vgd_nlev_M
        ikey = fstinf(nultemplate, ni, nj, nk, -1 ,etiket, vgd_ip1_M(jlev), -1, -1, ' ', nomvar_M)
        if(ikey.gt.0) vco%nlev_M = vco%nlev_M + 1
      enddo
    endif
    if(vco%nlev_M.eq.0) then
      write(*,*) 'vco_setupfromfile: template file name=',templatefile
      write(*,*) 'vco_setupfromfile: etiket=',etiket
      write(*,*) 'vco_setupfromfile: variable name=',nomvar_M
      call utl_abort('vco_setupfromfile: Could not find a valid momentum variable in the template file!')
    endif

    if(mpi_myid.eq.0 .and. .not.present(beSilent)) then
      write(*,*) 'vco: nlev_M, nlev_T=',vco%nlev_M,vco%nlev_T
    endif
    
    call vco_allocate(vco)

    !==========================================================================
    ! Define levels ip1 for momentum levels

    ! Match up ip1 values from file and vgrid
    jlev2 = 0
    do jlev = 1, vgd_nlev_M
      ikey = fstinf(nultemplate, ni, nj, nk, -1 ,etiket, vgd_ip1_M(jlev), -1, -1, ' ', nomvar_M)
      if(ikey.gt.0) then
        jlev2 = jlev2 + 1
        if(jlev2.gt.vco%nlev_M) then
          call utl_abort('vco: Problem with consistency between vgrid descriptor and template file (momentum)')
        endif
        vco%ip1_M(jlev2) = vgd_ip1_M(jlev)
      else
        if(mpi_myid.eq.0 .and. .not.present(beSilent)) then
          write(*,*) 'vco: did not find a momentum level in the template file, ip1 =',vgd_ip1_M(jlev)
        endif
      endif
    enddo

    !==========================================================================
    ! Define levels ip1 for thermo levels

    ! Match up ip1 values from file and vgrid
    jlev2 = 0
    do jlev = 1, vgd_nlev_T
      ikey = fstinf(nultemplate, ni, nj, nk, -1 ,etiket, vgd_ip1_T(jlev), -1, -1, ' ', nomvar_T)
      if(ikey.gt.0) then
        jlev2 = jlev2 + 1
        if(jlev2.gt.vco%nlev_T) then
          call utl_abort('vco: Problem with consistency between vgrid descriptor and template file (thermo)')
        endif
        vco%ip1_T(jlev2) = vgd_ip1_T(jlev)
      else
        if(mpi_myid.eq.0 .and. .not.present(beSilent)) then
          write(*,*) 'vco: did not find a thermo level in the template file, ip1 =',vgd_ip1_T(jlev)
        endif
      endif
    enddo

    !==========================================================================
    ! Define level ip1 for surface (only used for Vcode=5005)

    ! determine IP1 of sfc (hyb=1.0)
    call convip(ip1_sfc, 1.0, 5, 2, blk_s, .false.) 
    ip1_found = .false.
    do jlev2 = 1, vgd_nlev_T
      if(ip1_sfc .eq. vgd_ip1_T(jlev2)) then
        ip1_found = .true.
        vco%ip1_sfc = vgd_ip1_T(jlev2)
      endif
    enddo
    if(.not.ip1_found) then
      write(*,*) 'vco: Could not find IP1=',ip1_sfc
      call utl_abort('vco: No surface level found in Vgrid!!!')
    endif

    do jlev = 1, vco%nlev_M
      if(mpi_myid.eq.0 .and. .not.present(beSilent)) then
        write(*,*) 'vco: jlev,nk,ip1(moment)= ',   & 
             jlev,vco%nlev_M,vco%ip1_M(jlev)
      endif
    enddo
    do jlev = 1,vco%nlev_T
      if(mpi_myid.eq.0 .and. .not.present(beSilent)) then
        write(*,*) 'vco: jlev,nk,ip1(thermo)= ',  &
             jlev,vco%nlev_T,vco%ip1_T(jlev)
      endif
    enddo

    !==========================================================================

    vco%initialized=.true.

    ierr =  fstfrm(nultemplate)
    ierr =  fclos (nultemplate)

  end subroutine vco_SetupFromFile


  function vco_getNumLev(vco,varLevel) result(nlev)
    implicit none
    type(struct_vco), pointer    :: vco
    character(len=*), intent(in) :: varLevel
    integer                      :: nlev

    if(varLevel.eq.'MM') then
      nlev = vco%nlev_M
    elseif(varLevel.eq.'TH') then
      nlev = vco%nlev_T
    elseif(varLevel.eq.'SF') then
      nlev = 1
    else
      call utl_abort('vco_getNumLev: Unknown variable type! ' // varLevel)
    endif

  end function vco_getNumLev


  function vco_equal(vco1,vco2) result(equal)
    implicit none
    type(struct_vco), pointer :: vco1, vco2
    logical                   :: equal

    equal = .true.

    if ( trim(vco1%setupType) == 'fromFile' .and. trim(vco2%setupType) == 'fromFile' ) then
       equal = equal .and. (vco1%vgrid == vco2%vgrid)
       if (.not. equal) then
          write(*,*) 'vco_equal: vgrid not equal'
          return
       endif
    else
       ! At least one vco was manually setup where vgrid is not defined
       equal = equal .and. (vco1%nlev_T == vco2%nlev_T)
       if (.not. equal) then
          write(*,*) 'vco_equal: nlev_T not equal', vco1%nlev_T, vco2%nlev_T
          return
       endif
       equal = equal .and. (vco1%nlev_M == vco2%nlev_M)
       if (.not. equal) then
          write(*,*) 'vco_equal: nlev_M not equal', vco1%nlev_M, vco2%nlev_M
          return
       endif
       equal = equal .and. all(vco1%ip1_T(:) == vco2%ip1_T(:))
       if (.not. equal) then
          write(*,*) 'vco_equal: ip1_T not equal'
          return
       endif
       equal = equal .and. all(vco1%ip1_M(:) == vco2%ip1_M(:))
       if (.not. equal) then
          write(*,*) 'vco_equal: ip1_M not equal'
          return
       endif
       equal = equal .and. (vco1%ip1_sfc == vco2%ip1_sfc)
       if (.not. equal) then
          write(*,*) 'vco_equal: ip1_sfc not equal'
          return
       endif

    end if

  end function vco_equal

end module VerticalCoord_mod
