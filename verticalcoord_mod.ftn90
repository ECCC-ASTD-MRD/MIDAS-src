module verticalCoord_mod

  use Vgrid_Descriptors
  implicit none


  type vco
     integer :: iversion          ! code of vert coord from !! record in BG stat file
     integer :: ikind               ! kind of vertical coordinate(a la convip)
     character(len=8) :: svcod      ! type of vertical coordinate (cvcord in 3DVAR)
     integer :: nlev_T,nlev_M         ! Number of vertical levels (Thermo/Moment)
     real*8  :: dpt_T, dpt_M        ! Pressure at top level    (Thermo/Moment)
     real*8  :: dprf_T, dprf_M      ! Reference pressure       (Thermo/Moment)
     real*8  :: drcf1, drcf2        ! Expansion coefficients
     integer,pointer,dimension(:) :: ip1_T,ip1_M   ! encoded IP1 levels (Thermo/Moment)
     real*8 ,pointer,dimension(:) :: da_T,db_T     ! A, B values for Thermo levels
     real*8 ,pointer,dimension(:) :: da_M,db_M     ! A, B values for Momentum levels
     real*8 ,pointer,dimension(:) :: dhyb_T,dhyb_M !decoded IP1 levels (Thermo/Momentum)
  end type vco

  type(vco)  :: vco_anl,vco_trl
  type(vgrid_descriptor) :: vgrid_anl,vgrid_trl
  save :: vgrid_anl,vgrid_trl,vco_anl,vco_trl

  contains

  subroutine vco_allocate(tf_vco)
    implicit none
    type(vco) :: tf_vco
    integer :: ilnk,stat,nl_stat

    stat        = 0

    ilnk        = tf_vco%nlev_m
    allocate (tf_vco%ip1_m(ilnk),stat=nl_stat)
    stat = stat + nl_stat
    allocate (tf_vco%da_m(ilnk),stat=nl_stat)
    stat = stat + nl_stat
    allocate (tf_vco%db_m(ilnk),stat=nl_stat)
    stat = stat + nl_stat
    allocate (tf_vco%dhyb_m(ilnk),stat=nl_stat)
    stat = stat + nl_stat

    ilnk        = tf_vco%nlev_t
    allocate (tf_vco%ip1_t(ilnk),stat=nl_stat)
    stat = stat + nl_stat
    allocate (tf_vco%da_t(ilnk),stat=nl_stat)
    stat = stat + nl_stat
    allocate (tf_vco%db_t(ilnk),stat=nl_stat)
    stat = stat + nl_stat
    allocate (tf_vco%dhyb_t(ilnk),stat=nl_stat)
    stat = stat + nl_stat

    if(stat .ne. 0 ) then
       write(*,*)' suvco: problem with allocate in tf_vco '
       call flush(6)
       call qqexit(1)
    endif

  end subroutine vco_allocate

      subroutine vco_SetupFromFile(tf_vgrid,tf_vco,kulfst)
!
!--------------------------------------------------------------------------
!  s/r vco_SetupFromFile - Initialize structure for a standard file using vgrid_descriptors library.
!
!  Author  : C. Charette ARMA (DEC 2010)
!
!    -------------------
!
!  Arguments     : 
!  Input           tf_vgrid: Structure with vertical coordinate parameters
!                            (see vgrid_descriptors documentation)
!--------------------------------------------------------------------------
      !
      implicit none
      type(vgrid_descriptor) :: tf_vgrid
      type(vco) :: tf_vco
      integer ::  kulfst

!     Local variables
!
      integer :: ivcode,kind,j,stat
      integer,   dimension(:), pointer :: my_ip1
      real    :: hyb
      real*8  :: dl_ptM,dl_ptT,dl_pref,dl_rcf1,dl_rcf2
      real*8,    dimension(:), pointer :: my_a, my_b
      character(len=10) :: blk_S

  !==========================================================================
  ! Get vertical coordinate descriptors from standard file(vgd_new reads "!!" record)
  
   stat = vgd_new(tf_vgrid,unit=kulfst,format="fst",ip1=-1,ip2=-1)
   if(stat.ne.VGD_OK)then
      print*,'ERROR with vgd_new'
      call exit(1)
   endif

   ! Print out vertical structure 
   stat = vgd_print(tf_vgrid)
   if(stat.ne.VGD_OK)then
      print*,'ERROR with vgd_print'
      call exit(1)
   endif
      !==========================================================================
      ! Get version of the vertical coordinate

      stat = 0
      stat = vgd_get(tf_vgrid,key='ig_1 - vertical coord code',value=ivcode)
      if(stat.ne.VGD_OK) then
         print*,"suvco: problem with vgd_get: key='ig_1 - vertical coord code'"
         return
      endif

!      ivcode = kind*1000 + version 
      tf_vco%ikind    = ivcode/1000
      tf_vco%iversion = ivcode
      
      if(ivcode.eq.1002) tf_vco%svcod='etage'    ! eta vertical coord
      if(ivcode.eq.5001) tf_vco%svcod='gemhyb'   ! unstaggered hybride vertical coord 
      if(ivcode.eq.5002) tf_vco%svcod='gemstg'   ! staggered hybride vertical coord
      
      print*,'suvco: vcode,kind,cvcod ',ivcode,tf_vco%ikind,tf_vco%svcod

      !==========================================================================
      ! Process momentum levels (ip1, A, B)
      ! (unstaggered  vertical coord are stored in momentum levels in "!!" records)

      stat = 0
      stat = vgd_get(tf_vgrid,key='ca_m - vertical a coefficient (m)',value=my_a)
      stat = stat + VGD_OK
      print*,'suvco: vgd_get ca_m vgd_ok= ',VGD_OK
      !
      stat = vgd_get(tf_vgrid,key='cb_m - vertical b coefficient (m)',value=my_b)
      stat = stat + VGD_OK
      print*,'suvco: vgd_get cb_m vgd_ok= ',VGD_OK
      !
      stat = vgd_get(tf_vgrid,key='vipm - vertical levels (m)',value=my_ip1)
      stat = stat + VGD_OK
      print*,'suvco: vgd_get vipm vgd_ok= ',VGD_OK
      !
!cnwa
      stat = vgd_get(tf_vgrid,key='ptop - pressure at top level (m)',value=dl_ptM)
      stat = stat + VGD_OK
      print*,'suvco: vgd_get vipm vgd_ok= ',VGD_OK
      !
      stat = vgd_get(tf_vgrid,key='pref - reference pressure (m)',value=dl_pref)
      stat = stat + VGD_OK
      print*,'suvco: vgd_get vipm vgd_ok= ',VGD_OK
      !
      stat = vgd_get(tf_vgrid,key='rc_1 - coefficient value for rectification (m)',value=dl_rcf1)
      stat = stat + VGD_OK
      print*,'suvco: vgd_get vipm vgd_ok= ',VGD_OK
      !
!cnwa      
      if(stat.ne.0) then
         print*,'suvco: problem with vgd_get'
         return
      endif

      if(size(my_a).gt.0 .and. size(my_b).gt.0 .and. size(my_ip1).gt.0 )then 
         print*,'suvco: size(a,b,ip1)(m)= ',size(my_a),size(my_b),size(my_ip1)
      else
         print*,'suvco: problem with size(a,b,ip1)(m) in vgd_get'
         return
      endif

!cnwa
      tf_vco%dpt_M  = dl_ptM
      tf_vco%dprf_M = dl_pref
      tf_vco%drcf1  = dl_rcf1
!cnwa      

      !==========================================================================
      ! Set the number of vertical levels and allocate tf_vco arrays

      tf_vco%nlev_m = size(my_ip1)
      select case (ivcode)
      case (5001)
         tf_vco%nlev_t = tf_vco%nlev_m
      case (5002)
         stat = vgd_get(tf_vgrid,key='vipt - vertical ip1 levels (t)',value=my_ip1)
         tf_vco%nlev_t = size(my_ip1)
      end select
      call vco_allocate(tf_vco)

      !==========================================================================
      ! Assign values for Momentum levels

      print*,'suvco: size(hyb)= ',size(tf_vco%dhyb_m)
      do j = 1, size(my_ip1)
         tf_vco%ip1_m(j) = my_ip1(j)
         tf_vco%da_m(j)   = my_a(j)
         tf_vco%db_m(j)   = my_b(j)
         call convip(my_ip1(j),hyb,kind,-1,blk_s,.false.)
         tf_vco%dhyb_m(j) = hyb
         print*,'suvco: j,nk,ip1,hyb(moment)= ' & 
               ,j,tf_vco%nlev_m,tf_vco%ip1_m(j),tf_vco%dhyb_m(j)
      enddo

      !==========================================================================
      ! Process thermodynamic levels 

      select case (ivcode)
      case (5001)          ! unstaggered hybride
         ! For this case the parameters of the momentum levels 
         ! are copied to the thermodynamics levels
         !
!cnwa
         tf_vco%dpt_T  = tf_vco%dpt_M  ! dl_ptM
         tf_vco%dprf_T = tf_vco%dprf_M ! dl_pref
         tf_vco%drcf2  = tf_vco%drcf1  ! dl_rcf1
!cnwa      
         !
         !==========================================================================
         do j = 1, tf_vco%nlev_m
            tf_vco%ip1_t(j)  = tf_vco%ip1_m(j)
            tf_vco%da_t(j)   = tf_vco%da_m(j)
            tf_vco%db_t(j)   = tf_vco%db_m(j)
            tf_vco%dhyb_t(j) = tf_vco%dhyb_m(j)
            print*,'suvco: j,nk,ip1,hyb(thermo)= ' &
                  ,j,tf_vco%nlev_t,tf_vco%ip1_t(j),tf_vco%dhyb_t(j)
         enddo
      case (5002)
         stat = 0
         stat = vgd_get(tf_vgrid,key='ca_t - vertical a coefficient (t)',value=my_a)
         stat = stat + VGD_OK
         print*,'suvco: vgd_get ca_t vgd_ok= ',VGD_OK
         stat = vgd_get(tf_vgrid,key='cb_t - vertical b coefficient (t)',value=my_b)
         stat = stat + VGD_OK
         print*,'suvco: vgd_get cb_t vgd_ok= ',VGD_OK
         stat = vgd_get(tf_vgrid,key='vipt - vertical ip1 levels (t)',value=my_ip1)
         stat = stat + VGD_OK
         print*,'suvco: vgd_get vipt vgd_ok= ',VGD_OK
         if(stat.ne.0) then
            print*,'suvco: problem with vgd_get'
            return
         endif

         if(size(my_a).gt.0 .and. size(my_b).gt.0 .and. size(my_ip1).gt.0 )then 
            print*,'suvco: size(a,b,ip1)(t)= ',size(my_a),size(my_b),size(my_ip1)
         else
            print*,'suvco: problem with size(a,b,ip1)(t) in vgd_get'
            return
         endif

         do j = 1,tf_vco%nlev_t
            tf_vco%ip1_t(j)  = my_ip1(j)
            tf_vco%da_t(j)   = my_a(j)
            tf_vco%db_t(j)   = my_b(j)
            call convip(my_ip1(j),hyb,kind,-1,blk_s,.false.)
            tf_vco%dhyb_t(j) = hyb
            print*,'suvco: j,nk,ip1,hyb(thermo)= ' &
                  ,j,tf_vco%nlev_t,tf_vco%ip1_t(j),tf_vco%dhyb_t(j)
         enddo
      end select
      print*,'suvco dbug: tf_vco%nlev_t = ',tf_vco%nlev_t

      end subroutine vco_SetupFromFile

end module VerticalCoord_mod
