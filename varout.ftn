      SUBROUTINE varout(kulfile,statevector,zes,ztv,zgz,zhu)
#if defined (DOC)
*
***s/r varout  - Transfert of the content of COMGD0 on a RPN
*     .          standard file
*
*Author  : S. Pellerin *ARMA/AES  April 2000
*
#endif
C
      use MathPhysConstants_mod
      use gridStateVector_mod
      use minimization_mod
      IMPLICIT NONE
#include "compost.cdk"
      integer kulfile
      type(struct_gsv) :: statevector
      real*8 :: zes(statevector%ni,statevector%nlev,statevector%nj)
      real*8 :: ztv(statevector%ni,statevector%nlev,statevector%nj)
      real*8 :: zgz(statevector%ni,statevector%nlev,statevector%nj)
      real*8 :: zhu(statevector%ni,statevector%nlev,statevector%nj)
      integer write_encode_hyb,vfstecr
      integer jvar,jlev,ierr
      integer ibrpstamp,inpak_inc
      real*8 zwork
      real   zptop4, zpref4,zrcoef4,zdummy
      integer nip1,nip2,nip3,ndeet,npas,nidatyp,nig1,nig2,nig3,nig4
      character(len=1)  :: cgrtyp
      character(len=2)  :: cltypinc
      character(len=12) :: cletiket
      real*8 :: zlowvar(statevector%ni,statevector%nj)
      LOGICAL llimplemented,llvarout
!
      WRITE(*,FMT='(/,4X,"Starting VAROUT",//)')
c
      if(kulfile.eq.0) then
        write(*,*) 'varout: unit number for rebm file not valid!'
        return
      endif

      WRITE(*,FMT='(/,4X,''Transfer of the gridpoint model'',
     S     '' state on file at iteration No.'',I3)')
     S     min_niter
c
      ndeet=0
      NIP2       =  0
      NIP3       =  min_niter
      NPAS       =  0
      NIDATYP    =  1
      CGRTYP     = 'G'
      CLTYPINC   = 'R'
      NIG1       =  0
      NIG2       =  0
      NIG3       =  0
      NIG4       =  0
      cletiket=cetikinc
      ibrpstamp=gsv_getDateStamp(statevector)

      write(*,*) 'Writing fields for ibrpstamp= ',ibrpstamp
c
c ****************************************************************
c
      write(*,*) 'Writing variable HY on analysis-increment file'
c
      zptop4 = statevector%vco%dpt_M*MPC_MBAR_PER_PA_R8
      zpref4 = statevector%vco%dprf_M*MPC_MBAR_PER_PA_R8
      zrcoef4 = statevector%vco%drcf1
      ierr    = write_encode_hyb(kulfile,'HY',nip2,nip3,cletiket
     &              ,ibrpstamp,zptop4,zpref4,zrcoef4)
c
c-----Analysis grid hybride vertical coordinate parameters
c

      write(*,*)' '
      write(*,*)'************************************** '
      write(*,*)
     &     ' The hybride coordinate parameters from increment'
     &     ,' analysis  grid are:'
      write(*,*) ' PTOP = ',statevector%vco%dpt_M*MPC_MBAR_PER_PA_R8,' MB'
      write(*,*) ' PREF = ',statevector%vco%dprf_M*MPC_MBAR_PER_PA_R8,' MB'
      write(*,*) ' RCOEF= ',statevector%vco%drcf1
      write(*,*)'************************************** '
      write(*,*)' '
c
c-----Setup packing for each variable
c
      inpak_inc  = -32                  ! 32 bits are needed by AAI
      write(*,*)' '
      write(*,*)'************************************** '
      write(*,*)
      write(*,*) 'PACKING for increments   is ',inpak_inc
      write(*,*)' '
      write(*,*)'************************************** '
c
      do jvar = 1, nppcvar
c
c Some variable may be request for other to be computed but not
c necessaraly wanted as output..
c
        if(cppcvar(jvar).eq.'TT'.and..not.lttout) cycle
        if(cppcvar(jvar).eq.'HU'.and..not.lhuout) cycle
c
        llimplemented = .true.
c
        write(*,*) 'Writing variable ',cppcvar(jvar)
c
        do jlev=1,statevector%nlev
          call gdout2(cppcvar(jvar),ZLOWVAR,jlev,
     &         llimplemented,nip1,nig2,statevector,zes,ztv,zgz,zhu)
          if(.not.llimplemented) exit
c
          IERR  = VFSTECR(ZLOWVAR,zwork,inpak_inc
     &       ,kulfile,ibrpstamp,ndeet,npas,statevector%ni,statevector%nj,1,nip1
     &       ,nip2,nip3,cltypinc,cppcvar(jvar),cletiket,cgrtyp,nig1
     &       ,nig2,nig3,nig4,nidatyp,.true.)
c
          if(nip1.eq.0) exit
c
        enddo
c
      enddo
c
      write(*,*) 'END of VAROUT'
c
      RETURN
      END
