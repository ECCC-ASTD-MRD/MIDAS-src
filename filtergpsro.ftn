!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE FILTERGPSRO(lcolumnhr,lobsSpaceData)
#if defined (DOC)
*
***s/r FILTERGPSRO - filter out   GPSRO observations 
*
*
*Author  : J. M. Aparicio Jan 2008
*    -------------------
**    Purpose:
*** - Set bit of cma flag to 11 on to the GPSRO observations for certain conditions
*
*Arguments
*
#endif
      use EarthConstants_mod
      use MathPhysConstants_mod
      use modgps04profile
      use modgps05refstruct
      use modgps06gravity
      use modgps07geostruct
      use modgps08refop
      use obsSpaceData_mod
      use columnData_mod 
      IMPLICIT NONE
*implicits
#include "pardim.cdk"
#include "comlun.cdk"
#include "cvcord.cdk"
#include "comgpsro.cdk"
*
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData
      type(struct_vco), pointer :: vco_trl
      REAL*8 ZLAT, Lat
      REAL*8 ZLON, Lon
      REAL*8 ZETA(JPNFLEV)
      REAL*8 ZTT (JPNFLEV)
      REAL*8 ZHU (JPNFLEV)
      REAL*8 ZGZ (JPNFLEV)
      REAL*8 ZPRF (JPNFLEV)
      REAL*8 ZP0
      REAL*8 ZPT, ZPR, ZCF, ZTP
      REAL*8 ZMT
      REAL*8 DH,DDH
      REAL*8 BIAS
      REAL*8 HNH1, HSF, HTP, SUM0, SUM1, HGP
C
      REAL*8 ZOBS, ZMHX, ZOER, ZINC
C
      INTEGER JF
      INTEGER IBEGIN  , ILAST
      INTEGER IBEGINOB, ILASTOB, JO, JD
      INTEGER IDATYP
      INTEGER IDATA   , IDATEND, JDATA
      INTEGER JL, JH,  NGPSLEV
C
      LOGICAL  ASSIM

      INTEGER NH, NH1
      TYPE(GPSPROFILE)           :: PRF 

      WRITE(NULOUT,*)'ENTER FILTERGPSRO'
C
C     * 1.  Initializations
C     *     ---------------
C

C
C     *    .   1.1  Eta vector
C     *    .        ----------
C
      NGPSLEV=col_getNumLev(LCOLUMNHR,'TH')
      vco_trl => col_getVco(lcolumnhr)
      DO JL = 1, NGPSLEV
         ZETA(JL) = vco_trl%dhyb_T(JL)
      ENDDO
C
C     Loop over all files
C
      DO JF = 1, NFILES
         IF ( CFAMTYP(JF).EQ.'RO' .AND. NBEGINTYP(JF).GT.0 ) THEN
            IBEGIN   = NBEGINTYP(JF)
            ILAST    = NENDTYP  (JF)
            IBEGINOB = obs_elem_i(lobsSpaceData,'OBS ',IBEGIN)
            ILASTOB  = obs_elem_i(lobsSpaceData,'OBS ',ILAST )
C
C     *     Loop over all observations of the file
C
            DO JO = IBEGINOB, ILASTOB
C     
C     *        Process only refractivity data (codtyp 169)
C
               IDATYP = MOD(obs_elem_i(lobsSpaceData,'ITY ',JO),1000)
               IF ( IDATYP .EQ. 169 ) THEN
C
C                 Loops over data in the observation
C
                  IDATA   = obs_elem_i(lobsSpaceData,'RLN ',JO)
                  IDATEND = obs_elem_i(lobsSpaceData,'NLV ',JO) + IDATA - 1
                  ASSIM = .FALSE.
C
C                 Scan for requested assimilations, and count them
C
                  ASSIM = .TRUE.
                  NH = IDATEND-IDATA+1
C
                  Lat  = obs_elem_r4(lobsSpaceData,'LAT ',JO)
                  Lon  = obs_elem_r4(lobsSpaceData,'LON ',JO)
                  ZLAT = Lat * MPC_DEGREES_PER_RADIAN_R8
                  ZLON = Lon * MPC_DEGREES_PER_RADIAN_R8
                  DO JL = 1, col_getNumLev(LCOLUMNHR,'TH')
C
C     *           Profile x
C
                     ZTT(JL) = col_getElem(lcolumnhr,JL,JO,'TT')-273.15
                     ZHU(JL) = col_getElem(lcolumnhr,JL,JO,'HU')
                     ZGZ(JL) = col_getHeight(lcolumnhr,JL,JO,'TH')
                  ENDDO
                  ZP0 = col_getElem(lcolumnhr,1,JO,'P0')
                  ZPT = col_getPressure(LCOLUMNHR,1,JO,'TH')
                  ZMT = ZGZ(col_getNumLev(LCOLUMNHR,'TH'))/RG
                  ZMT = gpsgeopotential(Lat, ZMT)/RG
                  ZTP = ZGZ(1)/RG
                  ZPR = vco_trl%dprf_M
                  ZCF = vco_trl%drcf1
C     
C     *           GPS profile structure:
C
C                  CALL GPSSTRUCT1H(NGPSLEV,ZLAT,ZLON,ZETA,
C     +                 ZTT,ZHU,ZP0,ZMT,ZPT,ZPR,ZCF,PRF)
                  HSF=ZMT+SURFMIN
                  IF (HSF .LT. HSFMIN) HSF=HSFMIN
                  HTP=ZTP
                  IF (HTP .GT. HTPMAX) HTP=HTPMAX
C
C     *           Prepare the vector of all the observations:
C
                  DO JDATA= IDATA, IDATEND
                     HNH1= obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
                     IF ( HNH1.GE.0. .AND. HNH1.LE.HTPMAX ) THEN
                        HGP = gpsgeopotential(Lat,HNH1)/9.80616
                        IF ( HGP.GT.HTP .OR. 
     +                       HGP.LT.HSF ) THEN
                           call obs_set_i(lobsSpaceData,'ASS ',JDATA, 0)
                           call obs_set_i(lobsSpaceData,'FLG ',JDATA, IBSET(obs_elem_i(lobsSpaceData,'FLG ',JDATA),11))
                        ENDIF
                     ENDIF
                  ENDDO
               ENDIF
            ENDDO
         ENDIF
      ENDDO
      WRITE(NULOUT,*)'EXIT FILTERGPSRO'
      RETURN
      END
