!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE FILTERGPSRO(lcolumnhr,lobsSpaceData)
#if defined (DOC)
*
***s/r FILTERGPSRO - filter out   GPSRO observations 
*
*
*Author  : J. M. Aparicio Jan 2008
*    -------------------
**    Purpose:
*** - Set bit of cma flag to 11 on to the GPSRO observations for certain conditions
*
*Arguments
*
#endif
      use EarthConstants_mod
      use MathPhysConstants_mod
      use modgps04profile
      use modgps05refstruct
      use modgps06gravity
      use modgps07geostruct
      use modgps08refop
      use obsSpaceData_mod
      use columnData_mod 
      IMPLICIT NONE
*implicits
#include "comgpsro.cdk"
*
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData
      type(struct_vco), pointer :: vco_trl
      REAL*8 Lat
      REAL*8 ZMT
      REAL*8 HNH1, HSF, HTP, HGP
C
      INTEGER INDEX_HEADER
      INTEGER IDATYP
      INTEGER INDEX_BODY
      INTEGER JL, NGPSLEV
C
      WRITE(*,*)'ENTER FILTERGPSRO'
C
C     * 1.  Initializations
C     *     ---------------
C

C
C     *    .   1.1  Eta vector
C     *    .        ----------
C
      NGPSLEV=col_getNumLev(LCOLUMNHR,'TH')
      vco_trl => col_getVco(lcolumnhr)
C
C
      ! loop over all header indices of the 'RO' family
      call obs_set_current_header_list(lobsSpaceData,'RO')
      HEADER: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER
C     
C     *        Process only refractivity data (codtyp 169)
C
         IDATYP = obs_elem_i(lobsSpaceData,'ITY ',INDEX_HEADER)
               IF ( IDATYP .EQ. 169 ) THEN
C
            Lat  = obs_elem_r(lobsSpaceData,'LAT ',INDEX_HEADER)
C
            JL=col_getNumLev(LCOLUMNHR,'TH')
            ZMT = col_getHeight(lcolumnhr,JL,INDEX_HEADER,'TH')/RG
            ZMT = gpsgeopotential(Lat, ZMT)/RG
C     
            JL = 1
            HTP = col_getHeight(lcolumnhr,JL,INDEX_HEADER,'TH')/RG
C
                  HSF=ZMT+SURFMIN
                  IF (HSF .LT. HSFMIN) HSF=HSFMIN
                  IF (HTP .GT. HTPMAX) HTP=HTPMAX
C
C     *           Prepare the vector of all the observations:
C
            ! loop over all body indices for this index_header
            call obs_set_current_body_list(lobsSpaceData, index_header)
            BODY: do 
               index_body = obs_getBodyIndex(lobsSpaceData)
               if (index_body < 0) exit BODY

               HNH1= obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY)
                     IF ( HNH1.GE.0. .AND. HNH1.LE.HTPMAX ) THEN
                        HGP = gpsgeopotential(Lat,HNH1)/9.80616
                        IF ( HGP.GT.HTP .OR. 
     +                       HGP.LT.HSF ) THEN
                     call obs_set_i(lobsSpaceData,'ASS ',INDEX_BODY, 0)
                     call obs_set_i(lobsSpaceData,'FLG ',INDEX_BODY, IBSET(obs_elem_i(lobsSpaceData,'FLG ',INDEX_BODY),11))
                     ENDIF
               ENDIF
            ENDDO BODY

         ENDIF

      ENDDO HEADER

      WRITE(*,*)'EXIT FILTERGPSRO'

      RETURN
      END
