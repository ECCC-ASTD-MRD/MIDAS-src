!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE DOBSPPP(PJO,CDFAM,lcolumnhr,lobsSpaceData)
#if defined (DOC)
!
!**s/r DOBSPPP  - Computation of Jo and the residuals to the observations
!                 for pressure-level observations
!
!*    Purpose:  -Interpolate vertically lcolumnhr to
!                the pressure levels of the observations. Then compute Jo.
!                A linear interpolation in ln(p) is performed.
!
!Arguments
!     PJO:  CONTRIBUTION to Jo
!     CDFAM: FAMILY OF OBSSERVATION
!
#endif
      use MathPhysConstants_mod
      use obsSpaceData_mod
      use columnData_mod 
      use bufr
      IMPLICIT NONE
      REAL*8 PJO
      CHARACTER *2 CDFAM
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData
      INTEGER IPB,IPT,IDBURP
      INTEGER IOBS,IK,IBEGIN,ILAST
      INTEGER J,JDATA
      INTEGER IASS,IXTR,IVCO,IVNM
      REAL*8 ZVAR,ZOER,ZCON,ZINC,ZPHI
      REAL*8 ZWB,ZWT,ZEXP,ZGAMMA,ZTVG
      REAL*8 ZLEV,ZPT,ZPB,ZTORAD,ZOMA
      REAL*8 columnVarB,columnVarT,lqtoes
      REAL*4 ZLAT,ZLON
      LOGICAL LLPRINT,LLNOXTR
      CHARACTER*2 varType,varName
      real*8,pointer :: col_ptr(:),col_ptr_tt(:),col_ptr_hu(:)
!
!     Temperature lapse rate for extrapolation of gz below model surface
!
      LLPRINT   = .FALSE.
      LLNOXTR   = .FALSE.
      zgamma = 0.0065 / GRAV
      zexp = MPC_RGAS_DRY_AIR_R8*zgamma
!
!     1. Computation of (HX - Z)/SIGMA
!
      PJO=0.
      do jdata=1,obs_numbody(lobsSpaceData)
         if(obs_getFamily(lobsSpaceData,bodyIndex=jdata).eq.CDFAM) then
!
! Process all data within the domain of the model
!
            iass=obs_elem_i (lobsSpaceData,'ASS ',jdata)
            ixtr=obs_elem_i (lobsSpaceData,'XTR ',jdata)
            ivco=obs_elem_i (lobsSpaceData,'VCO ',jdata)
            IVNM=obs_elem_i (lobsSpaceData,'VNM ',jdata)
            ZVAR=obs_elem_r8(lobsSpaceData,'VAR ',jdata)
            ZLEV=obs_elem_r8(lobsSpaceData,'PPP ',jdata)
            ZOER=obs_elem_r8(lobsSpaceData,'OER ',jdata)
            IOBS=obs_elem_i (lobsSpaceData,'OBS ',jdata)

            IF ( (iass.EQ.1).AND.(ixtr.EQ.0).AND.(ivco.EQ.2) ) THEN
               IK  =obs_elem_i (lobsSpaceData,'LYR ',jdata)
               varName = vnl_varnameFromVarnum(ivnm)
               varType = vnl_vartypeFromVarnum(IVNM)
               ZPT= col_getPressure(lcolumnhr,ik  ,iobs,varType)
               ZPB= col_getPressure(lcolumnhr,ik+1,iobs,varType)
               ZWB  = LOG(ZLEV/ZPT)/LOG(ZPB/ZPT)
               ZWT  = 1. - ZWB
               if(ivnm.eq.bufr_nees) then
                 col_ptr_hu=>col_getColumn(lcolumnhr,iobs,'HU')
                 col_ptr_tt=>col_getColumn(lcolumnhr,iobs,'TT')
                 columnVarB=lqtoes(col_ptr_hu(IK+1),col_ptr_tt(IK+1),ZPB)
                 columnVarT=lqtoes(col_ptr_hu(IK  ),col_ptr_tt(IK  ),ZPT)
               else
                 col_ptr=>col_getColumn(lcolumnhr,iobs,varName)
                 columnVarB=col_ptr(IK+1)
                 columnVarT=col_ptr(IK  )
               endif
               zoma = (ZWB*columnVarB+ZWT*columnVarT-ZVAR)/ZOER
               PJO = PJO + zoma*zoma
               call obs_set_r8(lobsSpaceData,'OMA ',jdata,zoma)
               call obs_set_r8(lobsSpaceData,'OMI ',jdata,zoma)
!
! Process all upper air data data below model's orography
!
            ELSEIF ( (iass.EQ.1).AND.(ixtr.EQ.2).AND.(ivco.EQ.2) ) THEN
               IF(IVNM .EQ. BUFR_NEGZ ) THEN
!
! Forward nonlinear model for geopotential data below model's orography
!
                  ZTVG = (1.0 + MPC_DELTA_R8 * EXP(col_getElem(lcolumnhr,col_getNumLev(LCOLUMNHR,'TH'),IOBS,'HU')))
     &                     *col_getElem(lcolumnhr,col_getNumLev(LCOLUMNHR,'TH'),IOBS,'TT')
                  zoma = ( col_getMountain(lcolumnhr,iobs) + ZTVG/zgamma
     &                     *(1.-(zlev/col_getElem(lcolumnhr,1,iobs,'P0'))**zexp) - zvar )/zoer
                  PJO =PJO+zoma*zoma
                  call obs_set_r8(lobsSpaceData,'OMA ',jdata,zoma)
                  call obs_set_r8(lobsSpaceData,'OMI ',jdata,zoma)
               ENDIF
            ENDIF
         ENDIF
      ENDDO

      IF(LLNOXTR) THEN
        WRITE(*,*)'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
        WRITE(*,*)' Warning 3DV:dobsppp: NO EXTRAPOLATION'
     &       ,' ALLOWED SEE LISTING FOR MORE DETAILS'
        WRITE(*,*)'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
      ENDIF

      RETURN
      END

