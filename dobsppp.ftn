!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE DOBSPPP(PJO,CDFAM,lcolumnhr,lobsSpaceData)
#if defined (DOC)
!
!**s/r DOBSPPP  - Computation of Jo and the residuals to the observations
!                 for pressure-level observations
!
!*    Purpose:  -Interpolate vertically lcolumnhr to
!                the pressure levels of the observations. Then compute Jo.
!                A linear interpolation in ln(p) is performed.
!
!Arguments
!     PJO:  CONTRIBUTION to Jo
!     CDFAM: FAMILY OF OBSSERVATION
!
#endif
      use EarthConstants_mod
      use MathPhysConstants_mod
      use obsSpaceData_mod
      use columnData_mod 
      use bufr
      IMPLICIT NONE
      REAL*8 PJO
      CHARACTER(len=*) :: CDFAM
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData
      INTEGER IPB,IPT,IDBURP
      INTEGER INDEX_HEADER,IK,IBEGIN,ILAST
      INTEGER J,INDEX_BODY
      INTEGER IASS,IXTR,IVCO,IVNM
      REAL*8 ZVAR,ZOER,ZCON,ZINC,ZPHI
      REAL*8 ZWB,ZWT,ZEXP,ZGAMMA,ZTVG
      REAL*8 ZLEV,ZPT,ZPB,ZTORAD,ZOMA
      REAL*8 columnVarB,columnVarT,lqtoes
      REAL*4 ZLAT,ZLON
      LOGICAL LLPRINT,LLNOXTR
      CHARACTER(len=4) :: varName
      CHARACTER(len=2) :: varType
      real*8,pointer :: col_ptr(:),col_ptr_tt(:),col_ptr_hu(:)
!
!     Temperature lapse rate for extrapolation of gz below model surface
!
      LLPRINT   = .FALSE.
      LLNOXTR   = .FALSE.
      zgamma = 0.0065 / GRAV
      zexp = MPC_RGAS_DRY_AIR_R8*zgamma
!
!     1. Computation of (HX - Z)/SIGMA
!
      PJO=0.
      call obs_set_current_body_list(lobsSpaceData, CDFAM)
      BODY: do
         index_body = obs_getBodyIndex(lobsSpaceData)
         if (index_body < 0) exit BODY
      
!
! Process all data within the domain of the model
!
         iass=obs_bodyElem_i (lobsSpaceData,NCM_ASS,index_body)
         ixtr=obs_bodyElem_i (lobsSpaceData,NCM_XTR,index_body)
         ivco=obs_bodyElem_i (lobsSpaceData,NCM_VCO,index_body)
         IVNM=obs_bodyElem_i (lobsSpaceData,NCM_VNM,index_body)
         ZVAR=obs_bodyElem_r(lobsSpaceData,NCM_VAR,index_body)
         ZLEV=obs_bodyElem_r(lobsSpaceData,NCM_PPP,index_body)
         ZOER=obs_bodyElem_r(lobsSpaceData,NCM_OER,index_body)
         INDEX_HEADER=obs_bodyElem_i (lobsSpaceData,NCM_OBS,index_body)

         IF ( (iass.EQ.1).AND.(ixtr.EQ.0).AND.(ivco.EQ.2) ) THEN
            IK  =obs_bodyElem_i (lobsSpaceData,NCM_LYR,index_body)
            varName = vnl_varnameFromVarnum(ivnm)
            varType = vnl_vartypeFromVarnum(IVNM)
            ZPT= col_getPressure(lcolumnhr,ik  ,index_header,varType)
            ZPB= col_getPressure(lcolumnhr,ik+1,index_header,varType)
            ZWB  = LOG(ZLEV/ZPT)/LOG(ZPB/ZPT)
            ZWT  = 1. - ZWB
            if(ivnm.eq.bufr_nees) then
               col_ptr_hu=>col_getColumn(lcolumnhr,index_header,'HU')
               col_ptr_tt=>col_getColumn(lcolumnhr,index_header,'TT')
               columnVarB=lqtoes(col_ptr_hu(IK+1),col_ptr_tt(IK+1),ZPB)
               columnVarT=lqtoes(col_ptr_hu(IK  ),col_ptr_tt(IK  ),ZPT)
            else
               col_ptr=>col_getColumn(lcolumnhr,index_header,varName)
               columnVarB=col_ptr(IK+1)
               columnVarT=col_ptr(IK  )
            endif
            zoma = (ZWB*columnVarB+ZWT*columnVarT-ZVAR)/ZOER
            PJO = PJO + zoma*zoma
            call obs_bodySet_r(lobsSpaceData,NCM_OMA,index_body,zoma)
            call obs_bodySet_r(lobsSpaceData,NCM_OMI,index_body,zoma)
!
! Process all upper air data data below model's orography
!
         ELSEIF ( (iass.EQ.1).AND.(ixtr.EQ.2).AND.(ivco.EQ.2) ) THEN
            IF(IVNM .EQ. BUFR_NEGZ ) THEN
!
! Forward nonlinear model for geopotential data below model's orography
!
               ZTVG = (1.0 + MPC_DELTA_R8 * EXP(col_getElem(lcolumnhr,col_getNumLev(LCOLUMNHR,'TH'),INDEX_HEADER,'HU')))
     &                  *col_getElem(lcolumnhr,col_getNumLev(LCOLUMNHR,'TH'),INDEX_HEADER,'TT')
               zoma = ( col_getMountain(lcolumnhr,index_header) + ZTVG/zgamma
     &                  *(1.-(zlev/col_getElem(lcolumnhr,1,index_header,'P0'))**zexp) - zvar )/zoer
               PJO =PJO+zoma*zoma
               call obs_bodySet_r(lobsSpaceData,NCM_OMA,index_body,zoma)
               call obs_bodySet_r(lobsSpaceData,NCM_OMI,index_body,zoma)
            ENDIF
         ENDIF
      ENDDO BODY

      IF(LLNOXTR) THEN
        WRITE(*,*)'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
        WRITE(*,*)' Warning 3DV:dobsppp: NO EXTRAPOLATION'
     &       ,' ALLOWED SEE LISTING FOR MORE DETAILS'
        WRITE(*,*)'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
      ENDIF

      RETURN
      END

