!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE SETERRGPSGB(columnhr,lobsSpaceData,ldata,analysisMode)
*
*s/r SETERRGPSGB - SET OBSERVATION ERROR COVARIANCES FOR GB-GPS ZTD DATA
*
*Author  : S. Macpherson  March 2013
*Revisions: 
*     S. Macpherson  May 2015
*         - If Psfc obs is missing, use BACKGROUND STATE Psfc,Tsfc,dz to estimate Psfc obs.
*           Added updated ZTD error vs ZWD regression coeffs based on summer 2014
*           O-P and O-A stats and Desroziers-type error estimates (NOAA and E-GVAP network data).
*           **The updated coeffs are NOT applied in this version**
*
*    S. Macpherson  October 2015
*         - Apply new ZTD observation errors based on Desroziers estimates. ZTD error is still
*           function of ZWD. New regression constant and coeff based on errors estimated using
*           Desroziers method applied to O-A, O-P data from GDPS-5.0 summer 2014 and winter 2015
*           final cycles (5 months total). Constant and coeff are means from summer and winter 
*           cycles so are no longer month-dependent.
*         - Use ZWD observations directly, when available, rather than estimating it from Psfc.
*           Requires modification to EnVar namelist: Add element 15035 (ZWD) to &NAMBURP_FILTER_SFC
*           section surface element list BLISTELEMENTS_SFC.
*         - Set Std(O-P) as function of ZWD for bgck mode (s/r BGCDATA); store in col. OBS_HPHT.
*         - Add "analysisMode" argument.
*
**    Purpose:
*             - Set the observation errors [OBS_OER] and Std(O-P) [OBS_HPHT] for GB-GPS ZTD data.
*               (GPS surface met obs errors are set before in observation_erreurs_mod.ftn90.
*               The ZTD error is also initialized to the "formal error" or to 1.0 if missing.)
*             - Returns ldata=.false. if there are no GPS ZTD data to assimilate
*               and also sets the modgpsztd_mod variable numGPSZTD = 0.
*
      use EarthConstants_mod
      use MathPhysConstants_mod
      use obsSpaceData_mod
      use bufr
      use modgpsztd_mod
      use columnData_mod
      IMPLICIT NONE
C
C NOTE: YZDERRWGT IN modgpsztd_mod (FROM NML FILE) IS USED FOR ERROR WEIGHTING
C       OF TIME SERIES (FGAT) GPS ZTD OBSERVATIONS TO ACCOUNT FOR TEMPORAL ERROR
C       CORRELATIONS.
C
      type(struct_columnData) :: columnhr
      type(struct_obs)        :: lobsSpaceData
      logical                 :: ldata
      logical                 :: analysisMode

      INTEGER INDEX_BODY, INDEX_HEADER, ITYP, IASS, IZTDJ, NBRPDATE, ICOUNT, ICOUNT2
      integer ielem, nlev_T

      LOGICAL LLCZTDE, LLFER, LLFZTDE, LLZTD, LLRZTDE, ASSIM, ERRSET, DEBUG, LESTP
      LOGICAL LLZWD

C
      REAL*8  ZTDERR, ZZTD, ZMINZDE, ZPSFC, ZHD, ZWD, ZTDOER, ZLEV, ZVAL, ZZWD
      REAL*8  ZBTSFC, ZBPSFC, ZBZSFC, ZDZ, ZSTDOMP
     
C
C     ZZDERMIN = MIN ZTD OER VALUE (M), ZZFERREJ = MAX FERR VALUE (M) FOR REJECTION
C     ZZDERMAX = MAX ZTD OER VALUE (M)
C     ZTDERFAC = MULTIPLICATION FACTOR FOR FORMAL ZTD MEASUREMENT ERROR
C     ZOPEFAC  = FRACTION OF REGRESSION EQUATION SD(O-P) TO USE AS ZTD OBSERVATION ERROR
C     ----------------------------------------------------------------------------------
C
      REAL*8 ZZDERMIN, ZZFERREJ, ZZDERMAX, ZTDERFAC, ZOPEFAC
      DATA ZZDERMIN /0.004D0/
      DATA ZZFERREJ /0.015D0/
      DATA ZZDERMAX /0.030D0/
      DATA ZTDERFAC /3.0D0/
      DATA ZOPEFAC  /1.0D0/
C
C     FOR ESTIMATION OF PSFC (IF MISSING)
C       ZGAMMA = (NEG. OF) TEMPERATURE LAPSE RATE (K/M)
C
      REAL*8 ZGAMMA
      DATA ZGAMMA /0.0065D0/
      
C     ----------------------------------------------------------------------------------
C     LINEAR REGRESSION EQUATION CONSTANTS AND COEFFS FOR ZTD ERROR AND STD(O-P):

c     ZRCONST, ZRCOEFF:
c       - From linear regression of Desroziers error estimates binned by observed ZWD.
c       - Gives ZTDerror (mm) as function of ZWD (m):
c            ZTDerror(mm) = ZRCONST + ZRCOEFF*ZWD(m)
c     ZRCONST2, ZRCOEFF2:
c       - From linear regression of Std(O-P) binned by observed ZWD.
c       - Gives Std(O-P) (mm) as function of ZWD (m):
c            Std(O-P)(mm) = ZRCONST2 + ZRCOEFF2*ZWD(m)
c     ----------------------------------------------------------------------------------
      REAL*8 ZRCONST, ZRCOEFF, ZRCONST2, ZRCOEFF2
      DATA  ZRCONST  /5.12D0/
      DATA  ZRCOEFF  /26.4D0/
      DATA  ZRCONST2 /6.67D0/
      DATA  ZRCOEFF2 /42.6D0/
C
C
      WRITE(*,*) 'ENTER SETERRGPSGB'
C
      DEBUG = .FALSE.

      LLCZTDE = .FALSE.
      LLRZTDE = .FALSE.
      LLFZTDE = .FALSE.
      IF (YZTDERR .LT. 0.0D0) THEN
         LLFZTDE = .TRUE.
      ELSE IF (YZTDERR .GT. 0.0D0) THEN
         LLCZTDE = .TRUE.
      ELSE
         LLRZTDE = .TRUE.
      ENDIF
      
      nlev_T = col_getNumLev(columnhr,'TH')
      
      ldata = .false.
      ICOUNT  = 0
      ICOUNT2 = 0
C
C     Loop over all header indices of the 'GP' family:
C
      call obs_set_current_header_list(lobsSpaceData,'GP')
      HEADER: DO
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER
         NBRPDATE  = obs_headElem_i(lobsSpaceData,OBS_DAT,INDEX_HEADER)
         LLZTD     = .FALSE.
         LLFER     = .FALSE.
         LLZWD     = .FALSE.
         ASSIM     = .FALSE.
         ERRSET    = .FALSE.
         ZZTD      = -1.0D0
         ZZWD      = -1.0D0
         ZPSFC     = -1.0D0
         LESTP     = .FALSE.
         ZSTDOMP   = 15.0D0*0.001D0

c   Get Psfc (Pa), Tsfc (K) and model surface height (m) from background profile

         ZBPSFC = col_getElem(columnhr,1,index_header,'P0')
         ZBTSFC = col_getElem(columnhr,nlev_T,index_header,'TT')
         ZBZSFC = col_getHeight(columnhr,nlev_T,index_header,'TH')/RG
c
C    Loop over all body indices of current report; Set the ZTD error if
C    constant value specified (LLCZTDE=true). Get GPS height and Psfc obs (if any).
C    Get ZTD obs, ZTD formal error and ZWD observation.
c
         call obs_set_current_body_list(lobsSpaceData, INDEX_HEADER)
         BODY: DO 
            index_body = obs_getBodyIndex(lobsSpaceData)
            if (index_body < 0) exit BODY
            ITYP   = obs_bodyElem_i(lobsSpaceData,OBS_VNM,INDEX_BODY)
            IASS   = obs_bodyElem_i(lobsSpaceData,OBS_ASS,INDEX_BODY)
            ZVAL   = obs_bodyElem_r(lobsSpaceData,OBS_VAR,INDEX_BODY)
C         Store Psfc
            IF ( ITYP .EQ. BUFR_NEPS ) THEN
                IF ( ZVAL .GT. 0.0D0 ) ZPSFC = ZVAL
            ENDIF
C         Set ZTDOER to constant value (if LLCZTDE); get value of ZTD, 
C         ZTD formal error (OBS_OER) and antenna height (OBS_PPP).
            IF ( ITYP .EQ. BUFR_NEZD ) THEN
                IF ( LLCZTDE ) THEN
                  ZTDOER = YZTDERR
                  ERRSET = .TRUE.
                ENDIF
                ZLEV   = obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY)
                ZTDERR = obs_bodyElem_r(lobsSpaceData,OBS_OER,INDEX_BODY)
                IF ( ZTDERR .NE. 1.0D0 ) LLFER = .TRUE.
                IZTDJ = INDEX_BODY
                IF ( ZVAL .GT. 0.0D0 ) THEN
                  ZZTD = ZVAL
                  LLZTD = .TRUE.
                ENDIF
                IF ( IASS .EQ. 1 ) ASSIM = .TRUE.
            ENDIF
            IF ( ITYP .EQ. BUFR_NEZW ) THEN
               IF ( ZVAL .GT. 0.0D0 ) THEN
                  ZZWD = ZVAL
                  LLZWD = .TRUE.
               ENDIF
            ENDIF
         ENDDO BODY
         
c      Initialize Std(O-P) to 15 mm  for ZTD observation (for bgck mode)
         IF ( LLZTD .AND. .NOT.analysisMode) 
     &       call obs_bodySet_r(lobsSpaceData,OBS_HPHT,IZTDJ,ZSTDOMP)

c      Replace formal ZTD error with real error for all ZTD to be assimilated.
c      Set Std(O-P) as function of ZWD for ZTD observation and store in OBS_HPHT. 

         IF ( ASSIM ) THEN
           IF ( LLZTD ) THEN
             ldata = .true.
             ICOUNT = ICOUNT + 1
               IF ( LLZWD ) THEN
                 ZWD = ZZWD
               ELSE
c               If Psfc obs is missing, estimate the pressure from background state
                 IF ( ZPSFC .LT. 0.0D0 ) THEN
                   LESTP = .TRUE.
                   ZDZ = ZLEV - ZBZSFC
                   ZPSFC  = ZBPSFC *
     &                 (1.0D0-(ZGAMMA/ZBTSFC)*ZDZ)**(RG/(MPC_RGAS_DRY_AIR_R8*ZGAMMA))
                   ICOUNT2 = ICOUNT2 + 1
                 ENDIF
c                Compute the hydrostatic delay ZHD (m) from Psfc (Pa)
                 ZHD = 2.2766D-05 * ZPSFC
c               Compute the wet delay (m) from ZTD and ZHD. Avoid negative ZWD.
                 IF ( ZHD .GT. ZZTD ) THEN
                   ZWD = 0.0D0
                 ELSE
                   ZWD = ZZTD - ZHD
                 ENDIF
               ENDIF
C              Std(O-P) for background check. Limit to 30 mm in case ZTD obs is bad (too high).             
               ZSTDOMP = (ZRCONST2 + ZRCOEFF2*ZWD)*0.001D0
               ZSTDOMP = MIN(ZZDERMAX, ZSTDOMP)
C             Compute ZTD error as a function of ZWD using regression coeff (SD(O-P) vs ZWD).
c             Take fraction ZOPEFAC of computed error and convert from mm to m.
c             Ensure error is > ZZDERMIN and < ZZDERMAX
               IF ( .NOT. ERRSET ) THEN 
                 ZMINZDE = ZRCONST + ZRCOEFF*ZWD
                 ZMINZDE = ZMINZDE * ZOPEFAC * 0.001D0
                 IF (LLRZTDE) THEN
                   ZTDOER = MAX(ZZDERMIN, ZMINZDE)
                   ZTDOER = MIN(ZZDERMAX, ZTDOER)
                 ELSE
                   IF (LLFER) THEN
                     ZTDOER = MAX(ZZDERMIN, ZTDERR*ZTDERFAC)
                   ELSE
                     ZTDOER = MAX(ZZDERMIN, ZMINZDE)
                     ZTDOER = MIN(ZZDERMAX, ZTDOER)
                   ENDIF
                 ENDIF
C  Ensure that error is not less than formal error ZTDERR
                 IF (LLFER) THEN
                   IF (DEBUG .AND. ICOUNT .LE. 50) THEN
                    WRITE(*,*) obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),
     &               ' FORMAL ERR, OBS ERROR (mm) = ', 
     &               ZTDERR*1000.D0, ZTDOER*1000.D0
                   ENDIF
                   ZTDOER = MAX(ZTDOER, ZTDERR)
                 ENDIF
               ENDIF
C  *** APPLY TIME-SERIES WEIGHTING FACTOR TO OBSERVATION ERROR (YZDERRWGT=1 FOR 3D THINNING)
             call obs_bodySet_r(lobsSpaceData,OBS_OER,IZTDJ, ZTDOER*YZDERRWGT)
             IF (.NOT.analysisMode) call obs_bodySet_r(lobsSpaceData,OBS_HPHT,IZTDJ, ZSTDOMP)
             IF (DEBUG .AND. (ICOUNT2 .LE. 50) .AND. LESTP) THEN
               WRITE(*,*) 'TAG    SITE    ZTD    ERROR    ELEV    PSFC    ZWD     STDOMP'
               WRITE(*,*) 'ERRDEBUG ', obs_elem_c(lobsSpaceData,'STID',INDEX_HEADER),
     &         ZZTD*1000.D0, ZTDOER*1000.D0, ZLEV, ZPSFC/100.D0, ZWD*1000.D0, ZSTDOMP*1000.D0
             ENDIF
           ELSE
               CALL ABORT3D('SETERRGPSGB: ERROR:NEGATIVE ZTD VALUE!')
           ENDIF
         ENDIF       

c
      ENDDO HEADER

c      IF (DEBUG) CALL ABORT3D('******DEBUG STOP*******')
      
      IF (.not.ldata) numGPSZTD = 0
      
      IF (ldata) WRITE(*,*) ' numGPSZTD = ', ICOUNT
      
      WRITE(*,*) 'EXIT SETERRGPSGB'
      
      RETURN

      END SUBROUTINE SETERRGPSGB


