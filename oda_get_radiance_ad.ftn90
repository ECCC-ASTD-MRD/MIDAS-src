!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
subroutine oda_get_radiance_ad(lobsSpaceData)
#if defined (doc)
!
!Purpose:
!Get the adjoint residual and store it radiance_ad structure
!
!author        : Simon Pellerin, ARMA, January 2009
!                Based on subroutine written by J. Halle
!
!revision      : Sylvain Heilliette:
!                Add IASI data (codtyp 186)
!              : Alain Beaulne / Real Sarrazin
!                Add GeoRad data (codtyp 185)
!
#endif
   use mod_tovs
   use obsSpaceData_mod

   implicit none
!implicits
#include "comdimo.cdk"
#include "comlun.cdk"
#include "partov.cdk"
#include "comtov.cdk"

  type(struct_obs) :: lobsSpaceData
   integer :: isens, indxchn, indxtovs
   real(8) :: zres
   integer idatyp
   integer ichn
   integer, dimension(:), allocatable :: list_header, list_body
   integer :: size_list_header, index_list_header, index_header
   integer :: size_list_body,   index_list_body,   index_body

   integer  isrcheq
   external isrcheq
   external abort3d

   if(nobtov.eq.0) return    ! exit if there are no tovs data

   allocate(list_header( obs_num_stn     (lobsSpaceData) ))
   allocate(list_body  ( obs_num_obstotal(lobsSpaceData) ))

   ! loop over all header indices of the 'TO' family
   call obs_getHeaderIndices(lobsSpaceData, 'TO', list_header, size_list_header)
   do index_list_header = 1, size_list_header
      index_header = list_header(index_list_header)
  !  .  1.1  Extract general information for this observation point
  !  .       ------------------------------------------------------

  !      process only radiance data to be assimilated?
  !      (data type=[164,168,180,181,182,183,185,186])
      idatyp = mod(obs_elem_i(lobsSpaceData,'ITY ',index_header),1000)
      if ( idatyp .ne. 164 .and.  &
           idatyp .ne. 168 .and.  &
           idatyp .ne. 180 .and.  &
           idatyp .ne. 181 .and.  &
           idatyp .ne. 182 .and.  &
           idatyp .ne. 183 .and.  &
           idatyp .ne. 185 .and.  &
           idatyp .ne. 186          ) then
         cycle                          ! Proceed to the next index_header
      end if

      indxtovs = ltovsno(index_header)
      if ( indxtovs .eq. 0 ) then
         write(nulout,fmt=9203)
9203     format(' tovs_calc_jo_ad: error with indxtovs')
         call abort3d(nulout,'tovs_calc_jo_ad ')
      endif

      radiance_ad (indxtovs) % out(:) = 0.
      if (rttov_errorstatus(indxtovs) .lt. 20   ) then
         isens = lsensor(indxtovs)

         ! loop over all body indices (still in the 'TO' family)
         call obs_getBodyIndices(lobsSpaceData, index_header, &
                                 list_body, size_list_body)
         do index_list_body = 1, size_list_body
            index_body = list_body(index_list_body)
            if ( obs_elem_i(lobsSpaceData,'ASS ',index_body).eq.1 ) then
               ichn = nint(obs_elem_r8(lobsSpaceData,'PPP ',index_body))
               ichn = max(0,min(ichn,jpch+1))
               if(idatyp.ne.183 .and. idatyp.ne.186) ichn=ichn-chanoffset(isens)
               indxchn = isrcheq (ichan(:,isens),nchan(isens),ichn)
               if ( indxchn .eq. 0 ) then
                  write(nulout,fmt=9202)
9202              format(' tovs_calc_jo_ad: error with channel number')
                  call abort3d(nulout,'tovs_calc_jo_ad  ')
               endif
               zres = obs_elem_r8(lobsSpaceData,'OMI ',index_body)
               radiance_ad (indxtovs) % out(indxchn) = zres
            endif
         enddo
      endif
   enddo

   deallocate(list_header)
   deallocate(list_body)

end subroutine oda_get_radiance_ad
