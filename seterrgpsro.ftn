!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE SETERRGPSRO(lcolumnhr,lobsSpaceData)
#if defined (DOC)
*
***s/r SETERRGPSRO - Computation of the estimated errors for GPSRO observations
*
*
*Author  : J. M. Aparicio Apr 2008
*    -------------------
**    Purpose:
*
*Arguments
*     None
*
#endif
      use EarthConstants_mod
      use MathPhysConstants_mod
      use modgps04profile
      use modgps05refstruct
      use modgps06gravity
      use modgps07geostruct
      use modgps08refop
      use obsSpaceData_mod
      use columnData_mod 
      IMPLICIT NONE
*implicits
#include "pardim.cdk"
#include "comlun.cdk"
#include "comgpsro.cdk"
*
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData
      REAL*8 PJO, PJOB, PJOM, PJOX, PJO1
      type(struct_vco), pointer :: vco_trl
C
      REAL*8 ZLAT, Lat
      REAL*8 ZLON, Lon
      REAL*8 ZETA(JPNFLEV)
      REAL*8 ZPP (JPNFLEV),ZDP (JPNFLEV)
      REAL*8 ZTT (JPNFLEV)
      REAL*8 ZHU (JPNFLEV)
      REAL*8 ZGZ (JPNFLEV)
      REAL*8 ZP0
      REAL*8 ZPT, ZPR, ZCF
      REAL*8 ZMT
      REAL*8 DH,DDH
      REAL*8 HNH1, ZOBS, SUM0, SUM1
C
      REAL*8 ZMHX
C
      INTEGER IDATYP
      INTEGER JL, JH, NGPSLEV
C
      LOGICAL  ASSIM, LSTAG

      INTEGER NH, NH1, IERR
      TYPE(GPSPROFILE)           :: PRF 
      REAL(DP)     , ALLOCATABLE :: H   (:), HGT(:)
      REAL(DP)     , ALLOCATABLE :: ZOFF(:),ZERR(:)
      TYPE(GPSDIFF), ALLOCATABLE :: RSTV(:)

      integer :: index_header, index_body

      WRITE(NULOUT,*)'ENTER SETERRGPSRO'
C
      vco_trl => col_getVco(lcolumnhr)
      LSTAG = .FALSE.
      if (vco_trl%iversion .eq. 5002) then
        LSTAG = .TRUE. 
        WRITE(NULOUT,*)'VERTICAL COORD OF TRIAL FIELDS IS STAGGERED'
        WRITE(NULOUT,*)'VCODE= ',vco_trl%iversion,' LSTAG= ',LSTAG
        WRITE(NULOUT,*)'!!!!!!!!! CAUTION !!!!!!!!!!!!'
        WRITE(NULOUT,*)'STAGGERING NOT YET IMPLEMENTED IN DERIVATIVES'
      else
        WRITE(NULOUT,*)'VERTICAL COORD OF TRIAL FIELDS IS NOT STAGGERED'
        WRITE(NULOUT,*)'VCODE= ',vco_trl%iversion,' LSTAG= ',LSTAG
      endif
C
C     * 1.  Initializations
C     *     ---------------
C
C     *    .   1.1  Eta vector
C     *    .        ----------
C
      NGPSLEV=col_getNumLev(LCOLUMNHR,'TH')
      DO JL = 1, NGPSLEV
         ZETA(JL) = vco_trl%dhyb_T(JL)
      ENDDO
C
C*    *        1.2 Read the NAMELIST NAMGGPSRO
C     *       ---------------------------------------
      CALL READNML('NAMGPSRO',IERR)
      write(NULOUT,*)'NAMGPSRO',SURFMIN,HSFMIN,HTPMAX,BGCKBAND

      !
      ! loop over all header indices of the 'RO' family
      !
                                        ! Set the header list
                                        ! (& start at the beginning of the list)
      call obs_set_current_header_list(lobsSpaceData,'RO')
      HEADER: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER

C     
C     *  Process only refractivity data (codtyp 169)
C
         IDATYP = MOD(obs_elem_i(lobsSpaceData,'ITY ',INDEX_HEADER),1000)
         IF ( IDATYP .EQ. 169 ) THEN
            ASSIM = .FALSE.
C
C           Scan for requested assimilations, and count them
C
            NH = 0

            !
            ! loop over all body indices (still in the 'RO' family)
            !
                                        ! Set the body list
                                        ! (& start at the beginning of the list)
            call obs_set_current_body_list(lobsSpaceData, index_header)
            BODY: do 
               index_body = obs_getBodyIndex(lobsSpaceData)
               if (index_body < 0) exit BODY

               HNH1  = obs_elem_r8(lobsSpaceData,'PPP ',index_body)
               IF ( HNH1.GE.0. .AND. HNH1.LE.HTPMAX ) THEN
                  ASSIM = .TRUE.
                  NH = NH + 1
               ENDIF
            ENDDO BODY
C
C     *     If assimilations are requested, apply the observation operator
C
            IF (ASSIM) THEN
C     
C     *        Profile at the observation location:
C
               Lat  = obs_elem_r4(lobsSpaceData,'LAT ',INDEX_HEADER)
               Lon  = obs_elem_r4(lobsSpaceData,'LON ',INDEX_HEADER)
               ZLAT = Lat * MPC_DEGREES_PER_RADIAN_R8
               ZLON = Lon * MPC_DEGREES_PER_RADIAN_R8
                     ZP0 = col_getElem(lcolumnhr,1,INDEX_HEADER,'P0')
               DO JL = 1, col_getNumLev(LCOLUMNHR,'TH')
C
C     *           Profile x
C
                  ZPP(JL) = col_getPressure(LCOLUMNHR,JL,INDEX_HEADER,'TH')
CCCCCCCCCCC          THIS IS ONLY A DUMMY IMPLEMENTATION OF ZDP (dP/dP0)
                  ZDP(JL) = ZPP(JL)/ZP0
                  ZTT(JL) = col_getElem(lcolumnhr,JL,INDEX_HEADER,'TT')-273.15
                  ZHU(JL) = col_getElem(lcolumnhr,JL,INDEX_HEADER,'HU')
                  ZGZ(JL) = col_getHeight(lcolumnhr,JL,INDEX_HEADER,'TH')
               ENDDO
               ZPT = col_getPressure(LCOLUMNHR,1,INDEX_HEADER,'TH')
               ZMT = ZGZ(col_getNumLev(LCOLUMNHR,'TH'))/RG
               ZMT = gpsgeopotential(Lat, ZMT)/RG
               ZPR = vco_trl%dprf_M
               ZCF = vco_trl%drcf1
C     
C     *        GPS profile structure:
C
                     IF (LSTAG) THEN
c     *                 Staggered hybrid trial field 
                        CALL GPSSTRUCT1S(NGPSLEV,ZLAT,ZLON,
     +                       ZPP,ZDP,ZTT,ZHU,ZMT,PRF)
                     ELSE
c     *                 ETA or HYBRID NONSTAGGERED trial field 
               CALL GPSSTRUCT1H(NGPSLEV,ZLAT,ZLON,ZETA,
     +              ZTT,ZHU,ZP0,ZMT,ZPT,ZPR,ZCF,PRF)
                     ENDIF
               CALL GPSGEO(PRF)
C
C     *        Prepare the vector of all the observations:
C
               ALLOCATE( HGT  (NH) )
               ALLOCATE( H    (NH) )
               ALLOCATE( ZOFF (NH) )
               ALLOCATE( ZERR (NH) )
               ALLOCATE( RSTV (NH) )

               NH1 = 0
               ! loop over all body indices (still in the 'RO' family)
                                        ! Start at the beginning of the list
               call obs_set_current_body_list(lobsSpaceData, index_header)
               BODY_2: do 
                  index_body = obs_getBodyIndex(lobsSpaceData)
                  if (index_body < 0) exit BODY_2

                  HNH1  = obs_elem_r8(lobsSpaceData,'PPP ',index_body)
                  IF ( HNH1.GE.0. .AND. HNH1.LE.HTPMAX ) THEN
                     NH1   = NH1 + 1
                     HNH1  = obs_elem_r8(lobsSpaceData,'PPP ',index_body)
                     HGT(NH1)= HNH1
                     H(NH1)= gpsgeopotential(Lat,HNH1)/9.80616
                  ENDIF
               ENDDO BODY_2
C
C     *        Apply the observation operator:
C  
               DH = 5000._dp
               CALL GPSREFOPV (H, PRF, RSTV)
C
C     *        Perform the (H(x)-Y)/S operation
C
               NH1 = 0
               ! loop over all body indices (still in the 'RO' family)
                                        ! Start at the beginning of the list
               call obs_set_current_body_list(lobsSpaceData, index_header)
               BODY_3: do 
                  index_body = obs_getBodyIndex(lobsSpaceData)
                  if (index_body < 0) exit BODY_3

                  HNH1  = obs_elem_r8(lobsSpaceData,'PPP ',index_body)
                  IF ( HNH1.GE.0. .AND. HNH1.LE.HTPMAX ) THEN
                     NH1   = NH1 + 1
C
C     *              Observation operator H(x)
C
                     ZMHX = RSTV(NH1)%VAR
C
C     *              Observation value    Y
C
                     ZOBS = obs_elem_r8(lobsSpaceData,'VAR ',index_body)
C
C     *              Normalized increment
C
                     ZOFF(NH1) = (ZOBS - ZMHX) / ZMHX
                  ENDIF
               ENDDO BODY_3
C
C     *        The procedure below is well tested to collectively
C     *        create error profiles FROM data below 40 km, and
C     *        intended to be used FOR data below 40 km. The procedure
C     *        creates also a reasonable estimate for the error
C     *        profiles FOR data above, but only uses data FROM below
C     *        HTPMAX as input. Extending input for all HGT requires
C     *        research on the error characteristics of data above 40 km.
C
               DO NH1 = 1, NH
                  SUM0=0.
                  SUM1=0.
                  DO JH = 1, NH
                     IF ( HGT(JH) .LT. HTPMAX ) THEN
                        DDH=H(JH)-H(NH1)
                        SUM0=SUM0+EXP(-(DDH/DH)**2)
                        SUM1=SUM1+EXP(-(DDH/DH)**2)*ZOFF(JH)**2
                     ENDIF
                  ENDDO
                  ZERR(NH1)=SQRT(SUM1/SUM0)
                  IF ( ZERR(NH1) < 0.002 ) ZERR(NH1) = 0.002
               ENDDO

               NH1 = 0
               ! loop over all body indices (still in the 'RO' family)
                                        ! Start at the beginning of the list
               call obs_set_current_body_list(lobsSpaceData, index_header)
               BODY_4: do 
                  index_body = obs_getBodyIndex(lobsSpaceData)
                  if (index_body < 0) exit BODY_4

                  HNH1  = obs_elem_r8(lobsSpaceData,'PPP ',index_body)
                  IF ( HNH1.GE.0. .AND. HNH1.LE.HTPMAX ) THEN
                     NH1 = NH1 + 1
C
C     *              Observation operator H(x)
C
                     ZMHX = RSTV(NH1)%VAR
C
C     *              Observation error    S
C
                     call obs_set_r8(lobsSpaceData,'OER ',index_body, ZERR(NH1) * ZMHX)
                  ENDIF
               ENDDO BODY_4
               DEALLOCATE( RSTV )
               DEALLOCATE( ZERR )
               DEALLOCATE( ZOFF )
               DEALLOCATE( H    )
               DEALLOCATE( HGT  )
            ENDIF ! ASSIM
         ENDIF ! IDATYP .EQ. 169
      ENDDO HEADER

      WRITE(NULOUT,*)'EXIT SETERRGPSRO'
      RETURN
      END
