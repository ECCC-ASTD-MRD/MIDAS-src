!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
subroutine tovs_rttov_AVHRR_for_IASI (iptobs,NPRF,surfem1_avhrr)
#if defined (doc)
!
!**s/r tovs_rttov_AVHRR_for_IASI  - Computation of forward radiance with rttov_direct
!                   (for AVHRR)
!
!
!author        : S. Heilliette
!
!revision 001  : s. heilliette october 2010
!                  - adaptation to rttov 10.0
!    -------------------
!     purpose:
!
!arguments
!

! appel séparé de RTTOV pour le calcul des radiances AVHRR
! (non assimilees mais necessaires au background check IASI)

#endif
Use tovs_nl_mod 
Use MULTIIRBGCHECK ,only : avhrr_bgck,NIR,NVIS,coefs_avhrr
implicit none
#include "rttov_setup.interface"
#include "rttov_direct2.interface"
#include "rttov_alloc_rad.interface"
integer ,intent(in) :: nprf
integer ,intent (in) :: iptobs(NPRF)
real (8) , intent (in) :: surfem1_avhrr(3*NPRF)
!*********************************************************************
type (rttov_options ),save :: opts_avhrr
type (rttov_chanprof)  :: chanprof(3*NPRF)
real*8 :: emissivity_out (3*NPRF)
real*8 :: cloudemissivity (3*NPRF)
logical :: calcemis  (3*NPRF)
INTEGER ::  list_sensors (3),setup_errorstatus
LOGICAL ,SAVE :: FIRST=.true.
integer :: ich,i,j,jn,ichn
integer :: VERBOSITY_LEVEL,ERR_UNIT=0
integer :: ichan_avhrr (NIR)
integer :: joff,ioffset
type ( transmission_Type )  :: transmission
type ( radiance_type )      :: radiancedata_d
integer :: nchannels
integer :: asw,nlevels,errorstatus,io
!***********************************************

IF (FIRST) THEN
   VERBOSITY_LEVEL = 3
   LIST_SENSORS(1)=10
   LIST_SENSORS(2)=2
   LIST_SENSORS(3)=5
   DO ICH=1,NIR
      ICHAN_AVHRR(ICH)=ICH
   ENDDO

   opts_avhrr%ipcreg=-1         ! index of the rquired PC predictors... to see later
   opts_avhrr%addinterp=.false. ! 
   opts_avhrr%addpc=.false.     ! to carry out principal component calculations 
   opts_avhrr%addradrec=.false. ! to reconstruct radiances from principal components
   opts_avhrr%addsolar=.false.  ! to model solar component in the near IR (2000 cm-1 et plus)
   opts_avhrr%addaerosl=.false. ! to account for scattering due to aerosols
   opts_avhrr%addclouds=.false. ! to account for scattering due to clouds
   opts_avhrr%switchrad=.true.  ! to use brightness temperature (true) or radiance (false) units in AD routine
   opts_avhrr%lgradp=.false.    ! allow tl/ad of user pressure levels 
   opts_avhrr%use_q2m=.false.   ! if true use of surface humidity
   opts_avhrr%apply_reg_limits=.false. ! if true application of profiles limits
   opts_avhrr%verbose_checkinput_warnings=.false. ! useful for debuging the code should be turned off later
   opts_avhrr%ozone_data=.true. ! profil d'ozone disponible
   opts_avhrr%clw_data=.false.  ! profil d'eau liquide pas disponible
   opts_avhrr%addrefrac=.false. ! to account for atmospheric refraction (useless)
   opts_avhrr%do_checkinput=.true. ! to check if input profiles are within absolute and regression limits

   call rttov_setup (&
        setup_errorstatus,&! out
        err_unit,         &! in
        verbosity_level,  &! in
        opts_avhrr,       &! in
        coefs_avhrr,      &! out
        list_sensors,     &! in
        ichan_avhrr  )    ! in Optional 

   if ( setup_errorstatus/=0) then
      write(*,*) "Probleme dans rttov_setup!"
      call abort3d("tovs_rttov_AVHRR_for_IASI")
   endif

   opts_avhrr%co2_data = ( coefs_avhrr%coef%nco2 > 0 )
   opts_avhrr%n2o_data = ( coefs_avhrr%coef%nn2o > 0 )
   opts_avhrr%co_data  = ( coefs_avhrr%coef%nco  > 0 )
   opts_avhrr%ch4_data = ( coefs_avhrr%coef%nch4 > 0 )

   FIRST=.FALSE.
ENDIF


nlevels=coefs_avhrr % coef % nlevels

nchannels=NIR*NPRF

calcemis(:)=.false.

  ! Build the list of channels/profiles indices
ichn = 0
Do j = 1 , NPRF
   DO  ich = 1,NIR
      ichn = ichn +1
      chanprof(ichn)%prof=j
      chanprof(ichn)%chan=ich
   End Do
End Do

cloudemissivity(:) = 0.d0

! allocate transmittance structure

call tovs_allocate_transmission(transmission,nchannels,nlevels)

! allocate radiance structure

asw=1 ! 1 to allocate,0 to deallocate
call rttov_alloc_rad (errorstatus,nchannels,radiancedata_d,nlevels-1,asw)
if (errorstatus/=0) THEN
   Write(*,*) "Error in radiance allocation",errorstatus
   call abort3d("tovs_rttov_AVHRR_for_IASI")
ENDIF
   

Call rttov_direct2(    &
     errorstatus,      & ! out
     chanprof,         & ! in
     opts_avhrr,       & ! in
     profiles(iptobs(1:nprf)),  & ! in
     coefs_avhrr,      & ! in
     calcemis,         & ! in
     surfem1_avhrr,       & ! inout
     emissivity_out,   & ! out
     cloudemissivity,  & ! inout
     transmission,       & ! inout
     radiancedata_d  )     ! inout

do jn = 1, nprf
   joff=NIR*(jn-1)
   io=iptobs(jn)

   avhrr_bgck(io)% RADCLEARCALC(NVIS+1:NVIS+NIR) = radiancedata_d % clear(joff+1:joff+NIR)
   avhrr_bgck(io)% TBCLEARCALC(NVIS+1:NVIS+NIR)  = radiancedata_d % bt(joff+1:joff+NIR)
   avhrr_bgck(io)% RADOVCALC(1:nlevels-1,NVIS+1:NVIS+NIR) = radiancedata_d % overcast(1:nlevels-1,joff+1:joff+NIR)
   avhrr_bgck(io)% TRANSMCALC(1:nlevels,NVIS+1:NVIS+NIR) =  transmission % tau_levels(1:nlevels,joff+1:joff+NIR)
   avhrr_bgck(io)% EMISS(NVIS+1:NVIS+NIR) = emissivity_out(joff+1:joff+NIR)
   avhrr_bgck(io)% TRANSMSURF(NVIS+1:NVIS+NIR) = transmission% tau_total(joff+1:joff+NIR)

enddo

call tovs_deallocate_transmission(transmission)
asw=0 ! 1 to allocate,0 to deallocate
call rttov_alloc_rad (errorstatus,nchannels,radiancedata_d,nlevels-1,asw)
if (errorstatus/=0) THEN
   Write(*,*) "Erreur in radiance deallocation: ",errorstatus
   call abort3d("tovs_rttov_AVHRR_for_IASI")
ENDIF

end subroutine tovs_rttov_AVHRR_for_IASI
