!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE ltt2phi
#if defined (DOC)
*
***s/r ltt2phi - Temperature increments to geopotential
*                increments transformation
*
*
*Author  : S. Pellerin *ARMA/AES September 1998
*
*Revision: L. Fillion *ARMA/AES - 24 nov 98
*        - Include ES option
*          C. Charette *ARMA/AES November 1998
*                      - Added LLPRINT for diagnostics
*          L. Fillion *ARMA/AES - 3 feb 1999
*                      - Introduce ps dependence of TLM
*          C. Charette *ARMA/AES - 8 feb 1999
*                      - Replaced zptop by columng%rppobs(1,jobs)
*                        and zpscon by columng%ps(1,jobs)
*          JM Belanger CMDA/SMC  Nov 2000
*                   . 32 bits conversion
*           C. Charette ARMA/SMC FEV. 2002
*            - Commented out the if(llprint...) statements within
*              the do loops. They were preventing vectorization.
*           P. Koclas CMDA/SMC  Apr 2003
*            - changed loop order  ( column%hu ---> column1%hu)
*           C. Charette - ARMA/SMC - Sep. 2004
*            - Conversion to hybrid vertical coordinate
*           Bin He  - ARMA   June  2005
*            - OpenMP optimization.
*
**    Purpose:  -Computation of virtual temperature increments from
*                temperature and logarith of specific humidity
*                increments
*
*               -call lvtap for del vt to del phi transformation
*
*
*Arguments
*
#endif
      use columnData_mod 
 
      IMPLICIT NONE
*implicits
c------------------------------------------------------------------------
#include "comlun.cdk"
#include "pardim.cdk"
#include "comdim.cdk"
#include "comdimo.cdk"
#include "comcva.cdk"
#include "comgem.cdk"
#include "comcst.cdk"
c
      LOGICAL LLPRINT
      integer jobs,jlev
      real*8  zpscon, zcon,zdelps,zdelt,zalpha,zfacps,zfactt
      INTEGER IERR,ILEN
      real*8 zpresb,zpresbd,zterm

      INTEGER mythread,numthd,OMP_GET_NUM_THREADS,OMP_GET_THREAD_NUM
C
      LLPRINT = .false.
*
**
c
c*1   First set delq properly and store in column1%hu ready for Tv
C computation
c     ------------------------------------------------------------------
C -
c
 100  continue
      do jobs = 1, nobtot
        do jlev = 1, nflev
          column1%hu(jlev,jobs) = column%hu(jlev,jobs)
        enddo
      enddo
c
c*2   Computation of virtual temperature increments
c     ---------------------------------------------
c
 200  continue
!$OMP PARALLEL PRIVATE(jobs,jlev,mythread,numthd,zpresb,zterm,zpresbd)
!$OMP+ PRIVATE(zcon,zfactt,zfacps,zdelt,zdelps)
      mythread=omp_get_thread_num()+1
      numthd=omp_get_num_threads()
      do jobs = mythread, nobtot,numthd
        do jlev = 1, nflev
          column1%tt(jlev,jobs) = oltv(1,jlev,jobs)*column%tt(jlev,jobs) + oltv(2
     &         ,jlev,jobs)*column1%hu(jlev,jobs)
***************************************************************
c       if (LLPRINT .AND.jobs.eq.1) then
c          write(nulout,*) 'ltt2phi: jobs,nobtot,nflev '
c     &          ,jobs,nobtot,nflev
c          write(nulout,*) 'ltt2phi: jobs,jlev,OLTV(1,,),OLTV(2,,)'
c     &        , jobs,jlev,OLTV(1,jlev,jobs),OLTV(2,jlev,jobs)
c          write(nulout,*)'ltt2phi:gmt1,GMQ(jlev,jobs),GMT(jlev,jobs) '
c     &        ,column1%tt(jlev,jobs),column%hu(jlev,jobs),column%tt(jlev,jobs)
c       endif
***************************************************************
        enddo
!      enddo
c
c*3   Prepare r.h.s. for TL-Hydrostatic equation
c     ------------------------------------------
c
 300  continue
!      do jobs = 1, nobtot
        do jlev = 1, nflev
c
c      zcon = d(rtapfac)/d(ps)
c
          zpresb  = ((vhybinc(jlev) - rptopinc/rprefinc)
     &               /(1.0D0-rptopinc/rprefinc))**rcoefinc
          if((rcoefinc-1.0) .lt. RPRECIS) then
            zterm = 1.0
          else
            zterm = ((vhybinc(jlev) - rptopinc/rprefinc)
     &           /(1.0-rptopinc/rprefinc))**(rcoefinc-1.0)
          endif
          zpresbd = rcoefinc * zterm
          zcon    =(zpresbd-zpresb*rtapfac(jlev,jobs))/columng%rppobs(jlev,jobs)
          zfactt  = rtapfac(jlev,jobs)
          zfacps  = columng%tt(jlev,jobs)*zcon
          zdelt   = rtapfac(jlev,jobs)*column1%tt(jlev,jobs)
          zdelps  = columng%tt(jlev,jobs)*zcon * column%ps(1,jobs)
          column1%tt(jlev,jobs)=rtapfac(jlev,jobs)*column1%tt(jlev,jobs)
     &         + columng%tt(jlev,jobs)*zcon * column%ps(1,jobs)
c
***************************************************************
c       if (LLPRINT .AND.jobs.eq.1) then
c          write(nulout,*) 'ltt2phi: jobs,nobtot,nflev '
c     &          ,jobs,nobtot,nflev
c          write(nulout,*)'ltt2phi: jobs,jlev,zfactt,zfacps,zcon'
c     &        , jobs,jlev,zfactt,zfacps,zcon
c          write(nulout,*)'ltt2phi: jobs,jlev,zdelt,zdelps'
c     &        , jobs,jlev,zdelt,zdelps
c          write(nulout,*)'ltt2phi: jobs,jlev,zpresb,zpresbd '
c     &           ,jobs,jlev,zpresb,zpresbd
c       endif
****************************************************************
        enddo
      enddo
!$OMP END PARALLEL
c
c*4   Computation of del(GZ)
c     ----------------------
c
 400  continue

      zalpha=0.0D0
      call matapat(vhybinc,zalpha,nflev)
      call lvtap
c      if(LLPRINT .AND. nobtot .eq. 1) then
c         do jlev=1,nflev
c           write(nulout,*)'ltt2phi: Level, GZ increment = ',jlev
c     &          ,column%gz(jlev,1)
c         enddo
c      endif
c
      return

      CONTAINS

      subroutine lvtap
*S/P LVTAP:
*         CALCULE Y A PARTIR DE R PAR SOLUTION DE L'EQUATION R*CON=S**E*D(Y)
*         AVEC UN SCHEME DU 4EME ORDRE DU A J. COTE.
*         NOTE: CET ALGORITHME EST EXACTEMENT REVERSIBLE (VOIR VPAT).
*
*         ON DOIT FOURNIR LA COND
*         A LA LIMITE INF. Y(N). LA MATRICE MATAP A ETE CALCULEE DANS LA
*         SUBR. MATAPAT.
*
*
* AUTHOR: MICHEL BELAND - AVRIL 1984 - ADAPTE AU MODELE SEF, AVRIL 1984.
*
* REVISION: LUC FILLION - AUG 94 - MODIFIED FOR VARIATIONAL ANALYSIS.
*           S. Pellerin - Sept 98 - Use of column1%tt for virtual
*                                   temperatures
*                                 - GZ(nflev) = 0 (tangent linear
*                                   version of vtap).
*                                 - Introduction of surface pressure
*                                   dependant factor (rtapfac) for eta
*                                   coordinates
*                                 - Introduction of site constants
*                                   common (comphy)
*          C. Charette *ARMA/AES November 1998
*                      - Added LLPRINT for diagnostics
*          L. Fillion *ARMA/AES - 3 Feb 1999
*                      - remove rtapfac
*           C. Charette ARMA/SMC FEV. 2002
*            - Commented out the if(llprint...) statements within
*              the do loops. They were preventing vectorization.
*           Bin He  *ARMA      - June 25,2005
*            -  OpenMP parallelization.
*
      IMPLICIT NONE
      INTEGER  KILG, KLEV
      REAL*8     PCON
*
      LOGICAL  LLPRINT
      INTEGER  JLON, IKLEVM2, JK, IK, jobs
      REAL*8     ZAK0, ZBK0, ZCK0
      REAL*8     ZAK, ZBK, ZCK, ZCON
      INTEGER mythread,numthd
      INTEGER OMP_GET_THREAD_NUM,OMP_GET_NUM_THREADS
*implicits
#include "comode.cdk"
#include "comphy.cdk"
c
c column1%tt : working vector of virtual temperatures.
c
      LLPRINT = .FALSE.
      ZCON = -RGASD
      ZAK0  = -2.0*ZCON*VMA(nflev)
      ZBK0  = -2.0*ZCON*VMB(nflev)
      ZCK0  = -2.0*ZCON*VMC(nflev)
!$OMP PARALLEL PRIVATE(jobs,jk,IKLEVM2,mythread,numthd)
!$OMP+ PRIVATE(zak,zbk,zck)
      mythread=omp_get_thread_num()+1
      numthd=omp_get_num_threads()
      do jobs = mythread, nobtot,numthd
        column%gz(nflev,jobs) = 0.0
        column%gz(nflev-1,jobs)=ZAK0*column1%tt(nflev-1,jobs)+
     $                      ZBK0*column1%tt(nflev,jobs)+
     &                      ZCK0*column1%tt(nflev-2,jobs)+
     $                      column%gz(nflev,jobs)
********************************************************
c       if (LLPRINT .and. jobs.eq.1) then
c       print *,'lvtap:nflev,jobs,zak,zbk,zck,column%gz(nflev,) ',
c     &       nflev,jobs,zak,zbk,zck,column%gz(nflev,jobs)
c       print *,'lvtap:nflev-1,jobs,zak,zbk,zck,column%gz(nflev-1,) ',
c     &       nflev-1,jobs,zak,zbk,zck,column%gz(nflev-1,jobs)
c       endif
********************************************************
*
      IKLEVM2 = nflev-2
      do JK = 1, IKLEVM2
        IK = nflev-1-JK
        ZAK = -2.0*ZCON*VMA(IK+1)
        ZBK = -2.0*ZCON*VMB(IK+1)
        ZCK = -2.0*ZCON*VMC(IK+1)
!        do jobs = 1, nobtot
          column%gz(ik,jobs)= ZAK*column1%tt(IK,jobs)+
     $                    ZBK*column1%tt(IK+1,jobs)+
     $                    ZCK*column1%tt(IK+2,jobs)+
     +                    column%gz(IK+2,jobs)
********************************************************
c       if (LLPRINT .and. jobs.eq.1) then
c          print *,'lvtap:ik,jobs,zak,zbk,zck column%gz(ik,)= ',
c     &       ik,jobs,zak,zbk,zck,column%gz(ik,jobs)
c          print *,'lvtap:ik,jobs,column1%tt(ik,),column1%tt(ik+1,),column1%tt(ik+2,)= '
c     &       ,ik,jobs,column1%tt(IK,jobs),column1%tt(IK+1,jobs),column1%tt(IK+2,jobs)
c          print *,'lvtap:ik,jobs= '
c     &       ,ik,jobs
c       endif
**********************************************************
        enddo
      enddo
!$OMP END PARALLEL
C
      RETURN
      END SUBROUTINE lvtap

      end
