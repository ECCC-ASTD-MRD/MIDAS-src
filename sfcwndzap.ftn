!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      SUBROUTINE SFCWNDZAP(lobsSpaceData)
#if defined (DOC)
*
***s/r  SFCWNDZAP
*
*Author  : C.Charette *ARMA/AES  MAR 1999
*
**    Purpose:
*      Zap sfc wind components at land stations
*
*Arguments:
*
*          none
#endif
      use obsSpaceData_mod
      use bufr
      IMPLICIT NONE
*implicits
#include "comlun.cdk"
#include "comdimo.cdk"
*
      type(struct_obs) :: lobsSpaceData
      INTEGER JPINEL,JPIDLND
      PARAMETER(JPINEL=2,JPIDLND=9)
      INTEGER J,JID,JDATA
      LOGICAL LLPRINT
      REAL(8) ZDIFF
      INTEGER ITYP,IDBURP,ITY
      INTEGER ILISTEL(JPINEL),IDLND(JPIDLND)
      INTEGER IKOUNTREJ(JPINEL),IKOUNTT
C                     SYNOP(3)     TEMP/PILOT(6)
      character(len=2), dimension(2) :: list_family
      integer :: index_family
      integer, dimension(:), allocatable :: list_header, list_body
      integer :: size_list_header, index_list_header, index_header
      integer :: size_list_body,   index_list_body,   index_body

      DATA    IDLND / 12, 14, 146, 32, 35, 135, 136, 137, 138 /
C
C
      ILISTEL(1)=BUFR_NEUS
      ILISTEL(2)=BUFR_NEVS
      WRITE(NULOUT,* ) ' '
      WRITE(NULOUT,* ) ' SUBROUTINE SFCWNDZAP '
      WRITE(NULOUT,* ) ' '
      WRITE(NULOUT,* ) '*****************************************************'
      WRITE(NULOUT,222)'ELEMENTS REJECTED         ',(  ILISTEL(J),J=1,jpinel)
      WRITE(NULOUT,222)'LIST OF IDTYP             ',(   idlnd(J),J=1,jpidlnd)
      WRITE(NULOUT,* ) '*****************************************************'
      WRITE(NULOUT,* ) ' '
      LLPRINT = .FALSE.
ccc      LLPRINT = .TRUE.
C
C     SET COUNTERS TO ZERO
C
      DO J=1,JPINEL
         IKOUNTREJ(J)=0
      END DO

      allocate(list_header( obs_num_stn     (lobsSpaceData) ))
      allocate(list_body  ( obs_num_obstotal(lobsSpaceData) ))

      !
      ! Loop over the families of interest
      !
      list_family(1) = 'SF'
      list_family(2) = 'UA'
      do index_family = 1,2
         WRITE(NULOUT,'(2x,A9,2x,A2)')'FAMILY = ',list_family(index_family)

         !
         ! loop over all header indices of each family
         !
         call obs_getHeaderIndices(lobsSpaceData, list_family(index_family), 
     &                             list_header, size_list_header)
         do index_list_header = 1, size_list_header
            index_header = list_header(index_list_header)

c           IF(LLPRINT) THEN
ccc            CALL PRNTHDR(INDEX_HEADER,NULOUT)
ccc            CALL PRNTBDY(INDEX_HEADER,NULOUT)
c           ENDIF

            !
            ! loop over all body indices (still in the same family)
            !
            call obs_getBodyIndices(lobsSpaceData, index_header, list_body, size_list_body)
            do index_list_body = 1, size_list_body
              index_body = list_body(index_list_body)
C             UNCONDITIONALLY REJECT SURFACE WINDS AT SYNOP/TEMP LAND STATIONS
              ITYP=obs_elem_i(lobsSpaceData,'VNM ',INDEX_BODY)
              ITY    = obs_elem_i(lobsSpaceData,'ITY ',INDEX_HEADER)
              IDBURP = MOD(ITY,1000)
              IF ( ITYP.EQ.BUFR_NEUS .OR. ITYP.EQ.BUFR_NEVS) THEN
                DO JID = 1, JPIDLND
                  IF(IDBURP .EQ. IDLND(JID) .AND.
     &                 obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY) .EQ. 1) THEN
                    call obs_set_i(lobsSpaceData,'FLG ',INDEX_BODY,
     &                   ibset( obs_elem_i(lobsSpaceData,'FLG ',INDEX_BODY), 19))
                    call obs_set_i(lobsSpaceData,'ASS ',INDEX_BODY,0)
                    DO J = 1, JPINEL
                      IF(ITYP .EQ.ILISTEL(J)) THEN
                        IKOUNTREJ(J)=IKOUNTREJ(J)+1
                      ENDIF
                    ENDDO
                    IF(LLPRINT) THEN
                      WRITE(NULOUT,225) 'Rej sfc wind lnd',INDEX_HEADER,ITYP
     &                     ,obs_elem_c9(lobsSpaceData,'STID',INDEX_HEADER),IDBURP
     &                     ,obs_elem_r4(lobsSpaceData,'LAT ',INDEX_HEADER) 
     &                     ,obs_elem_r4(lobsSpaceData,'LON ',INDEX_HEADER)
     &                     ,obs_elem_r8(lobsSpaceData,'PPP ',INDEX_BODY),ZDIFF
                    ENDIF
                  ENDIF
                ENDDO
              ENDIF ! BUFR_NEUS or BUFR_NEVS
            END DO ! index_body
         END DO ! index_header
C
         WRITE(NULOUT,* ) ' '
         WRITE(NULOUT,* )
     &        '*****************************************************'
         WRITE(NULOUT,222 )'ELEMENTS            ', (  ILISTEL(J),J=1,JPINEL)
         WRITE(NULOUT,222)'REJECTED             ',(IKOUNTREJ(J),J=1,JPINEL)
         WRITE(NULOUT,* )
     &        '*****************************************************'
         WRITE(NULOUT,* ) ' '
 222     FORMAT(2x,a29,10(2x,i5))
 223     FORMAT(2x,a29,10(2x,f5.0))
 224     FORMAT(2x,a17,2x,I6,2X,I5,1x,a9,1x,2(2x,f9.2))
 225     FORMAT(2x,a13,2x,I6,2X,I5,1x,a9,1x,I6,1x,4(2x,f9.2))
C
      END DO ! family
C
      IKOUNTT=0
      DO JDATA=1,obs_num_obstotal(lobsSpaceData)
         IF ( obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1) IKOUNTT=IKOUNTT+1
      END DO
      WRITE(NULOUT,'(1X," NUMBER OF DATA ASSIMILATED BY 3D"
     &            ,"-VAR AFTER ADJUSTMENTS: ",i10)')IKOUNTT
      WRITE(NULOUT,* ) ' '

      deallocate(list_header)
      deallocate(list_body)

      RETURN
      END
