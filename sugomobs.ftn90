!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      subroutine sugomobs(lcolumng,lcolumnhr,lobsSpaceData)
!
! s/r sumgomobs
!
!     Author  : S. Pellerin ARMA/AES Nov. 1999
!
!     Purpose: Fill in COLUMNG and COLUMNHR with trial profiles
!
!Arguments: COLUMNG, COLUMNHR
!
      use EarthConstants_mod
      use MathPhysConstants_mod
      use mpi
      use gaussGrid_mod
      use columnData_mod 
      use obsSpaceData_mod
      use gridStateVector_mod
      use minimization_mod, only: min_get_datestamp
      use vGrid_Descriptors , only:vgrid_descriptor,vgd_levels,VGD_OK
      implicit none
#include "comfilt.cdk"
      type(struct_columnData) :: lcolumng,lcolumnhr
      type(struct_obs) :: lobsSpaceData
      type(struct_vco), pointer :: vco_anl, vco_trl
      integer ezgprm,fnom,fclos,fstouv,fstfrm
      integer ezsetopt,gdxyfll,vezgdef, gdllfxy
      integer jlev,jobs,ierr,iset,jstep,jlatband
      integer ini, inj,ink,iig1,iig2,iig3,iig4,jvar
      integer itrlnlev
      integer idata,idatend,jdata
      character*1 clgrtyp
      character*2 cltypvar
      character*12 cletiket
      real*8, allocatable :: varInterphr_T(:,:),varInterphr_M(:,:),varInterphr_VV(:,:)
      real*8, allocatable :: zppobsg(:,:),zppobs_T(:,:),zppobs_M(:,:)
      real*8, allocatable :: varInterpP0(:,:)
      real*8, allocatable :: varInterpg_T(:,:),varInterpg_M(:,:)
      integer ip1_pak_trl,ip1_vco_trl
      integer nlv_T,nlv_M
      integer, parameter :: jpnflev = 200
      integer itrlgid,iip1s(jpnflev),iip2,iip3
      integer iip1s2(jpnflev*2)
      integer, allocatable :: idate(:),itime(:)
      integer :: newdate,nstepanltime
      integer, allocatable :: nobsgid(:) ! (nstepobs) grid id for ezscint corresponding to stepobs bin
      integer, allocatable :: notag(:,:) ! (nobtot,nstepobs) obs tag associated to observations of each bin
      integer, allocatable :: nobs(:),nobs_maxmpiglobal(:) ! number of headers for each stepobs bin
      integer, allocatable :: nobsgid_mpiglobal(:,:),nobs_mpiglobal(:,:)
      integer, allocatable :: datestamplist(:)
      integer :: numColumn_maxmpiglobal
      real :: lat_r4,lon_r4,xpos_r4,ypos_r4
      real*8 :: lat_r8,lon_r8
      integer :: tla
      character(len=2) :: flnum
      character(len=128) :: trialfile
      integer, allocatable :: nultrl(:)
      integer :: nultrl2
      logical :: trialExists
      real*8  :: zig1,zig2,zig3,zig4,stepObsIndex
      real*8, allocatable ::  dlonfld(:), dlatfld(:)
      real*8, allocatable ::  dlonfld_mpiglobal(:,:), dlatfld_mpiglobal(:,:)
      integer :: ig1obs,ig2obs,ig3obs,ig4obs
      integer status
      real*8, pointer :: pobsm(:,:,:) => null()

      write(*,*) ' '
      write(*,*) '-------- ENTERING SUGOMOBS ---------'
      write(*,*) ' '
      write(*,*) 'nstepobs=',nstepobs
      call col_setNumStep(lcolumng,nstepobs)   ! from comfilt.cdk
!
!     Ensure that all trial field files exist
!
      do jstep = 1, col_getNumStep(lcolumng)
        write(flnum,'(I2.2)') jstep
        trialfile='./trlm_'//flnum
        inquire(file=trialfile,exist=trialExists)
        if(.not.trialExists) then
          write(*,*) 'File missing=',trialfile
          call abort3d('SUGOMOBS:DID NOT FIND A TRIAL FIELD FILE')
        endif
      enddo
!
!     Vertical coordinate parameters 
!
      vco_anl => col_getVco(lcolumng)
      vco_trl => col_getVco(lcolumnhr)
      nlv_M = vco_trl%nlev_M
      nlv_T = vco_trl%nlev_T
      write(*,*)'sugomobs:niv thermo:',nlv_T,' momentum',nlv_M
      write(*,*)'sugomobs:zptophr,zprefhr,zrcoefhr ',  &
        vco_trl%dpt_T,vco_trl%dprf_T,vco_trl%drcf1
!
!     Compute the maximum number of columns over all processors (latitude bands)
!
      call tmg_start(19,'SUGOMOBS_COMM')
      call rpn_comm_allreduce(col_getNumCol(lcolumng),numColumn_maxmpiglobal,1,  &
                              "MPI_INTEGER","MPI_MAX","GRID",ierr)
      call tmg_stop(19)
!
!     Allocate trial field column object and other local arrays
!
      call col_allocate(lcolumnhr,col_getNumCol(lcolumng),mpi_local=.true.)
      allocate(varInterphr_T(nlv_T,numColumn_maxmpiglobal))
      allocate(varInterphr_M(nlv_M,numColumn_maxmpiglobal))
      allocate(varInterphr_VV(nlv_M,numColumn_maxmpiglobal))
      allocate(nobsgid(col_getNumStep(lcolumng)))
      allocate(notag(col_getNumCol(lcolumng),col_getNumStep(lcolumng)))
      allocate(nobs(col_getNumStep(lcolumng)))
      allocate(nobs_maxmpiglobal(col_getNumStep(lcolumng)))
      allocate(datestamplist(col_getNumStep(lcolumng)))
      allocate(varInterpg_T(col_getNumLev(lcolumng),col_getNumCol(lcolumng)))
      allocate(varInterpg_M(col_getNumLev(lcolumng),col_getNumCol(lcolumng)))
      allocate(varInterpP0(1,col_getNumCol(lcolumng)))
      allocate(idate(col_getNumStep(lcolumng)))
      allocate(itime(col_getNumStep(lcolumng)))
      allocate(nultrl(col_getNumStep(lcolumng)))
      allocate(dlonfld(numColumn_maxmpiglobal))
      allocate(dlatfld(numColumn_maxmpiglobal))
      allocate(dlonfld_mpiglobal(numColumn_maxmpiglobal,mpi_nprocs))
      allocate(dlatfld_mpiglobal(numColumn_maxmpiglobal,mpi_nprocs))
      allocate(nobsgid_mpiglobal(col_getNumStep(lcolumng),mpi_nprocs))
      allocate(nobs_mpiglobal(col_getNumStep(lcolumng),mpi_nprocs))

      varInterphr_T(:,:)=0.0d0
      varInterphr_M(:,:)=0.0d0
      varInterphr_VV(:,:)=0.0d0
!
!     Open all trial field files (assume 1 file per time step)
!
      nultrl(:)=0
      do jstep=1,col_getNumStep(lcolumng)
        write(flnum,'(I2.2)') jstep
        trialfile='./trlm_'//flnum
        ierr=fnom(nultrl(jstep),trialfile,'RND+OLD+R/O',0)
        ierr=fstouv(nultrl(jstep),'RND+OLD')
        write(*,*) 'ITRIAL - File :', trialfile
        write(*,*) ' opened as unit file ',nultrl(jstep)
      enddo
!
!     Computing date and time of step obs for error message
!
      call getstamplist(datestamplist,col_getNumStep(lcolumng),min_get_datestamp())
      do jstep = 1,col_getNumStep(lcolumng)
        ierr = newdate(datestamplist(jstep),idate(jstep),itime(jstep),-3)
        write(*,*) 'sugomobs: datestamplist=',jstep,datestamplist(jstep)
        if(datestamplist(jstep) == min_get_datestamp()) nstepanltime = jstep
      enddo
!
!     Setting degree of horizontal interpolations
!
      ierr = ezsetopt('INTERP_DEGREE', 'LINEAR')
!
!     The following code replaces the subroutine suobsgid
!
      nobs(:) = 0
      do jvar=1,vnl_numvarmax2D
        if(gsv_varExist(varNameList2D(jvar))) exit          
      enddo
      write(*,*) 'sugomobs: first 2d variable=',varNameList2D(jvar),jvar
      do jstep = 1,col_getNumStep(lcolumng)
!
!       Get horizontal grid parameters to be used for all variables
!
        call getfldprm2(IIP1S,IIP2,IIP3,ITRLNLEV,CLETIKET,CLTYPVAR,  &
             ITRLGID,varNameList2D(jvar),datestamplist(jstep),jpnflev,  &
             nultrl(:),ip1_pak_trl,ip1_vco_trl,col_getNumStep(lcolumng),  &
             nultrl2)
        if(itrlnlev <= 0) then
          call abort3d('SUGOMOBS:Problem with background file')
        endif
        ierr = ezgprm(itrlgid,clgrtyp,ini,inj,iig1,iig2,iig3,iig4)

        dlonfld(:)=0.0d0
        dlatfld(:)=0.0d0

        do jobs=1, obs_numheader(lobsSpaceData)

          call getStepObsIndex(stepObsIndex,min_get_datestamp(),  &
                               obs_headElem_i(lobsSpaceData,OBS_DAT,jobs),  &
                               obs_headElem_i(lobsSpaceData,OBS_ETM,jobs),nstepobs)

          ! check if obs is outside of assimilation window when jstep = 1
          if(jstep.eq.1 .and.  &
            (stepobsIndex.lt.1.0 .or. stepObsIndex.gt.real(nstepobs,8)) ) then
            write(*,*) 'sugomobs: Observation time outside assimilation window: ',  &
                obs_headElem_i(lobsSpaceData,OBS_DAT,jobs),obs_headElem_i(lobsSpaceData,OBS_ETM,jobs)

            ! put the obs in the first time bin (it has to go somewhere!)
            stepObsIndex=1.0

            ! flag it as out of time domain and turn off its assimilation flag
            idata = obs_headElem_i(lobsSpaceData,OBS_RLN,jobs)
            idatend = obs_headElem_i(lobsSpaceData,OBS_NLV,jobs) + idata -1
            do jdata = idata, idatend
              call obs_bodySet_i(lobsSpaceData,OBS_ASS,JDATA, 0)
            enddo
            call obs_headSet_i(lobsSpaceData,OBS_ST1,jobs,  &
              ibset( obs_headElem_i(lobsSpaceData,OBS_ST1,jobs), 05))
          endif

          if(nint(stepObsIndex).eq.jstep) then

            nobs(jstep) = nobs(jstep) + 1
            notag(nobs(jstep),jstep) = jobs

            lat_r8=obs_headElem_r(lobsSpaceData,OBS_LAT,jobs)
            lon_r8=obs_headElem_r(lobsSpaceData,OBS_LON,jobs)
            lat_r4=real(lat_r8)
            lon_r4=real(lon_r8)
            tla = gaus_find_lat_index(lat_r8)

            call col_setLatLon(lcolumng ,jobs,lat_r8,lon_r8,tla)
            call col_setLatLon(lcolumnhr,jobs,lat_r8,lon_r8,tla)

            if(lon_r4.lt.0) lon_r4 = lon_r4 + 2*MPC_PI_R4
            if(lon_r4.ge.2.*MPC_PI_R4) lon_r4 =lon_r4 - 2*MPC_PI_R4
            lat_r4=lat_r4*MPC_DEGREES_PER_RADIAN_R4
            lon_r4=lon_r4*MPC_DEGREES_PER_RADIAN_R4
            ierr=gdxyfll(itrlgid, xpos_r4, ypos_r4, lat_r4, lon_r4, 1)

            if(xpos_r4.ge.1.0 .and. xpos_r4.le.real(ini) .and.  &
               ypos_r4.ge.1.0 .and. ypos_r4.le.real(inj)) then
 
              dlonfld(nobs(jstep)) = lon_r8
              dlatfld(nobs(jstep)) = lat_r8
              if(dlonfld(nobs(jstep)).lt.0)  &
                   dlonfld(nobs(jstep)) = dlonfld(nobs(jstep)) +  &
                   2*MPC_PI_R8
              if(dlonfld(nobs(jstep)).ge.2.*MPC_PI_R8)  &
                   dlonfld(nobs(jstep)) =dlonfld(nobs(jstep)) -  &
                   2*MPC_PI_R8
              dlonfld(nobs(jstep))=dlonfld(nobs(jstep))*MPC_DEGREES_PER_RADIAN_R8
              dlatfld(nobs(jstep))=dlatfld(nobs(jstep))*MPC_DEGREES_PER_RADIAN_R8

            else
              ! The observation is outside the domain
              ! In LAM mode we must discard this observation
              write(*,*) "sugomobs: Rejecting OBS outside domain"
              write(*,*) jobs, xpos_r4, ypos_r4, lat_r4, lon_r4

              idata = obs_headElem_i(lobsSpaceData,OBS_RLN,jobs)
              idatend = obs_headElem_i(lobsSpaceData,OBS_NLV,jobs) + idata -1
              do jdata = idata, idatend
                 call obs_bodySet_i(lobsSpaceData,OBS_ASS,JDATA, 0)
              enddo
              call obs_headSet_i(lobsSpaceData,OBS_ST1,jobs,  &
                   ibset( obs_headElem_i(lobsSpaceData,OBS_ST1,jobs), 05))

              ! However, we must assigned a realistic lat-lon to this point
              ! to avoid problem later in Hx computation.
              ierr=gdllfxy(itrlgid, lat_r4, lon_r4, real(ini)/2.0,  &
                   real(inj)/2.0, 1) ! Middle of the domain
              dlonfld(nobs(jstep)) = real(lon_r4,8)
              dlatfld(nobs(jstep)) = real(lat_r4,8)
            endif

          endif
        enddo ! jobs

        ! gather and compute the max number of obs over all processors for each timestep
        call tmg_start(19,'SUGOMOBS_COMM')
        call rpn_comm_allreduce(nobs(jstep),nobs_maxmpiglobal(jstep),1,  &
                                "MPI_INTEGER","MPI_MAX","GRID",ierr)
        call rpn_comm_allgather(nobs(jstep),1,"mpi_integer",       &
                                nobs_mpiglobal(jstep,:),1,"mpi_integer", &
                                "GRID",ierr)
        ! gather lon-lat of observations from all processors
        call rpn_comm_allgather(dlonfld,numColumn_maxmpiglobal,"mpi_double_precision",       &
                                dlonfld_mpiglobal,numColumn_maxmpiglobal,"mpi_double_precision", &
                                "GRID",ierr)
        call rpn_comm_allgather(dlatfld,numColumn_maxmpiglobal,"mpi_double_precision",       &
                                dlatfld_mpiglobal,numColumn_maxmpiglobal,"mpi_double_precision", &
                                "GRID",ierr)
        call tmg_stop(19)

        zig1 = 0.0D0
        zig2 = 0.0D0
        zig3 = 1.0D0
        zig4 = 1.0D0
        call vcxgaig('L',ig1obs,ig2obs,ig3obs,ig4obs,zig1,zig2,zig3,zig4)

!        if (nobs(jstep).gt.0) then
!          nobsgid(jstep) = vezgdef(nobs(jstep),1,'Y','L',ig1obs,ig2obs,  &
!            ig3obs,ig4obs,dlonfld(1:nobs(jstep)),dlatfld(1:nobs(jstep)))
!        else
!          write(*,*) 'sugomobs: NO OBS found for this time bin =',jstep
!          nobsgid(jstep) = -999
!        endif

        do jlatband = 1,mpi_nprocs
          if (nobs_mpiglobal(jstep,jlatband).gt.0) then
            nobsgid_mpiglobal(jstep,jlatband) = vezgdef(nobs_mpiglobal(jstep,jlatband),  &
                 1,'Y','L',ig1obs,ig2obs,ig3obs,ig4obs,  &
                 dlonfld_mpiglobal(1:nobs_mpiglobal(jstep,jlatband),jlatband),  &
                 dlatfld_mpiglobal(1:nobs_mpiglobal(jstep,jlatband),jlatband))
          else
            write(*,*) 'sugomobs: NO OBS found for this time/lat bin =',jstep,jlatband
            nobsgid_mpiglobal(jstep,jlatband) = -999
          endif
        enddo

      enddo ! jstep
!
!     reading 2D fields
!
      do jvar=1,vnl_numvarmax2D
        if(.not.gsv_varExist(varNameList2D(jvar))) cycle

        call readTrialField4(varInterphr_M,varInterphr_VV,varNameList2D(jvar),'SF')
        if(varNameList2D(jvar).eq.'P0') then
          varInterphr_M(:,:)=varInterphr_M(:,:)*MPC_PA_PER_MBAR_R8
        endif
        call col_fillmvo(lcolumng ,varNameList2D(jvar),'NA',varInterphr_M)
        call col_fillmvo(lcolumnhr,varNameList2D(jvar),'NA',varInterphr_M)

      enddo
!
!     Derive the pressure fields at observation points from the hybrid
!     levels(vco_anl%dhyb_m), the hybrid coordinate parameters of the
!     analysis increment and the surface pressure of the trial field
!
      do jobs = 1,col_getNumCol(lcolumng)
        varInterpP0(1,jobs) = col_getElem(lcolumng,1,jobs,'P0')
      enddo

      if (associated(pobsm))  deallocate(pobsm)
      status=vgd_levels(vco_anl%vgrid,ip1_list=vco_anl%ip1_M,levels=pobsm,  &
                        sfc_field=varInterpP0,in_log=.false.)      
      if(status.ne.VGD_OK) then
         call abort3d('ERROR with vgd_levels for desired levels ')
      endif
      allocate(zppobsg(col_getNumLev(lcolumng),col_getNumCol(lcolumng)))
      zppobsg = transpose(pobsm(1,:,:))
      call col_fillmvo(lcolumng,'PP','NA',zppobsg)

      do jlev = 1,col_getNumLev(lcolumng)
        write(*,*) 'sugomobs: jlev, vco_anl%dhyb_m(jlev), col_getPressure(LCOLUMNG,jlev,1,NA) = ',  &
                   jlev,vco_anl%dhyb_m(jlev),col_getPressure(LCOLUMNG,jlev,1,'NA')
      enddo

!     Calculate profiles of pressure values at station location

      write(*,*) 'sugomobs:iversion= ',vco_trl%iversion
      write(*,*) 'sugomobs:ikind= ',vco_trl%ikind
      write(*,*) 'sugomobs:svcod= ',vco_trl%svcod

!     General treatment of trial field 
!     addition for BGCK unstagered mode
      if (vco_trl%iversion == 5001) call col_pointStagToUnstag(lcolumnhr)

!     Compute Pressure fields at desired levels
      if (associated(pobsm))  deallocate(pobsm)
      status=vgd_levels(vco_trl%vgrid,ip1_list=vco_trl%ip1_M,  &
                        levels=pobsm,sfc_field=varInterpP0,in_log=.false.)
      if(status.ne.VGD_OK) call abort3d('ERROR with vgd_levels')
      allocate(zppobs_M(nlv_M,col_getNumCol(lcolumng)))
      zppobs_M = transpose(pobsm(1,:,:))
      call col_fillmvo(lcolumnhr,'PP','MM',zppobs_M)

      if (associated(pobsm))  deallocate(pobsm)
      status=vgd_levels(vco_trl%vgrid,ip1_list=vco_trl%ip1_T,  &
                        levels=pobsm,sfc_field=varInterpP0,in_log=.false.)
      if(status.ne.VGD_OK) call abort3d('ERROR with vgd_levels')
      allocate(zppobs_T(nlv_T,col_getNumCol(lcolumng)))
      zppobs_T = transpose(pobsm(1,:,:))
      call col_fillmvo(lcolumnhr,'PP','TH',zppobs_T)
!      
!     Variable GZ qui se trouve sur les niveaux momentum et thermodynamiques
!
      write(*,*)' ----- Initializing GZ ----'
!
!     Lire les GZ des niveaux Momentum
!
      call readTrialField4(varInterphr_M,varInterphr_VV,'GZ','MM')
      varInterphr_M(:,:)=varInterphr_M(:,:)*10.0d0*RG
      call col_fillmvo(lcolumnhr,'GZ  ','MM',varInterphr_M)
!     remplir aussi columnhr_gz avec le GZ momentum (Needed for background check!)
      call col_fillmvo(lcolumnhr,'GZ  ','NA',varInterphr_M)
      write(*,*) 'sugomobs:GZ_M'
      do jlev = 1,nlv_M
        write(*,*) 'GZ,',jlev,varInterphr_M(jlev,1)
      enddo
!
!     Lire les GZ des niveaux Thermodynamique
!
      call readTrialField4(varInterphr_T,varInterphr_VV,'GZ','TH')
      varInterphr_T(:,:)=varInterphr_T(:,:)*10.0d0*RG
      call col_fillmvo(lcolumnhr,'GZ  ','TH',varInterphr_T)
      write(*,*) 'sugomobs:GZ_TH'
      do jlev = 1,nlv_T
        write(*,*)'GZ,',jlev,varInterphr_T(jlev,1)
      enddo
!
!     Now all of the other 3D variables
!
      do jvar=1, vnl_numvarmax3D
        if(.not.gsv_varExist(varNameList3D(jvar))) cycle

        select case ( varNameList3D(jvar) )
!
!       Variables sur les niveaux momentum
!
        case ('UU')
          write(*,*)' '
          write(*,*)' ----- Initializing UU and VV  ----'
          write(*,*)' '

          call readTrialField4(varInterphr_M,varInterphr_VV,'UV','MM')
         
          call vintprof(varInterpg_M,zppobsg,col_getNumLev(lcolumng),varInterphr_M,zppobs_M,nlv_M,col_getNumCol(lcolumng))
          varInterpg_M(:,:)=varInterpg_M(:,:)*MPC_M_PER_S_PER_KNOT_R8
          call col_fillmvo(lcolumng,'UU  ','NA',varInterpg_M)

          call vintprof(varInterpg_M,zppobsg,col_getNumLev(lcolumng),varInterphr_VV,zppobs_M,nlv_M,col_getNumCol(lcolumng))
          varInterpg_M(:,:)=varInterpg_M(:,:)*MPC_M_PER_S_PER_KNOT_R8
          call col_fillmvo(lcolumng,'VV  ','NA',varInterpg_M)

          write(*,*) 'sugomobs: UU ,nlev= ',nlv_M
          do jlev = 1,nlv_M
            write(*,*) 'UU',jvar,jlev,  &
                zppobs_m(jlev,1),varInterphr_M(jlev,1)
          enddo
          write(*,*) 'sugomobs: VV ,nlev= ',nlv_M
          do jlev = 1,nlv_M
            write(*,*) 'VV',jvar,jlev,  &
                zppobs_m(jlev,1),varInterphr_VV(jlev,1)
          enddo

          varInterphr_M(:,:)=varInterphr_M(:,:)*MPC_M_PER_S_PER_KNOT_R8
          call col_fillmvo(lcolumnhr,'UU  ','MM',varInterphr_M)
          varInterphr_VV(:,:)=varInterphr_VV(:,:)*MPC_M_PER_S_PER_KNOT_R8
          call col_fillmvo(lcolumnhr,'VV  ','MM',varInterphr_VV)
!
!       Variable sur les niveaux thermodynamiques
!
        case ('TT','HU')
          write(*,*)' '
          write(*,*)' ----- Initializing ',varNameList3D(jvar),' ----'
          write(*,*)' '

          call readTrialField4(varInterphr_T,varInterphr_VV,varNameList3D(jvar),'TH')
          write(*,*) 'sugomobs:',varNameList3D(jvar)
          do jlev = 1,nlv_T
            write(*,*) trim(varNameList3D(jvar)),',',jlev,varInterphr_T(jlev,1:2)
          enddo

          call vintprof(varInterpg_T,zppobsg,col_getNumLev(lcolumng),varInterphr_T,zppobs_T,nlv_T,col_getNumCol(lcolumng))

          if(varNameList3D(jvar).eq.'TT') then
            varInterpg_T(:,:)=varInterpg_T(:,:)+MPC_K_C_DEGREE_OFFSET_R8
            varInterphr_T(:,:)=varInterphr_T(:,:)+MPC_K_C_DEGREE_OFFSET_R8
          elseif(varNameList3D(jvar).eq.'HU') then
            do jobs=1,col_getNumCol(lcolumng)
              do jlev=1,col_getNumLev(lcolumng)
                varInterpg_T(jlev,jobs)=log(max(varInterpg_T(jlev,jobs),rhumin))
              enddo
              do jlev=1,nlv_T
                varInterphr_T(jlev,jobs)=log(max(varInterphr_T(jlev,jobs),rhumin))
              enddo
            enddo
          endif
          call col_fillmvo(lcolumng ,varNameList3D(jvar),'NA',varInterpg_T)
          call col_fillmvo(lcolumnhr,varNameList3D(jvar),'NA',varInterphr_T)

        end select 
      enddo
!
!     Initialisation of TLM operators
!
      call subasic_obs(lcolumng)
!
!     Using T, q and PS to compute GZ for columng
!
      do jobs = 1, col_getNumCol(lcolumng)
        call col_setMountain(lcolumng ,jobs,col_getMountain(lcolumnhr,jobs))
      enddo
      call tt2phi(lcolumng)
!
!     Using T, q and PS to compute GZ for columnhr
!
      if(vco_trl%iversion .eq. 5001 ) then  ! only in non-staggered mode
        call tt2phi(lcolumnhr)
      endif
!
!     Close the files
!
      do jstep=1,col_getNumStep(lcolumng)
        ierr=fstfrm(nultrl(jstep))  
        ierr=fclos(nultrl(jstep))  
      enddo
!
!     Deallocate the local arrays
!
      deallocate(datestamplist)
      deallocate(nobsgid)
      deallocate(notag)
      deallocate(nobs,nobs_maxmpiglobal)
      deallocate(varInterpg_T)
      deallocate(varInterpg_M)
      deallocate(varInterpP0)
      deallocate(varInterphr_T)
      deallocate(varInterphr_M,varInterphr_VV)
      deallocate(zppobsg)
      deallocate(zppobs_T,zppobs_M)
      deallocate(nultrl)
      deallocate(idate)
      deallocate(itime)
      deallocate(dlonfld)
      deallocate(dlatfld)
      deallocate(dlonfld_mpiglobal)
      deallocate(dlatfld_mpiglobal)
      deallocate(nobsgid_mpiglobal)
      deallocate(nobs_mpiglobal)

      write(*,*) ' '
      write(*,*) '-------- Leaving SUGOMOBS ---------'
      write(*,*) ' '

      return
!--------------------------------------------------------------------------------
      CONTAINS

      subroutine readTrialField(varInterphr_MT,varInterphr_VV,varName,varType_in)
!
! s/r readTrialField
!
!     Author  : M. Buehner, Dec 2012
!
!     Purpose: Read and interpolate all levels/time steps for a single variable of trial field
!
      implicit none
      character(len=*) :: varName
      character(len=*),optional :: varType_in
      character(len=2) :: varType
      real*8 :: varInterphr_MT(:,:),varInterphr_VV(:,:)
      real*4, allocatable :: varTrial3d(:,:,:)
      real*4, allocatable :: varTrial(:,:)
      real*8, allocatable :: varInterp_1lev(:),varInterp_1lev_VV(:)
      integer :: nlevel,nsize,iip1
      integer :: fstlir,vezuvint2,vezsint2,ezdefset

      allocate(varTrial3d(ini,inj,col_getNumStep(lcolumng)))
      allocate(varTrial(ini,inj))
      allocate(varInterp_1lev(maxval(nobs)))
      allocate(varInterp_1lev_VV(maxval(nobs)))
!
!     Determine the type and number of vertical levels
!
      if(present(varType_in)) then
        varType = varType_in
      else
        varType = vnl_vartypeFromVarname(varName)
      endif
      nlevel = col_getNumLev(lcolumnhr,varType)

      do jlev = 1,nlevel
        if(varType.eq.'MM') then
          IIP1 = vco_trl%ip1_M(jlev)
        elseif(varType.eq.'TH') then
          IIP1 = vco_trl%ip1_T(jlev)
        elseif(varType.eq.'SF') then
          IIP1 = -1
        else
          call abort3d('SUGOMOBS: unknown varType')
        endif

        call rpn_comm_barrier("GRID",ierr)
        call tmg_start(11,'TRLM_FSTLIR')

        do jstep = (1+mpi_myid),col_getNumStep(lcolumng),mpi_nprocs
          if(nobs_maxmpiglobal(jstep) > 0) then
            ierr=fstlir(varTrial3d(:,:,jstep),nultrl(jstep),ini,inj,ink,  &
                        datestamplist(jstep) ,cletiket,iip1,-1,-1,  &
                        cltypvar,varName)
            if(ierr.lt.0)then
              write(*,2001) varName,iip1,idate(jstep),itime(jstep)
              call abort3d('SUGOMOBS:Problem with background file')
            end if
          endif
        enddo
        call tmg_stop(11)

        call tmg_start(19,'SUGOMOBS_COMM')
        do jstep = 1,col_getNumStep(lcolumng)
          if(nobs_maxmpiglobal(jstep) > 0) then
            nsize=ini*inj
            call rpn_comm_bcast(varTrial3d(:,:,jstep),nsize,"mpi_real4",mod(jstep-1,mpi_nprocs),"GRID",ierr )
          endif
        enddo
        call tmg_stop(19)

        if(trim(varName).ne.'UU'.and.trim(varName).ne.'VV') then
          do jstep = 1,col_getNumStep(lcolumng)
            if(nobs(jstep) > 0) then
              iset = ezdefset(nobsgid(jstep),itrlgid)
              ierr = vezsint2(varInterp_1lev(1:nobs(jstep)),varTrial3d(:,:,jstep),  &
                              nobs(jstep),1,1,ini,inj,1)
              do jobs = 1, nobs(jstep)
                varInterphr_MT(jlev,notag(jobs,jstep)) = varInterp_1lev(jobs)
              enddo
            endif
          enddo
        else
          do jstep = 1,col_getNumStep(lcolumng)
            if(nobs(jstep) > 0) then
              varTrial(:,:) = 0.d0
              iset = ezdefset(nobsgid(jstep),itrlgid)
              if(trim(varName).eq.'UU') then
                ierr = vezuvint2(varInterp_1lev(1:nobs(jstep)),  &
                       varInterp_1lev_VV(1:nobs(jstep)),  &
                       varTrial3d(:,:,jstep),varTrial,  &
                       nobs(jstep),ini*inj)
              else
                ierr = vezuvint2(varInterp_1lev(1:nobs(jstep)),  &
                       varInterp_1lev_VV(1:nobs(jstep)),  &
                       varTrial,varTrial3d(:,:,jstep),  &
                       nobs(jstep),ini*inj)
              endif
              do jobs = 1, nobs(jstep)
                varInterphr_MT(jlev,notag(jobs,jstep)) =  &
                  varInterphr_MT(jlev,notag(jobs,jstep)) +  &
                  varInterp_1lev(jobs)
                varInterphr_VV(jlev,notag(jobs,jstep)) =  &
                  varInterphr_VV(jlev,notag(jobs,jstep)) +  &
                  varInterp_1lev_VV(jobs)
              enddo
            endif
          enddo !jstep
        endif
      enddo !jlev

      deallocate(varTrial)
      deallocate(varTrial3d)
      deallocate(varInterp_1lev,varInterp_1lev_VV)

 2001 format(1x,'SUGOMOBS: Problem finding variable',1x,a4,1x,'at level',  &
             i10,1x,', on',1x,i8,1x,'at',1x,i8.8,1x,'HHMMSSss')

      end subroutine readTrialField




      subroutine readTrialField2(varInterphr_MT,varInterphr_VV,varName,varType_in)
!
! s/r readTrialField
!
!     Author  : M. Buehner, Dec 2012
!
!     Purpose: Read and interpolate all levels/time steps for a single variable of trial field
!
      implicit none
      character(len=*) :: varName
      character(len=*),optional :: varType_in
      character(len=2) :: varType
      real*8 :: varInterphr_MT(:,:),varInterphr_VV(:,:)
      real*4, allocatable :: varTrial3d(:,:,:)
      real*4, allocatable :: varTrial(:,:)
      real*8, allocatable :: varInterp_1lev(:),varInterp_1lev_VV(:)
      integer :: nlevel,nsize,iip1
      integer :: fstlir,vezuvint2,vezsint2,ezdefset
!
!     Determine the type and number of vertical levels
!
      if(present(varType_in)) then
        varType = varType_in
      else
        varType = vnl_vartypeFromVarname(varName)
      endif
      nlevel = col_getNumLev(lcolumnhr,varType)

      allocate(varTrial3d(ini,inj,nlevel))
      allocate(varTrial(ini,inj))
      allocate(varInterp_1lev(maxval(nobs)))
      allocate(varInterp_1lev_VV(maxval(nobs)))

      do jstep = 1,col_getNumStep(lcolumng)

        if(nobs_maxmpiglobal(jstep) > 0) then

          call rpn_comm_barrier("GRID",ierr)
          call tmg_start(11,'TRLM_FSTLIR')
          do jlev = (1+mpi_myid),nlevel,mpi_nprocs
            if(varType.eq.'MM') then
              IIP1 = vco_trl%ip1_M(jlev)
            elseif(varType.eq.'TH') then
              IIP1 = vco_trl%ip1_T(jlev)
            elseif(varType.eq.'SF') then
              IIP1 = -1
            else
              call abort3d('SUGOMOBS: unknown varType')
            endif

            ierr=fstlir(varTrial3d(:,:,jlev),nultrl(jstep),ini,inj,ink,  &
                        datestamplist(jstep) ,cletiket,iip1,-1,-1,  &
                        cltypvar,varName)
            if(ierr.lt.0)then
              write(*,2001) varName,iip1,idate(jstep),itime(jstep)
              call abort3d('SUGOMOBS:Problem with background file')
            end if
          enddo
          call tmg_stop(11)

          call tmg_start(19,'SUGOMOBS_COMM')
          do jlev = 1,nlevel
            nsize=ini*inj
            call rpn_comm_bcast(varTrial3d(:,:,jlev),nsize,"mpi_real4",mod(jlev-1,mpi_nprocs),"GRID",ierr )
          enddo
          call tmg_stop(19)

        endif ! nobs_max > 0

        if(nobs(jstep) > 0) then

          iset = ezdefset(nobsgid(jstep),itrlgid)
          if(trim(varName).ne.'UU'.and.trim(varName).ne.'VV') then
            do jlev = 1,nlevel
              ierr = vezsint2(varInterp_1lev(1:nobs(jstep)),varTrial3d(:,:,jlev),  &
                              nobs(jstep),1,1,ini,inj,1)
              do jobs = 1, nobs(jstep)
                varInterphr_MT(jlev,notag(jobs,jstep)) = varInterp_1lev(jobs)
              enddo
            enddo
          else
            do jlev = 1,nlevel
              varTrial(:,:) = 0.d0
              if(trim(varName).eq.'UU') then
                ierr = vezuvint2(varInterp_1lev(1:nobs(jstep)),  &
                       varInterp_1lev_VV(1:nobs(jstep)),  &
                       varTrial3d(:,:,jlev),varTrial,  &
                       nobs(jstep),ini*inj)
              else
                ierr = vezuvint2(varInterp_1lev(1:nobs(jstep)),  &
                       varInterp_1lev_VV(1:nobs(jstep)),  &
                       varTrial,varTrial3d(:,:,jlev),  &
                       nobs(jstep),ini*inj)
              endif
              do jobs = 1, nobs(jstep)
                varInterphr_MT(jlev,notag(jobs,jstep)) =  &
                  varInterphr_MT(jlev,notag(jobs,jstep)) +  &
                  varInterp_1lev(jobs)
                varInterphr_VV(jlev,notag(jobs,jstep)) =  &
                  varInterphr_VV(jlev,notag(jobs,jstep)) +  &
                  varInterp_1lev_VV(jobs)
              enddo
            enddo !jlev
          endif

        endif !nobs>0

      enddo !jstep

      deallocate(varTrial)
      deallocate(varTrial3d)
      deallocate(varInterp_1lev,varInterp_1lev_VV)

 2001 format(1x,'SUGOMOBS: Problem finding variable',1x,a4,1x,'at level',  &
             i10,1x,', on',1x,i8,1x,'at',1x,i8.8,1x,'HHMMSSss')

      end subroutine readTrialField2



      subroutine readTrialField3(varInterphr_MT,varInterphr_VV,varName_in,varType_in)
!
! s/r readTrialField
!
!     Author  : M. Buehner, Dec 2012
!
!     Purpose: Read and interpolate all levels/time steps for a single variable of trial field
!
      implicit none
      character(len=*) :: varName_in
      character(len=*),optional :: varType_in
      character(len=2) :: varType,varName
      real*8 :: varInterphr_MT(:,:),varInterphr_VV(:,:)
      real*4, allocatable :: varTrial(:,:),varTrial_VV(:,:)
      real*8, allocatable :: varInterp(:,:,:),varInterp_VV(:,:,:)
      real*8, allocatable :: varInterp_recv(:,:),varInterp_recv_VV(:,:)
      integer :: nlevel,nsize,iip1,pe_send,pe_recv,tag,tag2
      integer :: fstlir,vezuvint2,vezsint2,ezdefset
!
!     Determine the type and number of vertical levels
!
      if(trim(varName_in).eq.'UV') then
        varName='UU'
      else
        varName=varName_in
      endif

      if(present(varType_in)) then
        varType = varType_in
      else
        varType = vnl_vartypeFromVarname(varName)
      endif
      nlevel = col_getNumLev(lcolumnhr,varType)

      allocate(varTrial(ini,inj))
      allocate(varTrial_VV(ini,inj))
      allocate(varInterp(maxval(nobs_mpiglobal),nlevel,mpi_nprocs))
      allocate(varInterp_VV(maxval(nobs_mpiglobal),nlevel,mpi_nprocs))
      allocate(varInterp_recv(maxval(nobs_mpiglobal),nlevel))
      allocate(varInterp_recv_VV(maxval(nobs_mpiglobal),nlevel))

      do jstep = 1,col_getNumStep(lcolumng)

        if(nobs_maxmpiglobal(jstep) > 0) then

          call rpn_comm_barrier("GRID",ierr)

          do jlev = (1+mpi_myid),nlevel,mpi_nprocs
            if(varType.eq.'MM') then
              IIP1 = vco_trl%ip1_M(jlev)
            elseif(varType.eq.'TH') then
              IIP1 = vco_trl%ip1_T(jlev)
            elseif(varType.eq.'SF') then
              IIP1 = -1
            else
              call abort3d('SUGOMOBS: unknown varType')
            endif

            call tmg_start(11,'TRLM_FSTLIR')
            ierr=fstlir(varTrial(:,:),nultrl(jstep),ini,inj,ink,  &
                        datestamplist(jstep) ,cletiket,iip1,-1,-1,  &
                        cltypvar,varName)
            if(ierr.lt.0)then
              write(*,2001) varName,iip1,idate(jstep),itime(jstep)
              call abort3d('SUGOMOBS:Problem with background file')
            end if
            if(varName.eq.'UU') then
              ierr=fstlir(varTrial_VV(:,:),nultrl(jstep),ini,inj,ink,  &
                          datestamplist(jstep) ,cletiket,iip1,-1,-1,  &
                          cltypvar,'VV')
              if(ierr.lt.0)then
                write(*,2001) 'VV',iip1,idate(jstep),itime(jstep)
                call abort3d('SUGOMOBS:Problem with background file')
              end if
            endif
            call tmg_stop(11)

            ! Interpolate to mpiglobal set of columns for a subset of levels
            call tmg_start(15,'SUGOMOBS_EZ')
            do jlatband = 1,mpi_nprocs
              if (nobs_mpiglobal(jstep,jlatband).gt.0) then
                iset = ezdefset(nobsgid_mpiglobal(jstep,jlatband),itrlgid)
                if(trim(varName).eq.'UU') then
                  call tmg_start(16,'SUGOMOBS_UVINT')
                  ierr = vezuvint2(varInterp(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband),  &
                                varInterp_VV(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband),  &
                                varTrial,varTrial_VV,  &
                                nobs_mpiglobal(jstep,jlatband),ini*inj)
                  call tmg_stop(16)
                else
                  call tmg_start(17,'SUGOMOBS_SINT')
                  ierr = vezsint2(varInterp(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband),  &
                                  varTrial,  &
                                  nobs_mpiglobal(jstep,jlatband),1,1,ini,inj,1)
                  call tmg_stop(17)
                endif
              endif
            enddo
            call tmg_stop(15)

          enddo

          call tmg_start(19,'SUGOMOBS_COMM')
          do jlatband = 1,mpi_nprocs
            if (nobs_mpiglobal(jstep,jlatband).gt.0) then
              do jlev = 1,nlevel

                pe_send = mod(jlev-1,mpi_nprocs)
                pe_recv = jlatband-1
                tag  = pe_recv*500 + pe_send
                tag2 = pe_recv*500 + pe_send + 1000000

                if(pe_send.eq.pe_recv) then
                  if(mpi_myid.eq.pe_send) then
                    varInterp_recv(1:nobs_mpiglobal(jstep,jlatband),jlev) =  &
                         varInterp(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband)
                    if(trim(varName).eq.'UU') then
                      varInterp_recv_VV(1:nobs_mpiglobal(jstep,jlatband),jlev) =  &
                           varInterp_VV(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband)
                    endif
                  endif
                else
                  if(mpi_myid.eq.pe_send) then
                    nsize=nobs_mpiglobal(jstep,jlatband)
                    call rpn_comm_send(varInterp(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband), &
                       nsize,"mpi_double_precision",pe_recv,tag,"GRID",ierr)
                    if(trim(varName).eq.'UU') then
                      call rpn_comm_send(varInterp_VV(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband), &
                         nsize,"mpi_double_precision",pe_recv,tag2,"GRID",ierr)
                    endif
                  endif

                  if(mpi_myid.eq.pe_recv) then
                    nsize=nobs_mpiglobal(jstep,jlatband)
                    call rpn_comm_recv(varInterp_recv(1:nobs_mpiglobal(jstep,jlatband),jlev), &
                       nsize,"mpi_double_precision",pe_send,tag,"GRID",status,ierr)
                    if(trim(varName).eq.'UU') then
                      call rpn_comm_recv(varInterp_recv_VV(1:nobs_mpiglobal(jstep,jlatband),jlev), &
                         nsize,"mpi_double_precision",pe_send,tag2,"GRID",status,ierr)
                    endif
                  endif
                endif

              enddo
            endif
          enddo
          call tmg_stop(19)

          do jlev = 1,nlevel
            do jobs = 1, nobs(jstep)
              varInterphr_MT(jlev,notag(jobs,jstep)) = varInterp_recv(jobs,jlev)
              if(trim(varName).eq.'UU') then
                varInterphr_VV(jlev,notag(jobs,jstep)) = varInterp_recv_VV(jobs,jlev)
              endif
            enddo
          enddo


        endif !nobs>0

      enddo !jstep

      deallocate(varTrial,varTrial_VV)
      deallocate(varInterp,varInterp_VV)
      deallocate(varInterp_recv,varInterp_recv_VV)

 2001 format(1x,'SUGOMOBS: Problem finding variable',1x,a4,1x,'at level',  &
             i10,1x,', on',1x,i8,1x,'at',1x,i8.8,1x,'HHMMSSss')

      end subroutine readTrialField3



      subroutine readTrialField4(varInterphr_MT,varInterphr_VV,varName_in,varType_in)
!
! s/r readTrialField
!
!     Author  : M. Buehner, Dec 2012
!
!     Purpose: Read and interpolate all levels/time steps for a single variable of trial field
!
      implicit none
      character(len=*) :: varName_in
      character(len=*),optional :: varType_in
      character(len=2) :: varType,varName
      real*8 :: varInterphr_MT(:,:),varInterphr_VV(:,:)
      real*4, allocatable :: varTrial(:,:),varTrial_VV(:,:)
      real*4, allocatable :: varTrial_zero(:,:)
      real*8, allocatable :: varInterp(:,:,:),varInterp_VV(:,:,:)
      real*8, allocatable :: varInterp2(:),varInterp2_VV(:)
      real*8, allocatable :: varInterp_recv(:,:),varInterp_recv_VV(:,:)
      integer :: nlevel,nsize,iip1,pe_send,pe_recv,tag,tag2
      integer :: fstlir,vezuvint2,vezsint2,ezdefset
!
!     Determine the type and number of vertical levels
!
      if(trim(varName_in).eq.'UV') then
        varName='UU'
      else
        varName=varName_in
      endif

      if(present(varType_in)) then
        varType = varType_in
      else
        varType = vnl_vartypeFromVarname(varName)
      endif
      nlevel = col_getNumLev(lcolumnhr,varType)

      allocate(varTrial(ini,inj))
      allocate(varTrial_VV(ini,inj))
      allocate(varTrial_zero(ini,inj))
      allocate(varInterp(maxval(nobs_mpiglobal),nlevel,mpi_nprocs))
      allocate(varInterp_VV(maxval(nobs_mpiglobal),nlevel,mpi_nprocs))
      allocate(varInterp2(maxval(nobs_mpiglobal)))
      allocate(varInterp2_VV(maxval(nobs_mpiglobal)))
      allocate(varInterp_recv(maxval(nobs_mpiglobal),nlevel))
      allocate(varInterp_recv_VV(maxval(nobs_mpiglobal),nlevel))
      varTrial_zero(:,:) = 0.0d0
      ! in the case that not all variable have the same etiket or typvar
      ! (this is necessary for extra 3d-var done before gen_coeff)
      cletiket='            '
      cltypvar='  '

      do jstep = 1,col_getNumStep(lcolumng)

        if(nobs_maxmpiglobal(jstep) > 0) then

          call rpn_comm_barrier("GRID",ierr)

          do jlev = (1+mpi_myid),nlevel,mpi_nprocs
            if(varType.eq.'MM') then
              IIP1 = vco_trl%ip1_M(jlev)
            elseif(varType.eq.'TH') then
              IIP1 = vco_trl%ip1_T(jlev)
            elseif(varType.eq.'SF') then
              IIP1 = -1
            else
              call abort3d('SUGOMOBS: unknown varType')
            endif

            call tmg_start(11,'TRLM_FSTLIR')
            ierr=fstlir(varTrial(:,:),nultrl(jstep),ini,inj,ink,  &
                        datestamplist(jstep) ,cletiket,iip1,-1,-1,  &
                        cltypvar,varName)
            if(ierr.lt.0)then
              write(*,2001) varName,iip1,idate(jstep),itime(jstep)
              call abort3d('SUGOMOBS:Problem with background file')
            end if
            if(varName.eq.'UU') then
              ierr=fstlir(varTrial_VV(:,:),nultrl(jstep),ini,inj,ink,  &
                          datestamplist(jstep) ,cletiket,iip1,-1,-1,  &
                          cltypvar,'VV')
              if(ierr.lt.0)then
                write(*,2001) 'VV',iip1,idate(jstep),itime(jstep)
                call abort3d('SUGOMOBS:Problem with background file')
              end if
            endif
            call tmg_stop(11)

            ! Interpolate to mpiglobal set of columns for a subset of levels
            call tmg_start(15,'SUGOMOBS_EZ')
            do jlatband = 1,mpi_nprocs
              if (nobs_mpiglobal(jstep,jlatband).gt.0) then
                iset = ezdefset(nobsgid_mpiglobal(jstep,jlatband),itrlgid)
                if(trim(varName).eq.'UU') then
                  call tmg_start(16,'SUGOMOBS_UVINT')

                  ierr = vezuvint2(varInterp(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband),  &
                                   varInterp_VV(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband),  &
                                   varTrial,varTrial_zero,  &
                                   nobs_mpiglobal(jstep,jlatband),ini*inj)
                  ierr = vezuvint2(varInterp2(1:nobs_mpiglobal(jstep,jlatband)),  &
                                   varInterp2_VV(1:nobs_mpiglobal(jstep,jlatband)),  &
                                   varTrial_zero,varTrial_VV,  &
                                   nobs_mpiglobal(jstep,jlatband),ini*inj)

                  varInterp(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband) =  &
                    varInterp(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband) +  &
                    varInterp2(1:nobs_mpiglobal(jstep,jlatband))
                  varInterp_VV(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband) =  &
                    varInterp_VV(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband) +  &
                    varInterp2_VV(1:nobs_mpiglobal(jstep,jlatband))

                  call tmg_stop(16)
                else
                  call tmg_start(17,'SUGOMOBS_SINT')
                  ierr = vezsint2(varInterp(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband),  &
                                  varTrial,  &
                                  nobs_mpiglobal(jstep,jlatband),1,1,ini,inj,1)
                  call tmg_stop(17)
                endif
              endif
            enddo
            call tmg_stop(15)

          enddo

          call tmg_start(19,'SUGOMOBS_COMM')
          do jlatband = 1,mpi_nprocs
            if (nobs_mpiglobal(jstep,jlatband).gt.0) then
              do jlev = 1,nlevel

                pe_send = mod(jlev-1,mpi_nprocs)
                pe_recv = jlatband-1
                tag  = pe_recv*500 + pe_send
                tag2 = pe_recv*500 + pe_send + 1000000

                if(pe_send.eq.pe_recv) then
                  if(mpi_myid.eq.pe_send) then
                    varInterp_recv(1:nobs_mpiglobal(jstep,jlatband),jlev) =  &
                         varInterp(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband)
                    if(trim(varName).eq.'UU') then
                      varInterp_recv_VV(1:nobs_mpiglobal(jstep,jlatband),jlev) =  &
                           varInterp_VV(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband)
                    endif
                  endif
                else
                  if(mpi_myid.eq.pe_send) then
                    nsize=nobs_mpiglobal(jstep,jlatband)
                    call rpn_comm_send(varInterp(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband), &
                       nsize,"mpi_double_precision",pe_recv,tag,"GRID",ierr)
                    if(trim(varName).eq.'UU') then
                      call rpn_comm_send(varInterp_VV(1:nobs_mpiglobal(jstep,jlatband),jlev,jlatband), &
                         nsize,"mpi_double_precision",pe_recv,tag2,"GRID",ierr)
                    endif
                  endif

                  if(mpi_myid.eq.pe_recv) then
                    nsize=nobs_mpiglobal(jstep,jlatband)
                    call rpn_comm_recv(varInterp_recv(1:nobs_mpiglobal(jstep,jlatband),jlev), &
                       nsize,"mpi_double_precision",pe_send,tag,"GRID",status,ierr)
                    if(trim(varName).eq.'UU') then
                      call rpn_comm_recv(varInterp_recv_VV(1:nobs_mpiglobal(jstep,jlatband),jlev), &
                         nsize,"mpi_double_precision",pe_send,tag2,"GRID",status,ierr)
                    endif
                  endif
                endif

              enddo
            endif
          enddo
          call tmg_stop(19)

          do jlev = 1,nlevel
            do jobs = 1, nobs(jstep)
              varInterphr_MT(jlev,notag(jobs,jstep)) = varInterp_recv(jobs,jlev)
              if(trim(varName).eq.'UU') then
                varInterphr_VV(jlev,notag(jobs,jstep)) = varInterp_recv_VV(jobs,jlev)
              endif
            enddo
          enddo

        endif !nobs>0

      enddo !jstep

      deallocate(varTrial,varTrial_VV)
      deallocate(varTrial_zero)
      deallocate(varInterp,varInterp_VV)
      deallocate(varInterp_recv,varInterp_recv_VV)

 2001 format(1x,'SUGOMOBS: Problem finding variable',1x,a4,1x,'at level',  &
             i10,1x,', on',1x,i8,1x,'at',1x,i8.8,1x,'HHMMSSss')

      end subroutine readTrialField4

      end subroutine sugomobs
