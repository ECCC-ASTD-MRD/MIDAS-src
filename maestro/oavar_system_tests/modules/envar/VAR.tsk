#!/bin/ksh
#.*****************************************************************************
#.
#.     JOB NAME - VAR
#.
#.     STATUS - OPERATIONAL - ESSENTIAL
#.
#.     DESCRIPTION - This tasks is the main one of the module.  It executes the
#.                   variational assimilation program.  
#.
#.*****************************************************************************

if [ -L ${TASK_BIN}/splitobs ]; then
    if [[ "${ENVAR_observations_splitobs}" = 'reflex' ]]; then
	splitobs_mode=reflex
    else
	splitobs_mode=splitobs
    fi
    splitobs_pgm=$(${TASK_BIN}/readlink ${TASK_BIN}/splitobs)
    splitobs_grid=$(${TASK_BIN}/readlink ${TASK_INPUT}/split_grid)
else
    splitobs_mode=no
    splitobs_pgm=no
    splitobs_grid=no
fi

if [ "${ENVAR_mode}" = EnVar ]; then
    ensemble=${TASK_INPUT}/ensemble
else
    ensemble=
fi

# This is needed because the version of oavar.launch I am using still uses ARMA_BURP_SPLIT
export OAVAR_BURP_SPLIT='yes'

${TASK_BIN}/oavar.launch                                                  \
    -cfg                ${ENVAR_CFG}                                      \
    -date               ${ENVAR_DATE}                                     \
    -date_trial         ${__ENVAR_DATE_m6}                                \
    -fallback_mode      ${ENVAR_fallback_mode}                            \
    -observations       ${TASK_INPUT}/observations                        \
    -trials             ${TASK_INPUT}/trial.model                         \
    -preconin           ${TASK_INPUT}/precon                              \
    -ensemble           ${ensemble}                                       \
    -bgcov              ${TASK_INPUT}/allStats/bgcov                      \
    -obscov             ${TASK_INPUT}/allStats/obscov                     \
    -coefsat            ${TASK_INPUT}/allStats/coefsat                    \
    -statsat            ${TASK_INPUT}/allStats/statsat                    \
    -namelist           ${TASK_INPUT}/namelist                            \
    -biascoeff          ${TASK_INPUT}/allStats/biascoeff                  \
    -analysisgrid       ${TASK_INPUT}/analysisgrid                        \
    -oavar              $(${TASK_BIN}/readlink ${TASK_BIN}/oavar.Abs)     \
    -oavar_mpirun       ${TASK_BIN}/oavar.mpirun                          \
    -mpimode            ${ENVAR_mpi_mode}                                 \
    -omp_stacksize      ${ENVAR_OMP_STACKSIZE}                            \
    -mpi_ssm            ${ENVAR_mpi_ssm}                                  \
    -npex               ${SEQ_NPEX}                                       \
    -npey               ${SEQ_NPEY}                                       \
    -splitobs_mode      ${splitobs_mode}                                  \
    -splitobs_pgm       ${splitobs_pgm}                                   \
    -splitobs_grid      ${splitobs_grid}                                  \
    -splitobs_nomvar    ${ENVAR_observations_splitobs_nomvar}             \
    -splitobs_ndigits   4                                                 \
    -ens_subdomains     ${ENVAR_ens_subdomains}                           \
    -etiket             ${ENVAR_etiket}                                   \
    -enstrials_extension_length ${ENVAR_enstrials_extension_length}       \
    -minimum_proportion_of_members ${ENVAR_minimum_proportion_of_members} \
    -editbrp            ${TASK_BIN}/editbrp                               \
    -reflex             ${TASK_BIN}/reflex                                \
    -run_in_parallel    ${TASK_BIN}/r.run_in_parallel                     \
    -tripotenml         ${TASK_BIN}/r.tripotenml                          \
    -remote_copy        ${TASK_BIN}/remote_copy

$SEQ_BIN/nodelogger -n $SEQ_NODE -s infox -m  "Distributing outputs"
cp flnml ${TASK_OUTPUT}/namelist

$SEQ_BIN/nodelogger -n $SEQ_NODE -s infox -m  "Combining processor specific output files"
~armabue/bin/combineprocs.sh
rm -f *_proc???

if [ -f "$(/bin/ls -1 rebm* | head -1)" ]; then
    mv rebm* ${TASK_OUTPUT}
elif [ "${ENVAR_mode}" != 'O-P' ]; then
    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info -m  "An increment file should have been produced"
    exit 1
fi

mv brp* ${TASK_OUTPUT}

if [ -f pm1q ]; then
    mv pm1q ${TASK_OUTPUT}
fi

## Manipulate the TMG file to remove the process id information
for file in $(ls TMG_3D-VAR*.hpm || true);  do
    no=$(echo $file | cut -d_ -f4)
    [ -f "${file}" ] && mv -f $file TMG_3D-VAR_${no}
done
