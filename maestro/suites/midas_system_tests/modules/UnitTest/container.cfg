UNITTEST_PGM_CFG=${UNITTEST_PGM_CFG:-${SEQ_EXP_HOME}/config/${SEQ_CURRENT_CONTAINER%/*}.cfg}
if [[ -f ${UNITTEST_PGM_CFG} ]]; then . ${DOT_CFG:-source_cfg.dot} ${UNITTEST_PGM_CFG}; fi

if [ -z "${UnitTest_reference}" ]; then
    ${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info  -m "You must specify an input path for this Unit Test with variable \${UnitTest_reference}"
    exit 1
fi

UnitTest_burp_diff=${UnitTest_burp_diff:-liburp}

echo "PLAT is ${ORDENV_PLAT}"
if [ "${ORDENV_PLAT}" = sles-11-sandybridge-64-xc40 -o "${ORDENV_PLAT}" = sles-11-haswell-64-xc40 -o "${ORDENV_PLAT}" = sles-11-amd64-64 -o "${ORDENV_PLAT}" = sles-11-broadwell-64-xc40 -o "${ORDENV_PLAT}" = ubuntu-14.04-amd64-64 ];then
    ## This is loaded in 'get', 'check' and 'update'
    UnitTest_ssm=${UnitTest_ssm:-"main/opt/cmcarc/cmcarc-4.3.1 eccc/mrd/rpn/utils/16.2.3 eccc/cmd/cmda/utils/16.2-6"}
    ## this is loaded in 'run' task essentially for 'r.run_in_parallel'
    UnitTest_run_ssm=${UnitTest_run_ssm:-eccc/mrd/rpn/utils/16.2.3}
else
    ## This is loaded in 'get', 'check' and 'update'
    UnitTest_ssm=${UnitTest_ssm:-"eccc/mrd/rpn/utils/19.6.0 eccc/cmd/cmda/utils/19.6.0-2"}
    ## this is loaded in 'run' task essentially for 'r.run_in_parallel'
    UnitTest_run_ssm=${UnitTest_run_ssm:-eccc/mrd/rpn/utils/19.6.0}
fi

## peut etre 'no', 'gdb' ou 'ddt'
UnitTest_run_debug=${UnitTest_run_debug:-no}

## C'est le script qui est utilise pour lancer le binaire
##   (par exemple, pour remplir les repertoire sous /tmp que le programme peut utiliser).
UnitTest_mpiscript=${UnitTest_mpiscript:-'<no value>'}
# Ces arguments seront donnes au script '${UnitTest_mpiscript}'
UnitTest_run_pgm_args=${UnitTest_run_pgm_args:-''}

UnitTest_run_environment_variables=${UnitTest_run_environment_variables:-''}

## If 'run', then the task 'run' will be relaunch ad vitam aeternam
## If 'check', then the task 'run' will be relaunch after the task 'check' ran and succeeded
## if 'no, the default', then nothing is relaunch and the module runs until the end of its flow.
UnitTest_run_relaunch=${UnitTest_run_relaunch:-no}

## par defaut, on ne verifie pas l'etiket mais si on veut le faire
## alors on peut utiliser 'UnitTest_checketiket=yes'.
UnitTest_checketiket=${UnitTest_checketiket:-no}

## path to reference results
UnitTest_reference=${UnitTest_reference}
## path to a directory where to put the updated results (used in task 'update')
UnitTest_reference_update=${UnitTest_reference_update}

## This is the expected maximum execution time of the program
UnitTest_maximum_execution_time=${UnitTest_maximum_execution_time}
## if equal to 'abort' then abort if the execution time is greater than maximum expected.
UnitTest_abort_when_over_maximum_exection_time=${UnitTest_abort_when_over_maximum_exection_time:-continue}

## a list of files that can be ignored when checking results
UnitTest_check_results_ignore=${UnitTest_check_results_ignore:-''}
## the number of parallel jobs launched in parallel
UnitTest_check_results_number_of_parallel=${UnitTest_check_results_number_of_parallel:-${SEQ_NPEX}}

UnitTest_cleanup=${UnitTest_cleanup:-"yes"}
