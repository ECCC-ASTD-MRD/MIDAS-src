#!/bin/ksh

NOT_VALIDATING=""

if [ "${EC_ARCH}" = AIX-powerpc7 ]; then
    diff_options='-h'
elif [ "${EC_ARCH}" = Linux_x86-64 ]; then
    diff_options='--speed-large-files'
else
    echo "The plateform 'EC_ARCH=${EC_ARCH}' is not supported"
fi

if [ "${UnitTest_checketiket}" = yes ]; then
    fstcomp_options=
else
    fstcomp_options='-ne'
fi

###############################################################
## This function check if a single file is validating against a
## reference.
function check_result {
    set -ex

    filename=${1}
    result_file=${2}

    live_file=${TASK_INPUT}/live_results/${filename}

    live=$(basename ${filename})
    rfrn=$(echo ${filename} | sed 's!/!.!g')

    mkdir ${rfrn}.check_result
    cd ${rfrn}.check_result

    not_validating=""

    if [ ! -f "${live_file}" ]; then
	$SEQ_BIN/nodelogger -n $SEQ_NODE -s info  -m "File '${live_file}' not available!"
	return 1
    fi

    ${TASK_BIN}/cmcarc -f ../${result_file} -x "${filename}" -O > ${rfrn}

    cmp_identical=yes
    cmp ${live_file} ${rfrn} || cmp_identical=no
    if [ "${cmp_identical}" = yes ]; then
        method=cmp
    else
        ${TASK_BIN}/r.filetype ${live_file}  > file.filetype  ||  livetype=$?
        ${TASK_BIN}/r.filetype ${rfrn}      > rfrn.filetype || filetype2=$?
        if [ "${livetype}" -eq "${filetype2}" ]; then
            case "${livetype}" in
                ## de type fichier standard
                1|2|3|33) method=fstcomp;;
                ## BURP
                6) method=${UnitTest_burp_diff};;
                ## when the filetype is not know, then use 'cmp'
                *) method=cmp;;
            esac
        else
	    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info  -m "The files ${live} are not of the same type!"
            method=not_the_same_type
        fi

        if [ "${method}" = fstcomp ]; then
            ln -s ${rfrn} rfrn
            ln -s ${live_file} live
	    ${TASK_BIN}/fstcomp ${fstcomp_options} -a live -b rfrn 2>&1 | tee fstcomp.list
	    cat fstcomp.list | grep -vE '^   \*|^1|^c_fstopl option REDUCTION32|^ Debug TG= T| SONT EGAUX$' | grep -v "^  NOM    ETIKET        IP1           IP2 IP3 E-REL-MAX  E-REL-MOY    VAR-A      C-COR        MOY-A        BIAIS      E-M
AX      E-MOY" | grep -v "^  \*\*   SKIPPING RECORD \"!!\", CAN'T COMPARE  \*\*$" | awk 'NF>0 && $(NF-1)!="0.0000E+00"' | tee fstcomp.list.grep
	    if [ -s fstcomp.list.grep ]; then
	        not_validating="yes"
	        rm fstcomp.list fstcomp.list.grep rfrn
	    else
	        ${TASK_BIN}/fstcomp ${fstcomp_options} -b live -a rfrn 2>&1 | tee fstcomp.list
	        cat fstcomp.list | grep -vE '^   \*|^1|^c_fstopl option REDUCTION32|^ Debug TG= T| SONT EGAUX$' | grep -v "^  NOM    ETIKET        IP1           IP2 IP3 E-REL-MAX  E-REL-MOY    VAR-A      C-COR        MOY-A        BIAIS      E-M
AX      E-MOY" | grep -v "^  \*\*   SKIPPING RECORD \"!!\", CAN'T COMPARE  \*\*$" | awk 'NF>0 && $(NF-1)!="0.0000E+00"' | tee fstcomp.list.grep
	        if [ -s fstcomp.list.grep ]; then
		    not_validating="yes"
	        fi
	        rm fstcomp.list fstcomp.list.grep rfrn
	    fi
        elif [ "${method}" = cmp ]; then
	    cmp ${live_file} ${rfrn} || not_validating="yes"
        elif [ "${method}" = diff ]; then
	    diff ${diff_options} ${live_file} ${rfrn} || not_validating="yes"
        elif [ "${method}" = liburp ]; then
	    status=0
	    diff ${live_file} ${rfrn} > /dev/null || status=1
	    if [ "${status}" -ne 0 ]; then
		${TASK_BIN}/liburp -wide ${live_file} > live.${live}
		${TASK_BIN}/liburp -wide ${rfrn}      > rfrn.${live}
		status=0
		cmp live.${live} rfrn.${live} || status=1
		if [ "${status}" -ne 0 ]; then
		    diff ${diff_options} live.${live} rfrn.${live} || not_validating="yes"
		    if [ -z "${not_validating}" ]; then
			rm live.${live} rfrn.${live}
		    fi
		fi
	    fi
        elif [ "${method}" = liburp-noresume ]; then
            [[ -f live.nores ]] && rm -f live.nores
            ${TASK_BIN}/editbrp -s ${live_file} -d live.nores -i<<EOF
 exclure('>>*******')
EOF
            [[ -f rfrn.nores ]] && rm -f rfrn.nores
            ${TASK_BIN}/editbrp -s ${rfrn} -d rfrn.nores -i<<EOF
 exclure('>>*******')
EOF
            ${TASK_BIN}/liburp -wide live.nores > live.${live}
            ${TASK_BIN}/liburp -wide rfrn.nores > rfrn.${live}
            cmp live.${live} rfrn.${live} || not_validating="yes"
	    if [ -n "${not_validating}" ]; then
	        ## Alors on trouve ce qui ne valide pas
                diff ${diff_options} live.${live} rfrn.${live} > diff.${live} || not_validating="yes"
	    fi
            if [ -z "${not_validating}" ]; then
                rm live.${live} rfrn.${live} live.nores rfrn.nores
	        [ -f diff.${live} ] && rm diff.${live}
            else
                cat diff.${live}
            fi
        elif [ "${method}" = SQL ]; then
	    fam=$(basename ${live} | cut -d. -f3 | cut -d_ -f2-)
	    if [ "$fam" = to_amsua ]; then
	        typ=amsua
	    elif [ "$fam" = to_amsub ]; then
	        typ=amsub
	    elif [ "$fam" = sc ]; then
	        typ=scat
	    elif [ "$fam" = ssmis ]; then
	        typ=ssmi
	    else
	        typ=$fam
	    fi
	    ${TASK_BIN}/burp2rdb -in ${live_file}  -out live.sql.${live} -type ${typ} || rm live.sql.${live}
	    if [ ! -s live.sql.${live} ]; then
	        $SEQ_BIN/nodelogger -n $SEQ_NODE -s info  -m "Problem with rdb2burp with file ${live}"
	        not_validating="problem"
	    else
	        ${TASK_BIN}/burp2rdb -in ${rfrn} -out rfrn.sql.${live} -type ${typ} || rm rfrn.sql.${live}
	        if [ ! -s rfrn.sql.${live} ]; then
		    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info  -m "Problem with rdb2burp with file ${rfrn}"
		    not_validating="problem"
	        else
		    case "${fam}" in
		        to_amsua|to_amsub|csr|airs|iasi|ssmis) satel_elem=",bias_corr" ;;
		        *) satel_elem="" ;;
		    esac
		    cat > sqldir <<EOF
.nullvalue NULL
.mode tabs
select id_stn,lat,lon,date,time,omp,obsvalue,vcoord,flag${satel_elem} from header natural join data  order by concat(id_stn,lat,lon,date,time);
EOF

		    cat sqldir | ${TASK_BIN}/d.sqlite -noheader live.sql.${live} | sort -n > live.sqllist.${live} || rm live.sqllist.${live}
		    if [ ! -s live.sqllist.${live} ]; then
		        $SEQ_BIN/nodelogger -n $SEQ_NODE -s info  -m "Problem with SQL request for file ${live}"
		        not_validating="problem"
		    else
		        cat sqldir | ${TASK_BIN}/d.sqlite -noheader rfrn.sql.${live} | sort -n > rfrn.sqllist.${live} || rm rfrn.sqllist.${live}
		        if [ ! -s rfrn.sqllist.${live} ]; then
			    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info  -m "Problem with SQL request for file ${rfrn}"
			    not_validating="problem"
		        else
			    diff ${diff_options} live.sqllist.${live} rfrn.sqllist.${live} || not_validating="yes"
			    cmp live.sqllist.${live} rfrn.sqllist.${live} || echo "'cmp' found files different"
			    if [ -z "${not_validating}" ]; then
			        rm live.sql.${live} rfrn.sql.${live} live.sqllist.${live} rfrn.sqllist.${live}
			    fi
		        fi ## Fin du else pour le 'if [ ! -s rfrn.sqllist.${live} ]'
		    fi ## Fin du else pour le 'if [ ! -s live.sqllist.${live} ]'
	        fi ## Fin du else pour le 'if [ ! -s rfrn.sql.${live} ]'
	    fi ## Fin du else pour le 'if [ ! -s live.sql.${live} ]'
        elif [ "${method}" = not_the_same_type ]; then
            not_validating=yes
        else
	    echo "In function check_result:  method=${method} is not one of the possibility"
	    echo "Please use 'fstcomp', 'cmp' or 'diff'"
	    exit 1
        fi
    fi ## Fin du 'if [ "${cmp_not_identical}" = yes ]'

    if [ -n "${not_validating}" ]; then
	message="The file ${live} does not validate with method '${method}'!"
	echo "${message}"
	$SEQ_BIN/nodelogger -n $SEQ_NODE -s infox  -m "${message}"
	NOT_VALIDATING="yes"
        return 1
    else
	message="The file ${live} is validating with method '${method}'!"
	echo "${message}"
	## $SEQ_BIN/nodelogger -n $SEQ_NODE -s infox -m "${message}"
    fi
}
## Fin de la fonction 'check_results'
#######################################


for result in ${TASK_INPUT}/results/*; do
    bresult=$(basename ${result})
    ref=$(${TASK_BIN}/readlink ${result})
    if [ -f "${ref##*:}" ]; then
        ${SEQ_BIN}/nodelogger -n $SEQ_NODE -s infox -m "Local copy of reference results: ${ref##*:}"
        ln -s ${ref##*:} ${bresult}
    else
        ${SEQ_BIN}/nodelogger -n $SEQ_NODE -s infox -m "Downloading reference results: ${ref}"
        ${TASK_BIN}/remote_copy ${ref} ${bresult}
    fi
    cmcarc -f ${bresult} -t > results_files.tmp
    nb_lines=$(cat results_files.tmp | wc -l)
    yes "${bresult}" | head -n ${nb_lines} | paste results_files.tmp - >> results_files
done

( cd ${TASK_INPUT}/live_results; find . -type f ) | cut -c3- | sort > ls_live_results

if [ -n "${UnitTest_check_results_ignore}" ]; then
    for file2ignore in ${UnitTest_check_results_ignore}; do
        sed -i "/^${file2ignore}$/d" ls_live_results
    done
fi

diff_result=0
awk '{print $1}' results_files | sort | diff ls_live_results - || diff_result=1
if [ "${diff_result}" -ne 0 ]; then
    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info -m "The directory 'run/output' and the reference don't contain the same files."
    exit 1
fi

number_of_parallel_check_results_in_execution=0
while read line; do
    set ${line}
    file=$1
    results_file=$2
    thisfile=${PWD}/$(echo ${file} | sed 's!/!.!g')
    check_result ${file} ${results_file} > ${thisfile}.listing 2>&1 || touch ${thisfile}.not_validating &
    let number_of_parallel_check_results_in_execution=number_of_parallel_check_results_in_execution+1
    if [ "${number_of_parallel_check_results_in_execution}" -ge "${UnitTest_check_results_number_of_parallel}" ]; then
        wait
        number_of_parallel_check_results_in_execution=0
    fi
done < results_files
wait

for file in *.listing; do
    echo Listing file of ${file}
    cat ${file}
done

if [ -n "$(/bin/ls *.not_validating 2>/dev/null)" ]; then
    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info -m "One of the files does not validate"
    exit 1
else
    $SEQ_BIN/nodelogger -n $SEQ_NODE -s infox -m "All files do validate"
fi
