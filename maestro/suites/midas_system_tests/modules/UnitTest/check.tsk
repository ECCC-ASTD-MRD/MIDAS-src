
NOT_VALIDATING=""

if [ "${EC_ARCH}" = AIX-powerpc7 ]; then
    diff_options='-h'
elif [ "${EC_ARCH}" = Linux_x86-64 ]; then
    diff_options='--speed-large-files'
else
    echo "The plateform 'EC_ARCH=${EC_ARCH}' is not supported"
fi

if [ "${UnitTest_checketiket}" = yes ]; then
    fstcomp_options=
else
    fstcomp_options='-ne'
fi

###############################################################
## This function check if a single file is validating against a
## reference.
function check_result {
    set -ex

    filename=${1}
    result_file=${2}

    live_file=${TASK_INPUT}/live_results/${filename}

    live=$(basename ${filename})
    rfrn=$(echo ${filename} | sed 's!/!.!g')

    mkdir ${rfrn}.check_result
    cd ${rfrn}.check_result

    not_validating=""

    if [ ! -f "${live_file}" ]; then
	$SEQ_BIN/nodelogger -n $SEQ_NODE -s info  -m "File '${live_file}' not available!"
	return 1
    fi

    ${TASK_BIN}/cmcarc -f ../${result_file} -x "${filename}" -O > ${rfrn}

    ln -s ${rfrn}      rfrn
    ln -s ${live_file} live

    cmp_identical=yes
    cmp live rfrn || cmp_identical=no
    if [ "${cmp_identical}" = yes ]; then
        method=cmp
    else
        ${TASK_BIN}/r.filetype ${live_file} > live.filetype ||  livetype=$?
        ${TASK_BIN}/r.filetype ${rfrn}      > rfrn.filetype || filetype2=$?

        if [ "${livetype}" -eq "${filetype2}" ]; then
            case "${livetype}" in
                ## de type fichier standard
                1|2|3|33) method=fstcomp;;
                ## BURP
                6) method=${UnitTest_burp_diff};;
                ## SQLite
                255)
                    if [[ "$(cat live.filetype)" == "${live_file}: SQLite 3.x database"* && \
                          "$(cat rfrn.filetype)" == "${rfrn}: SQLite 3.x database"* ]]; then
                        method=SQLite
                    else
	              method=cmp
                   fi;;
                ## when the filetype is not know, then use 'cmp'
                *) method=cmp;;
            esac
        else
	    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info  -m "The files ${live} are not of the same type!"
            method=not_the_same_type
        fi

        if [ "${method}" = fstcomp ]; then
	    ${TASK_BIN}/fstcomp ${fstcomp_options} -a live -b rfrn 2>&1 | tee fstcomp.list
	    cat fstcomp.list | grep -vE '^\-' | grep -vE '^Start' | grep -vE '^Application' | grep -vE '^Libraries' | grep -vE '^Finish' | grep -vE '^Execution' | grep -vE '^Status' | grep -vE '^ *rmn' | grep -vE '^   \*|^1|^c_fstopl option REDUCTION32|^ Debug TG= T| SONT EGAUX$' | grep -v "^  NOM    ETIKET           IP1            IP2       IP3   E-REL-MAX   E-REL-MOY   VAR-A        C-COR        MOY-A        BIAIS       E-MAX       E-MOY" | grep -v "^  \*\*   SKIPPING RECORD \"!!\", CAN'T COMPARE  \*\*$" | grep -v "PAS DE COMPARAISON" | awk 'NF>0 && $(NF-1)!="0.0000E+00"' | tee fstcomp.list.grep
	    if [ -s fstcomp.list.grep ]; then
	        not_validating=yes
                maxerror=$(awk '{if ($(NF-1)>maxerror)  maxerror=$(NF-1)} END{print maxerror}' fstcomp.list.grep)
	    else
	        ${TASK_BIN}/fstcomp ${fstcomp_options} -b live -a rfrn 2>&1 | tee fstcomp.list
	        cat fstcomp.list | grep -vE '^\-' | grep -vE '^Start' | grep -vE '^Application' | grep -vE '^Libraries' | grep -vE '^Finish' | grep -vE '^Execution' | grep -vE '^Status' | grep -vE '^ *rmn' | grep -vE '^   \*|^1|^c_fstopl option REDUCTION32|^ Debug TG= T| SONT EGAUX$' | grep -v "^  NOM    ETIKET           IP1            IP2       IP3   E-REL-MAX   E-REL-MOY   VAR-A        C-COR        MOY-A        BIAIS       E-MAX       E-MOY" | grep -v "^  \*\*   SKIPPING RECORD \"!!\", CAN'T COMPARE  \*\*$" | grep -v "PAS DE COMPARAISON" | awk 'NF>0 && $(NF-1)!="0.0000E+00"' | tee fstcomp.list.grep
	        if [ -s fstcomp.list.grep ]; then
		    not_validating=yes
                    maxerror=$(awk '{if ($(NF-1)>maxerror)  maxerror=$(NF-1)} END{print maxerror}' fstcomp.list.grep)
	        fi
	    fi
        elif [ "${method}" = cmp ]; then
	    cmp live rfrn || not_validating=yes
        elif [ "${method}" = diff ]; then
	    diff ${diff_options} live rfrn || not_validating=yes
        elif [ "${method}" = SQLite ]; then
	    status=0
	    diff live rfrn > /dev/null || status=1
	    if [ "${status}" -ne 0 ]; then
                ## Extract the content of the two SQLite databases
		${TASK_BIN}/lisqlite live livetables
		${TASK_BIN}/lisqlite rfrn rfrntables
                ## Check if the two SQLite databases contain the same tables
                ls -1 livetables_* > livetables
                ls -1 rfrntables_* > rfrntables
                status=0
		sed 's/^livetables_/rfrntables_/' livetables | diff ${diff_options} - rfrntables || status=1
                if [ "${status}" -ne 0 ]; then
                    echo "The two files does not contain the same tables."
                    not_validating=yes
                fi
                ## check the content of common tables
                for livetable in livetables_*; do
                    suffix=${livetable#*_}
                    rfrntable=rfrntables_${suffix}
                    if [ ! -f "${rfrntable}" ]; then
                        not_validating=yes
                    else
		        status=0
                        cmp ${livetable} ${rfrntable} || status=1
                        if [ "${status}" -ne 0 ]; then
                            status=0
		            diff ${diff_options} ${livetable} ${rfrntable} || status=1
                            if [ "${status}" -ne 0 ]; then
                                not_validating=yes
                            fi
                        fi
                    fi
                done
	    fi
        elif [ "${method}" = liburp ]; then
	    status=0
	    diff live rfrn > /dev/null || status=1
	    if [ "${status}" -ne 0 ]; then
		${TASK_BIN}/liburp -wide live > live.liburp
		${TASK_BIN}/liburp -wide rfrn > rfrn.liburp
		status=0
		cmp live.liburp rfrn.liburp || status=1
		if [ "${status}" -ne 0 ]; then
		    diff ${diff_options} live.liburp rfrn.liburp || not_validating=yes
		fi
	    fi
        elif [ "${method}" = liburp-noresume ]; then
            [[ -f live.nores ]] && rm -f live.nores
            ${TASK_BIN}/editbrp -s live -d live.nores -i<<EOF
 exclure('>>*******')
EOF
            [[ -f rfrn.nores ]] && rm -f rfrn.nores
            ${TASK_BIN}/editbrp -s rfrn -d rfrn.nores -i<<EOF
 exclure('>>*******')
EOF
            ${TASK_BIN}/liburp -wide live.nores > live.liburp
            ${TASK_BIN}/liburp -wide rfrn.nores > rfrn.liburp
            cmp live.liburp rfrn.liburp || not_validating=yes
	    if [ -n "${not_validating}" ]; then
	        ## Alors on trouve ce qui ne valide pas
                diff ${diff_options} live.liburp rfrn.liburp > diff.liburp || not_validating=yes
	    fi
            if [ -n "${not_validating}" ]; then
                cat diff.liburp
            fi
        elif [ "${method}" = SQL ]; then
	    fam=$(basename ${live} | cut -d. -f3 | cut -d_ -f2-)
	    if [ "$fam" = to_amsua ]; then
	        typ=amsua
	    elif [ "$fam" = to_amsub ]; then
	        typ=amsub
	    elif [ "$fam" = sc ]; then
	        typ=scat
	    elif [ "$fam" = ssmis ]; then
	        typ=ssmi
	    else
	        typ=$fam
	    fi
            status=0
	    ${TASK_BIN}/burp2rdb -in live  -out live.sql -type ${typ} || status=1
	    if [ "${status}" -ne 0 ]; then
	        $SEQ_BIN/nodelogger -n $SEQ_NODE -s info -m "Problem with rdb2burp with file ${live}"
	        not_validating=problem
	    else
	        ${TASK_BIN}/burp2rdb -in rfrn -out rfrn.sql -type ${typ} || status=1
	        if [ "${status}" -ne 0 ]; then
		    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info  -m "Problem with rdb2burp with file ${rfrn}"
		    not_validating=problem
	        else
		    case "${fam}" in
		        to_amsua|to_amsub|csr|airs|iasi|ssmis) satel_elem=",bias_corr";;
		        *) satel_elem="" ;;
		    esac
		    cat > sqldir <<EOF
.nullvalue NULL
.mode tabs
select id_stn,lat,lon,date,time,omp,obsvalue,vcoord,flag${satel_elem} from header natural join data  order by concat(id_stn,lat,lon,date,time);
EOF

                    cat sqldir | ${TASK_BIN}/d.sqlite -noheader live.sql | sort -n > live.sqllist || status=1
		    if [ "${status}" -ne 0 ]; then
		        $SEQ_BIN/nodelogger -n $SEQ_NODE -s info  -m "Problem with SQL request for file ${live}"
		        not_validating=problem
		    else
                        cat sqldir | ${TASK_BIN}/d.sqlite -noheader rfrn.sql | sort -n > rfrn.sqllist || status=1
		        if [ "${status}" -ne 0 ]; then
			    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info  -m "Problem with SQL request for file ${rfrn}"
			    not_validating=problem
		        else
			    diff ${diff_options} live.sqllist rfrn.sqllist || not_validating=yes
			    cmp live.sqllist rfrn.sqllist || echo "'cmp' found files different"
		        fi
		    fi
	        fi
	    fi
        elif [ "${method}" = not_the_same_type ]; then
            not_validating=yes
        else
	    $SEQ_BIN/nodelogger -n $SEQ_NODE -s infox -m "In function check_result: method='${method}' is not one of the possibility to compare files"
	    NOT_VALIDATING=yes
	    return 1
        fi
    fi ## Fin du 'if [ "${cmp_not_identical}" = yes ]'

    if [ -n "${not_validating}" ]; then
        if [ "${method}" = fstcomp -a -n "${maxerror}" ]; then
            message="The file ${file} does not validate with method '${method}'!  (with a maximum absolute error of ${maxerror})"
        else
	    message="The file ${file} does not validate with method '${method}'!"
        fi
	echo "${message}"
	$SEQ_BIN/nodelogger -n $SEQ_NODE -s infox  -m "${message}"
	NOT_VALIDATING=yes
        return 1
    else
	message="The file ${live} is validating with method '${method}'!"
	echo "${message}"
	## $SEQ_BIN/nodelogger -n $SEQ_NODE -s infox -m "${message}"
    fi
}
## Fin de la fonction 'check_results'
#######################################

pgmpath=$(${TASK_BIN}/readlink ${TASK_INPUT}/pgm)
${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s infox -m "Checking results generated by ${pgmpath##*/} at ${pgmpath}"

for result in ${TASK_INPUT}/results/*; do
    bresult=$(basename ${result})
    ref=$(${TASK_BIN}/readlink ${result})
    if [ -f "${ref##*:}" ]; then
        ${SEQ_BIN}/nodelogger -n $SEQ_NODE -s infox -m "Local copy of reference results: ${ref##*:}"
        ln -s ${ref##*:} ${bresult}
    else
        ${SEQ_BIN}/nodelogger -n $SEQ_NODE -s infox -m "Downloading reference results: ${ref}"
        ${TASK_BIN}/remote_copy ${ref} ${bresult}
    fi
    cmcarc -f ${bresult} -t > results_files.tmp
    nb_lines=$(cat results_files.tmp | wc -l)
    yes "${bresult}" | head -n ${nb_lines} | paste results_files.tmp - >> results_files
done

( cd ${TASK_INPUT}/live_results; find . -type f ) | cut -c3- | sort > ls_live_results

if [ -n "${UnitTest_check_results_ignore}" ]; then
    for file2ignore in ${UnitTest_check_results_ignore}; do
        sed -i "/^${file2ignore}$/d" ls_live_results
    done
fi

diff_result=0
awk '{print $1}' results_files | sort | diff ls_live_results - || diff_result=1
if [ "${diff_result}" -ne 0 ]; then
    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info -m "The directory 'run/output' and the reference don't contain the same files."
    exit 1
fi

number_of_parallel_check_results_in_execution=0
while read line; do
    set ${line}
    file=$1
    results_file=$2
    thisfile=${PWD}/$(echo ${file} | sed 's!/!.!g')
    check_result ${file} ${results_file} > ${thisfile}.listing 2>&1 || touch ${thisfile}.not_validating &
    let number_of_parallel_check_results_in_execution=number_of_parallel_check_results_in_execution+1
    if [ "${number_of_parallel_check_results_in_execution}" -ge "${UnitTest_check_results_number_of_parallel}" ]; then
        wait
        number_of_parallel_check_results_in_execution=0
    fi
done < results_files
wait

max_lines_in_listings=200
for file in *.listing; do
    nlines=$(wc -l < ${file})
    if [[ ${nlines} -gt ${max_lines_in_listings} ]] ; then
      echo "Here are the first ${max_lines_in_listings} lines of the diff file: ${file}"
      head -n ${max_lines_in_listings} ${file}
    else
      echo Listing file of ${file}
      cat ${file}
    fi
done

if [ -n "$(/bin/ls *.not_validating 2>/dev/null)" ]; then
    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info -m "One of the files does not validate"
    exit 1
else
    $SEQ_BIN/nodelogger -n $SEQ_NODE -s infox -m "All files do validate"
fi

if [ "${UnitTest_run_relaunch}" = check ]; then
    maestro -s submit -n ${SEQ_CONTAINER}/run -d ${SEQ_DATE}
    SEQ_XFER=stop
elif [ "${UnitTest_run_relaunch}" != run -a "${UnitTest_run_relaunch}" != no ]; then
    echo "The variable 'UnitTest_run_relaunch' can only be equal to 'run', 'check' or 'no' and not '${UnitTest_run_relaunch}'."
    exit 1
fi ## Fin du 'if [ "${UnitTest_run_relaunch}" = check ]'
