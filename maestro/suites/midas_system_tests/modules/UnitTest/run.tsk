#!/bin/ksh

cp ${UnitTest_run_namelist} flnml
cp ${TASK_BIN}/pgm .
ln -s ${TASK_INPUT}/inputs/* .

export AFSISIO=/home/smco502

if [[ "${ORDENV_PLAT}" = sles-*xc50 ]]; then
    module load craype-hugepages16M
    export FOR_DISABLE_KMP_MALLOC=0
elif [[ "${ORDENV_PLAT}" = ubuntu-18.04* ]]; then
    ## loading OpenMPI 3.1.2 (the binaries must be compiled with too)
    . ssmuse-sh -d hpco/exp/intelpsxe-cluster-19.0.3.199
    . ssmuse-sh -d hpco/exp/openmpi/openmpi-3.1.2--hpcx-2.2.0--ofed-4.4.2--intel-2019.0.045
    . ssmuse-sh -d hpco/exp/openmpi-setup/openmpi-setup-0.2
elif [ "${ORDENV_PLAT}" = rhel-8-icelake-64 ]; then
    # . r.load.dot rpn/code-tools/ENV/cdt-1.5.3-b-inteloneapi-2021.4.0
    # . ssmuse-sh -x /fs/ssm/main/opt/intelcomp/inteloneapi-2021.4.0

    # instead of loading the whole OneAPI Intel compiler environment, we only load the essential
    # things to be able to run
    #    see https://gitlab.science.gc.ca/hpc/hpcr_upgrade_2/issues/72#note_390802
    . /fs/ssm/main/opt/intelcomp/master/inteloneapi_2021.4.0_multi/oneapi/compiler/2021.4.0/env/vars.sh
    . /fs/ssm/main/opt/intelcomp/master/inteloneapi_2021.4.0_multi/oneapi/mpi/2021.4.0/env/vars.sh
    export I_MPI_F77=ifort
    export I_MPI_F90=ifort
    export I_MPI_FC=ifort
    export I_MPI_CC=icc
    export I_MPI_CXX=icpc

    ## essential variables
    export UCX_NET_DEVICES=mlx5_0:1
    export I_MPI_HYDRA_BOOTSTRAP=ssh
    ## suggested for improved performance
    export I_MPI_JOB_RESPECT_PROCESS_PLACEMENT=no # Allow override of placement directives
    export I_MPI_PIN_DOMAIN=auto:scatter # Considered option auto:compact
    export KMP_AFFINITY=compact # Allows pinning the threads
else
    echo "The plateform ORDENV_PLAT=${ORDENV_PLAT} is not supported"
    exit 1
fi

export TMG_ON=YES
export OMP_STACKSIZE=4G

for __envvar__ in ${UnitTest_run_environment_variables}; do
    eval "export ${__envvar__}"
done
unset __envvar__

cat << EOF > ptopo_nml
 &ptopo
  npex=${SEQ_NPEX}
  npey=${SEQ_NPEY}
/
EOF

if [ "${UnitTest_run_debug}" = ddt ]; then
    if [[ "${ORDENV_PLAT}" = sles-*xc40 ]]; then
        run_in_parallel_extra_args=-ddt
        RUN_PGM=./pgm
    else
        cat > run.sh <<EOF
#!/bin/ksh

/fs/home/fs1/ords/ssc/hpco/mib002/allinea/forge/bin/ddt-client --ddtsessionfile ${HOME}/.allinea/session/eccc1-ppp2-1 ./pgm
EOF
        RUN_PGM=./run.sh
    fi
elif [ "${UnitTest_run_debug}" = gdb ]; then
    cat > run.sh <<EOF
#!/bin/ksh
gdb -ex run -ex where ./pgm
EOF
    RUN_PGM=./run.sh
elif [ "${UnitTest_run_debug}" = no ]; then
    RUN_PGM=./pgm
else
    echo "The value of 'UnitTest_run_debug=${UnitTest_run_debug}' is not 'ddt', 'gdb' or 'no' so we will use 'no'."
    RUN_PGM=./pgm
fi

[ ! -x "${RUN_PGM}" ] && chmod u+x ${RUN_PGM}
ulimit -c unlimited

pgmpath=$(${TASK_BIN}/read_link ${TASK_BIN}/pgm)
${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s infox -m "Launching ${pgmpath}"

if [ -L ${TASK_BIN}/mpiscript ]; then
    cp ${TASK_BIN}/mpiscript ./mpiscript
    chmod +x mpiscript
    cmd=./mpiscript
    export RUN_PGM
else
    cmd=${RUN_PGM}
fi

[ ! -d obs ] && mkdir obs
echo "Copy of observations starts at $(date +%Y%m%d:%H:%M:%S.%N)"
/bin/cp burpfiles_*/brp*_*_* ./obs || true
/bin/cp sqlfiles_*/obs*_*_* ./obs || true
/bin/cp obsfiles_*/obs*_*_* ./obs || true

echo "Launching ${pgmpath} at $(date +%Y%m%d:%H:%M:%S.%N)"

SECONDS=0
${TASK_BIN}/r.run_in_parallel -pgm ${cmd} -npex ${SEQ_NPEX} -npey ${SEQ_NPEY} -processorder -tag -nocleanup -verbose -tmpdir ${PWD}/mpitmpdir ${run_in_parallel_extra_args} -args ${UnitTest_run_pgm_args}
#status=0
#mpirun -n $((SEQ_NPEX*SEQ_NPEY)) ${cmd} ${UnitTest_run_pgm_args} || status=$?
#echo mpirun exit code is ${status}
#[ "${status}" -ne 0 ] && exit 1

RUNTIME=${SECONDS}

echo "End of ${pgmpath} at $(date +%Y%m%d:%H:%M:%S.%N)"

## If we will not check the runtime, then issue the message now
if [ -z "${UnitTest_maximum_execution_time}" ]; then
    ${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s infox -m "The runtime was ${RUNTIME} seconds."
fi

## remove inputs
for file in ${TASK_INPUT}/inputs/*; do
    bfile=$(basename ${file})
    ## habituellement, les fichiers 'brp', 'sql' ou 'sqlfiles' sont mis a jour alors on ne les efface pas pour les garder
    if [[ "${bfile}" == brp* || "${bfile}" == sql* || "${bfile}" == obsfiles* ]]; then
        if [ -f "${file}" ]; then
            continue
        fi
    fi
    rm -r ${bfile}
done

## remove other files created by the execution
rm -f flnml pgm ptopo_nml run.sh mpiscript VAR3D_STATUS.dot
rm -r mpitmpdir
[ -d obs ] && rm -r obs
[ -d obsBeforeThinning ] && rm -r obsBeforeThinning

## put all the rest in 'output'
mv * ${TASK_OUTPUT}

if (( $(echo "${RUNTIME} < 3" | bc -l) )); then
    ${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info -m "The runtime was ${RUNTIME} seconds which is really short."
    exit 1
fi

## Check runtime
if [ -n "${UnitTest_maximum_execution_time}" ]; then
    function parse_time {
        set -e
        __parse_time__=$1
        if [[ "${__parse_time__}" == *:*:* ]]; then
            __parse_time_seconds__=$(echo ${__parse_time__} | awk -F: '{print 3600*$1 + 60*$2 + $3}')
        elif [[ "${__parse_time__}" == *:* ]]; then
            __parse_time_seconds__=$(echo ${__parse_time__} | awk -F: '{print 60*$1 + $2}')
        else
            __parse_time_seconds__=${__parse_time__}
        fi
        unset __parse_time__

        echo ${__parse_time_seconds__}
        unset __parse_time_seconds__
    }

    max_seconds=$(parse_time ${UnitTest_maximum_execution_time})

    if (( $(echo "${RUNTIME} > ${max_seconds}" | bc -l) )); then
        max_seconds=$(printf "%.2f" ${max_seconds})
        ${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info -m "The runtime was ${RUNTIME} seconds which is greater than the maximum allowed ${max_seconds}"
        if [ "${UnitTest_abort_when_over_maximum_exection_time}" = abort ]; then
            exit 1
        fi
    else
        ${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s infox -m "The runtime was ${RUNTIME} seconds."
    fi
fi ## Fin du 'if [ -n "${UnitTest_maximum_execution_time}" ]'

if [ "${UnitTest_run_relaunch}" = run ]; then
    SEQ_XFER=stop
    maestro -s submit -n ${SEQ_NODE} -d ${SEQ_DATE} -f stop
elif [ "${UnitTest_run_relaunch}" != check -a "${UnitTest_run_relaunch}" != no ]; then
    echo "The variable 'UnitTest_run_relaunch' can only be equal to 'run', 'check' or 'no' and not '${UnitTest_run_relaunch}'."
    exit 1
fi ## Fin du 'if [ "${UnitTest_run_relaunch}" = run ]'
