#!/bin/ksh

updated_results=$(${TASK_BIN}/readlink ${TASK_OUTPUT}/updated_results)
does_dir_exist=false
if [[ "${updated_results}" = /* ]]; then
    if [ -d "${updated_results}" ]; then
        does_dir_exist=true
    fi
elif [ "${updated_results%%:*}" = "${TRUE_HOST}" ]; then
    if [ -d "${updated_results##*:}" ]; then
        does_dir_exist=true
    else
        updated_results=${updated_results##*:}
    fi
else
    ssh ${updated_results%%:*} "test ! -d ${updated_results##*:}" || does_dir_exist=true
fi
if [ "${does_dir_exist}" = true ]; then
    echo "The directory '${updated_results}' already exists!"
    exit 1
fi

if [[ "${updated_results}" = /* ]]; then
    mkdir -p ${updated_results}
else
    ssh ${updated_results%%:*} "mkdir -p ${updated_results##*:}"
fi

reference_results=$(${TASK_BIN}/readlink ${TASK_INPUT}/results)
if [[ "${reference_results}" = /* ]]; then
    list_of_reference_inputs=$(ls -1 ${reference_results}/inputs*.ca)
    list_of_reference_results=$(ls -1 ${reference_results}/results*.ca)
elif [ "${reference_results%%:*}" = "${TRUE_HOST}" ]; then
    reference_results=${reference_results##*:}
    list_of_reference_inputs=$(ls -1 ${reference_results}/inputs*.ca)
    list_of_reference_results=$(ls -1 ${reference_results}/results*.ca)
else
    list_of_reference_inputs=$(ssh ${reference_results%%:*} "ls -1 ${reference_results##*:}/inputs*.ca")
    list_of_reference_results=$(ssh ${reference_results%%:*} "ls -1 ${reference_results##*:}/results*.ca")
fi

## link inputs from previous reference:
id=${reference_results##*/}
for file in ${list_of_reference_inputs}; do
    bfile=${file##*/}
    ofile=${updated_results}/${bfile}
    does_file_exist=false
    if [[ "${updated_results}" = /* ]]; then
        if [ -f "${ofile}" ]; then
            does_file_exist=true
        fi
    else
        ssh ${ofile%%:*} "test ! -d ${ofile##*:}" || does_file_exist=true
    fi
    if [ "${does_file_exist}" = true ]; then
        echo "The input file '${ofile}' already exist!"
        exit 1
    fi
    if [ -n "${UnitTest_reference_update}" ]; then
        if [[ "${updated_results}" = /* ]]; then
            ln -sv ${file} ${ofile}
        else
            ssh ${ofile%%:*} "ln -sv ${file##*:} ${ofile##*:}"
        fi
    else
        if [[ "${updated_results}" = /* ]]; then
            ln -sv ../${id}/${bfile} ${ofile}
        else
            ssh ${ofile%%:*} "ln -sv ../${id}/${bfile} ${ofile##*:}"
        fi
    fi
done

mkdir live_results
cd live_results
for file in $(cd ${TASK_INPUT}/live_results; find . -type f); do
    if [[ "${file}" = */* ]]; then
        dfile=${file%/*}
        [ ! -d "${dfile}" ] && mkdir -p ${dfile}
    fi
    ln -s ${TASK_INPUT}/live_results/${file} ${file}
done

if [[ "${reference_results}" = /* ]]; then
    list_of_reference_results=$(ls -1 ${reference_results}/results*.ca)
else
    list_of_reference_results=$(ssh ${reference_results%%:*} "ls -1 ${reference_results##*:}/results*.ca")
fi

for result in ${list_of_reference_results}; do
    bresult=../${result##*/}
    if [ -f "${bresult}" ]; then
        echo "The file '${bresult}' already exists!"
        exit 1
    fi
    if [[ "${reference_results}" = /* ]]; then
        list_of_reference_files=$(${TASK_BIN}/cmcarc -f ${result} -t)
    else
        list_of_reference_files=$(ssh ${reference_results%%:*} "${TASK_BIN}/cmcarc -f ${result} -t")
    fi
    for file in $(${TASK_BIN}/cmcarc -f ${result} -t); do
        if [ -L ${file} ]; then
            ${TASK_BIN}/cmcarc -f ${bresult} --dereference -v -a ${file}
            rm ${file}
        else
            echo "The file is not in the 'live_results'"
            exit 1
        fi
    done
done

# Remove useless data
for dir in $(ls -d */) ; do
    rmdir $dir
done
for nonTrackFile in $UnitTest_check_results_ignore ; do
    rm -f $nonTrackFile
done

# Check if we have something left
if [ -n "$(find . -type l)" ]; then
    echo "Not all files have been archived!"
    echo "Here are the files left in the working directory."
    ls -l
    exit 1
fi

cd ..

## collect the listings
tasks=$(${SEQ_BIN}/nodeinfo -n ${SEQ_NODE} | awk -F= '/^node\.sibling=/ {print $2}' | grep -v clean)
for task in ${tasks}; do
    nodename=${SEQ_CONTAINER}/${task}
    filename=$(echo ${nodename} | cut -c2- | sed 's!/!\.!g')
    ${TASK_BIN}/nodelister -n ${nodename} -d ${ExpDate} > ${filename}
    ${TASK_BIN}/cmcarc -f listings.ca -a ${filename}
    rm ${filename}
done

for file in results*.ca listings.ca; do
    ofile=${updated_results}/${file}
    if [[ "${updated_results}" = /* ]]; then
        if [ -f "${ofile}" ]; then
            echo "The file '${ofile}' already exists!"
            exit 1
        fi
        cp ${file} ${ofile}
        chmod -wx ${ofile}
    else
        does_file_exist=false
        ssh ${ofile%%:*} "test ! -d ${ofile##*:}" || does_file_exist=true
        if [ "${does_file_exist}" = true ]; then
            echo "The file '${ofile}' already exists!"
            exit 1
        fi
        ${TASK_BIN}/sscp ${file} ${ofile}
        ssh ${ofile%%:*} "chmod -wx ${ofile##*:}"
    fi
done

$SEQ_BIN/nodelogger -n $SEQ_NODE -s info -m "You can update the configuration file '${UNITTEST_PGM_CFG}' with:"
$SEQ_BIN/nodelogger -n $SEQ_NODE -s info -m "    UnitTest_reference=${updated_results}"
