#!/bin/ksh
#.*****************************************************************************
#.
#.     JOB NAME - getStats
#.
#.     STATUS - OPERATIONAL - ESSENTIAL
#.
#.     DESCRIPTION - This task gets all the constant files needed by the module:
#.                        statbg: NMC background correlation error statitics
#.                        obscov: observation error statitics
#.                        statsat: directory containing statistics for satellites observations
#.                        coefsat: RTTOV coefficients for every instruments
#.
#.*****************************************************************************

if [ ! -L ${TASK_INPUT}/bgcov ]; then
    ## check if local
    if [[ "${ENVAR_statsbg}" = /* ]]; then
	local=yes
    elif [ -n "${ENVAR_statsbg%%:*}" -a "${ENVAR_statsbg%%:*}" = "${ENVAR_statsbg}" ]; then
	local=yes
    else ## Si ${destination} ne commence pas par '/' et ne contient pas pas de ':' alors
	local=no
    fi

    mm=$(echo ${ENVAR_DATE} | cut -c5,6)
    if [ "${local}" = yes ]; then
	if [ -d "${ENVAR_statsbg}" ]; then
            envar_cp_command ${ENVAR_statsbg}/${mm} ${TASK_OUTPUT}/bgcov
	elif [ -f "${ENVAR_statsbg}" ]; then
            envar_cp_command ${ENVAR_statsbg} ${TASK_OUTPUT}/bgcov
	elif [ -d "${OAVAR_DATA}/stats/auto/${ENVAR_statsbg}" ]; then
            envar_cp_command ${OAVAR_DATA}/stats/auto/${ENVAR_statsbg}/${mm} ${TASK_OUTPUT}/bgcov
	else
            echo "${ENVAR_statsbg} is not available!!"
	    exit 1
	fi
    else
	ssh ${ENVAR_statsbg%%:*} test -d ${ENVAR_statsbg%%:*} || is_directory=yes
	if [ "${is_directory}" = yes ]; then
	    ${TASK_BIN}/remote_copy ${ENVAR_statsbg}/${mm} ${TASK_OUTPUT}/bgcov
	else
	    ssh ${ENVAR_statsbg%%:*} test -f ${ENVAR_statsbg%%:*} || is_file=yes
	    if [ "${is_file}" = yes ]; then
		${TASK_BIN}/remote_copy ${ENVAR_statsbg} ${TASK_OUTPUT}/bgcov
	    else
		echo "${ENVAR_statsbg} is not available!!"
		exit 1
	    fi
	fi
    fi
fi

if [ ! -L ${TASK_INPUT}/obscov ]; then
    ## check if local
    if [[ "${ENVAR_obscov}" = /* ]]; then
	local=yes
    elif [ -n "${ENVAR_obscov%%:*}" -a "${ENVAR_obscov%%:*}" = "${ENVAR_obscov}" ]; then
	local=yes
    else ## Si ${destination} ne commence pas par '/' et ne contient pas pas de ':' alors
	local=no
    fi

    if [ "${local}" = yes ]; then
	if [ -d "${ENVAR_obscov}" ]; then
	    for file in ${ENVAR_obscov}/*; do
		envar_cp_command ${ENVAR_obscov}/* ${TASK_OUTPUT}
	    done
	elif [ -f "${ENVAR_obscov}" ]; then
            envar_cp_command ${ENVAR_obscov} ${TASK_OUTPUT}/obscov
	elif [ -d "${OAVAR_DATA}/stats/auto/${ENVAR_obscov}" ]; then
            envar_cp_command ${OAVAR_DATA}/stats/auto/${ENVAR_obscov} ${TASK_OUTPUT}/obscov
	elif [ -f "${OAVAR_DATA}/stats/auto/${ENVAR_obscov}" ]; then
            envar_cp_command ${OAVAR_DATA}/stats/auto/${ENVAR_obscov} ${TASK_OUTPUT}/obscov
	else
            echo "${ENVAR_obscov} is not available!!"
	    exit 1
	fi
    else
	ssh ${ENVAR_obscov%%:*} test -d ${ENVAR_obscov%%:*} || is_directory=yes
	if [ "${is_directory}" = yes ]; then
	    ${TASK_BIN}/remote_copy -r ${ENVAR_obscov} ${TASK_OUTPUT}
	else
	    ssh ${ENVAR_obscov%%:*} test -f ${ENVAR_obscov%%:*} || is_file=yes
	    if [ "${is_file}" = yes ]; then
		${TASK_BIN}/remote_copy ${ENVAR_obscov} ${TASK_OUTPUT}/obscov
	    else
		echo "${ENVAR_obscov} is not available!!"
		exit 1
	    fi
	fi
    fi
fi

for file in ${TASK_INPUT}/*; do
    $SEQ_BIN/nodelogger -n $SEQ_NODE -s infox -m  "Get $(basename $file) from $(${TASK_BIN}/readlink $file)"
    if [ "$(basename ${file})" = bgcov ]; then
	bgcov=$(${TASK_BIN}/readlink ${file})
	if [[ "${bgcov}" = /* ]]; then
	    local=yes
	elif [ -n "${bgcov%%:*}" -a "${bgcov%%:*}" = "${bgcov}" ]; then
	    local=yes
	else ## Si ${destination} ne commence pas par '/' et ne contient pas pas de ':' alors
	    local=no
	fi

	mm=$(echo ${ENVAR_DATE} | cut -c5,6)
	if [ "${local}" = yes ]; then
	    if [ -d "${bgcov}" ]; then
		envar_cp_command ${bgcov}/${mm} ${TASK_OUTPUT}/bgcov
	    elif [ -f "${bgcov}" ]; then
		envar_cp_command ${bgcov} ${TASK_OUTPUT}/bgcov
	    elif [ -d "${OAVAR_DATA}/stats/auto/${bgcov}" ]; then
		envar_cp_command ${OAVAR_DATA}/stats/auto/${bgcov}/${mm} ${TASK_OUTPUT}/bgcov
	    else
		echo "${bgcov} is not available!!"
		exit 1
	    fi
	else
	    ssh ${bgcov%%:*} test -d ${bgcov%%:*} || is_directory=yes
	    if [ "${is_directory}" = yes ]; then
		${TASK_BIN}/remote_copy ${bgcov}/${mm} ${TASK_OUTPUT}/bgcov
	    else
		ssh ${bgcov%%:*} test -f ${bgcov%%:*} || is_file=yes
		if [ "${is_file}" = yes ]; then
		    ${TASK_BIN}/remote_copy ${bgcov} ${TASK_OUTPUT}/bgcov
		else
		    echo "${bgcov} is not available!!"
		    exit 1
		fi
	    fi
	fi
    else
	if [ -f "$(${TASK_BIN}/readlink $file)" ]; then
	    envar_cp_command $(${TASK_BIN}/readlink $file) $(basename ${file})
	elif [ -d "$(${TASK_BIN}/readlink $file)" ]; then
	    mkdir $(basename ${file})
	    for thisfile in $(${TASK_BIN}/readlink $file)/*; do
		envar_cp_command ${thisfile} $(basename ${file})
	    done
	else
	    ${TASK_BIN}/remote_copy -r $(${TASK_BIN}/readlink $file) ${TRUE_HOST}:${PWD}/$(basename ${file})
	fi
    fi
done

$SEQ_BIN/nodelogger -n $SEQ_NODE -s infox -m  "Put all files downloaded into ${TASK_OUTPUT}"
mv * ${TASK_OUTPUT}

## On va chercher la machine de la tache 'VAR'
##     getVARresources_host
getVARresources host

if [ "${getVARresources_host}" != "${TRUE_HOST}" ]; then
    prepare_destination_directory

    $SEQ_BIN/nodelogger -n $SEQ_NODE -s infox -m  "Transfer ${TASK_OUTPUT} into ${getVARresources_host}:${output}"

    check_do_ssh_as_remote_copy
    if [ "${do_ssh_as_remote_copy}" = yes ]; then
	time ssh ${getVARresources_host} cp -r ${TASK_OUTPUT}/* ${output##*:}
    else
	${TASK_BIN}/remote_copy -r ${TASK_OUTPUT}/* ${output}
    fi
fi

AAI_host=$(${SEQ_BIN}/nodeinfo -n ${SEQ_CONTAINER}/AddAnalInc -f res | grep node\.machine | cut -d'=' -f2)
if [ "${AAI_host}" != "${TRUE_HOST}" ]; then
    file=${TASK_OUTPUT}/coefsat/${ENVAR_addanalinc_limits##*/}

    prepare_destination_directory ${AAI_host}
    output=${output##*:}/coefsat
    if [ "${AAI_host}" = eccc-ppp1 -a "${TRUE_HOST}" = hare ]; then
	mkdir ${output}
	cp ${file} ${output}
    elif [ "${AAI_host}" = eccc-ppp2 -a "${TRUE_HOST}" = brooks ]; then
	mkdir ${output}
	cp ${file} ${output}
    elif [ "${AAI_host}" = hare -a "${TRUE_HOST}" = eccc-ppp1 ]; then
	ssh ${AAI_host} mkdir ${output}
	ssh ${AAI_host} cp ${file} ${output}
    elif [ "${AAI_host}" = brooks -a "${TRUE_HOST}" = eccc-ppp2 ]; then
	ssh ${AAI_host} mkdir ${output}
	ssh ${AAI_host} cp ${file} ${output}
    else
	ssh ${AAI_host} mkdir ${output}
	${TASK_BIN}/remote_copy ${file} ${AAI_host}:${output}
    fi
fi
