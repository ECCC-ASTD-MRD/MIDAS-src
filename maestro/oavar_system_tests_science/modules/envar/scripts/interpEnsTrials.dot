#!/bin/ksh

INTERPENSTRIALS_OUTPUT=${1}
INTERPENSTRIALS_OUTPUT_LOCAL=${2:-yes}

if [ ! -L ${TASK_BIN}/interp_ens ]; then
    typeset -Z${ENVAR_enstrials_extension_length} first_member=1
    if [ -f ${TASK_INPUT}/enstrials/${__ENVAR_DATE_m6}_006_${first_member} ]; then
	${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s infox -m  "Aucune interpolation demandee alors on copie les fichier de getEnsTrials/output vers interpEnsTrials/output"
	if [ "${INTERPENSTRIALS_OUTPUT_LOCAL}" = yes ]; then
	    mv $(${TASK_BIN}/readlink ${TASK_INPUT}/enstrials)/${__ENVAR_DATE_m6}_* ${INTERPENSTRIALS_OUTPUT}
	else
	    SECONDS=0
	    check_do_ssh_as_remote_copy

	    filelist2xf=$(/bin/ls -1 $(${TASK_BIN}/readlink ${TASK_INPUT}/enstrials)/${__ENVAR_DATE_m6}_*)
	    #echo ${filelist2xf} | sed 's/ /\n/g' | xargs -L30 -I{} ${TASK_BIN}/remote_copy \{\} ${INTERPENSTRIALS_OUTPUT}
	    #${TASK_BIN}/remote_copy $(${TASK_BIN}/readlink ${TASK_INPUT}/enstrials)/${__ENVAR_DATE_m6}_* ${INTERPENSTRIALS_OUTPUT}
	    echo ${filelist2xf} | sed 's/ /\n/g' | xargs -L30 echo > filelist2xf
	    while read -u3 list; do
		if [ "${do_ssh_as_remote_copy}" = yes ]; then
		    ssh ${getVARresources_host} cp ${list} ${INTERPENSTRIALS_OUTPUT##*:}
		else
		    ${TASK_BIN}/remote_copy ${list} ${INTERPENSTRIALS_OUTPUT}
		fi
	    done 3< filelist2xf
	    echo La copie a pris ${SECONDS} secondes
	fi
    fi
else

    if [ ! -f ${TASK_INPUT}/enstrials/${__ENVAR_DATE_m6}_* ]; then
	${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info -m  "Aucun fichier a interpoler: on fera alors un 3D-Var"
    else

	if [ ! -f "${ENVAR_namelist}" ]; then
	    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info -m  "Le namelist n'est pas disponible a l'aide de la variable '\${ENVAR_namelist}'"
	    exit 1
	fi
	NUMBER_OF_MEMBERS=$(grep 'NENS *=' ${ENVAR_namelist} | cut -d= -f2)
	if [ "${NUMBER_OF_MEMBERS}" -lt 1 ]; then
	    $SEQ_BIN/nodelogger -n $SEQ_NODE -s info -m  "On ne peut determiner le nombre de membres a partir du namelist ${ENVAR_namelist}"
	    exit 1
	fi

	if [[ "${ENVAR_ens_subdomains}" = 'yes' ]]; then
	    topo=$(${SEQ_BIN}/nodeinfo -n ${SEQ_CONTAINER}/VAR -f res | grep node\.cpu | cut -d'=' -f2)
	    buf=`echo ${topo} | sed 's/x/ /g'`
	    if [[ "${topo}" = *x*x* ]]; then
		nblocx=`echo $buf | awk '{print $1}'`
		nblocy=`echo $buf | awk '{print $2}'`
	    elif [[ "${topo}" = *x* ]]; then
		nblocx=1
		nblocy=`echo $buf | awk '{print $1}'`
	    else
		echo "Cannot determine the split array from cpu info from task ${SEQ_CONTAINER}/VAR (topo=${topo})"
		exit 1
	    fi
	fi
	${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s infox -m  "On interpole avec le script $(${TASK_BIN}/readlink ${TASK_BIN}/interp_ens)"
	if [[ -L ${TASK_BIN}/write_subdomains ]]; then
	    export INTERPENSTRIALS_WRITE_SUBDOMAINS_PROGRAM=${TASK_BIN}/write_subdomains
	fi
	export SCRIPTS_DEPOT=$(dirname $(true_path ${TASK_BIN}/interp_ens))
	export INTERPENSTRIALS_MPIRUN=${TASK_BIN}/oavar.mpirun
	if [ -n "${INTERPENSTRIALS_DO_INTERPOLATION}" ]; then
	    export INTERPENSTRIALS_DO_INTERPOLATION
	fi

	## this variable controls if we do a 'reflex -stats' on each file
	export INTERPENSTRIALS_enstrials_check_reflex=${ENVAR_enstrials_check}

	vertical_prototype=$(${TASK_BIN}/readlink ${TASK_INPUT}/vertical_prototype)
	if [[ "${vertical_prototype}" = /* ]]; then
	    local=yes
	elif [ -z "${vertical_prototype%%:*}" ]; then
	    local=yes
	else ## Si ${vertical_prototype} ne commence pas par '/' et ne contient pas de ':' alors
	    local=no
	fi

	if [ "${local}" = "no" ]; then
	    ${TASK_BIN}/remote_copy ${vertical_prototype} vertical_prototype
	else
	    ln -s ${vertical_prototype} vertical_prototype
	fi

	abort_interp_ens=0
	${TASK_BIN}/interp_ens $(${TASK_BIN}/readlink ${TASK_INPUT}/enstrials) ${PWD}/interp ${__ENVAR_DATE_m6}_ ${nblocx:-1} ${nblocy:-1} ${PWD}/vertical_prototype "${ENVAR_mpi_ssm}" ${ENVAR_OMP_STACKSIZE} || abort_interp_ens=1

	$SEQ_BIN/nodelogger -n $SEQ_NODE -s infox -m  "Put Ensemble trials in ${INTERPENSTRIALS_OUTPUT}"

	typeset -Z${ENVAR_enstrials_extension_length} number
	number=1
	if [[ "${ENVAR_ens_subdomains}" = 'yes' ]]; then
	    typeset -Z4 ilonband=1
	    while [[ "${ilonband}" -le "${nblocx}" ]]; do
		typeset -Z4 jlatband=1
		while [[ "${jlatband}" -le "${nblocy}" ]]; do
		    if [ "${INTERPENSTRIALS_OUTPUT_LOCAL}" = yes ]; then
			if [[ ! -d ${INTERPENSTRIALS_OUTPUT}/subdomain_${ilonband}_${jlatband} ]]; then
			    mkdir -p ${INTERPENSTRIALS_OUTPUT}/subdomain_${ilonband}_${jlatband}
			fi
		    else
			ssh ${INTERPENSTRIALS_OUTPUT%%:*} mkdir -p ${INTERPENSTRIALS_OUTPUT%%*:}/subdomain_${ilonband}_${jlatband}
		    fi
		    let jlatband=jlatband+1
		done
		let ilonband=ilonband+1
	    done

	    cat > check_interpolated_files <<EOF
#!/bin/ksh93

set -e

typeset -Z${ENVAR_enstrials_extension_length} number
let number=MP_CHILD+base

typeset -Z4 ilonband=1
while [[ "\${ilonband}" -le "${nblocx}" ]]; do
    typeset -Z4 jlatband=1
    while [[ "\${jlatband}" -le "${nblocy}" ]]; do
	if [ -f interp/subdomain_\${ilonband}_\${jlatband}/${__ENVAR_DATE_m6}_006_\${number} ]; then
	    if [ "${INTERPENSTRIALS_OUTPUT_LOCAL}" = yes ]; then
  	        mv interp/subdomain_\${ilonband}_\${jlatband}/${__ENVAR_DATE_m6}_006_\${number} ${INTERPENSTRIALS_OUTPUT}/subdomain_\${ilonband}_\${jlatband}
            else
                ${TASK_BIN}/remote_copy interp/subdomain_\${ilonband}_\${jlatband}/${__ENVAR_DATE_m6}_006_\${number} ${INTERPENSTRIALS_OUTPUT}
            fi
	else
	    echo "Le membre \${number} pour le sous-domaine \${ilonband}x\${jlatband} n'existe pas"
	    touch MEMBER_MISSING.\${number}
	fi
	let jlatband=jlatband+1
    done

    let ilonband=ilonband+1
done

if [ -f MEMBER_MISSING.\${number} ]; then
    exit 1
fi

EOF
	    chmod +x check_interpolated_files

	    let num_procs=${SEQ_NPEX:-1}*${SEQ_NPEY:-1}
	    echo num_procs=${num_procs}

	    export base=1
	    while [ "${base}" -le "${NUMBER_OF_MEMBERS}" ]; do
		${TASK_BIN}/oavar.mpirun "Check if all members have been interpolated" "${ENVAR_mpi_ssm}" ${ENVAR_OMP_STACKSIZE} \
		    ${TASK_BIN}/r.run_in_parallel -pgm ./check_interpolated_files -nompi pseudo_mpi -npex ${num_procs} -tmpdir ${PWD}/check_mpi_tmpdir || MEMBER_MISSING=yes
		let base=base+num_procs
	    done
	else
	    filelist2xf=
	    while [ "${number}" -le "${NUMBER_OF_MEMBERS}" ]; do
		file=interp/${__ENVAR_DATE_m6}_006_${number}
		if [ -f "${file}" ]; then
		    if [ -z "${filelist2xf}" ]; then
			filelist2xf=${file}
		    else
			filelist2xf="${filelist2xf} ${file}"
		    fi
		else
		    ${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info -m  "Le membre ${number} n'existe pas"
		    MEMBER_MISSING="yes"
		fi
		let number=number+1
	    done
	fi

	if [ "${MEMBER_MISSING}" = yes ]; then
	    ${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info -m  "Au moins un des membres est absent!"
	fi

	if [ "${abort_interp_ens}" -ne 0 ]; then
	    ${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info -m  "The script $(basename $(true_path ${TASK_BIN}/interp_ens)) aborted"
	    if [ "${ENVAR_fallback_mode}" = 'abort' ]; then
		${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info -m  "Since ENVAR_fallback_mode=${ENVAR_fallback_mode}, then abort!!!"
		if [ "${USER}" = afsiops -o "${USER}" = afsipar ]; then
		    ${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info -m  "A&P: CALL CMOIS"
		fi
		${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info -m  "If you want to continue by ignoring those missing ensemble members, put 'ENVAR_fallback_mode=continue' in ${ENVAR_CFG} and launch '${SEQ_CONTAINER}/Manip' by ignoring dependencies as indicated in the web page 'https://wiki.cmc.ec.gc.ca/wiki/ARMA/envar/contingency'"
		exit 1
	    elif [ "${ENVAR_fallback_mode}" = 'continue' ]; then
		${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info -m  "Since ENVAR_fallback_mode=${ENVAR_fallback_mode}, then continue"
	    else
		echo "The variable 'ENVAR_fallback_mode' can only be 'abort' or 'continue' and not '${ENVAR_fallback_mode}'"
		exit 1
	    fi
	fi

	if [ "${INTERPENSTRIALS_OUTPUT_LOCAL}" = yes ]; then
	    mv ${filelist2xf} ${INTERPENSTRIALS_OUTPUT}
	else

	    check_do_ssh_as_remote_copy

	    if [ "${ENVAR_enstrials_transfer_with_mpi}" = yes ]; then
		cat > transferEnsTrials <<EOF
#!/bin/ksh93

set -ex

typeset -Z${ENVAR_enstrials_extension_length} number
let number=MP_CHILD+base

if [ -f interp/${__ENVAR_DATE_m6}_006_\${number} ]; then
    touch abort.transfer.\${number}
    if [ "${do_ssh_as_remote_copy}" = yes ]; then
        ssh ${getVARresources_host} cp \${PWD}/interp/${__ENVAR_DATE_m6}_006_\${number} ${INTERPENSTRIALS_OUTPUT##*:}
    else
        ${TASK_BIN}/remote_copy interp/${__ENVAR_DATE_m6}_006_\${number} ${INTERPENSTRIALS_OUTPUT} && rm abort.transfer.\${number}
    fi
fi

EOF
		chmod +x transferEnsTrials

		let num_procs=${SEQ_NPEX:-1}*${SEQ_NPEY:-1}
		echo num_procs=${num_procs}

		export base=1
		while [ "${base}" -le "${NUMBER_OF_MEMBERS}" ]; do
		    ${TASK_BIN}/oavar.mpirun "Transfer interpolated ensemble trials" "${ENVAR_mpi_ssm}" ${ENVAR_OMP_STACKSIZE} \
			${TASK_BIN}/r.run_in_parallel -pgm ./transferEnsTrials -nompi pseudo_mpi -tmpdir ${PWD}/transfer_mpi_tmpdir -npex ${num_procs}
		    let base=base+num_procs
		done

		typeset -Z${ENVAR_enstrials_extension_length} number=1
		did_transfer_aborted=0
		while [ "${number}" -le "${NUMBER_OF_MEMBERS}" ]; do
		    if [ -f abort.transfer.${number} ]; then
			did_transfer_aborted=1
			${SEQ_BIN}/nodelogger -n ${SEQ_NODE} -s info -m  "Could not transfer ensemble member ${number}!"
		    fi
		    let number=number+1
		done

		if [ "${did_transfer_aborted}" -ne 0 ]; then
		    if [ "${ENVAR_fallback_mode}" = 'abort' ]; then
			exit 1
		    elif [ "${ENVAR_fallback_mode}" != 'continue' ]; then
			echo "The variable 'ENVAR_fallback_mode' can only be 'abort' or 'continue' and not '${ENVAR_fallback_mode}'"
			exit 1
		    fi
		fi
		## Fin du 'if [ "${ENVAR_enstrials_transfer_with_mpi}" = yes ]'
	    else
		## On doit remplacer les espaces (' ') par des nouvelles lignes '\n' pour que l'on puisse transferer 30 fichiers a la fois.
		echo ${filelist2xf} | sed 's/ /\n/g' | xargs -I{} echo $PWD/\{\} | xargs -L30 echo > filelist2xf
		while read -u3 list; do
		    if [ "${do_ssh_as_remote_copy}" = yes ]; then
			ssh ${getVARresources_host} cp ${list} ${INTERPENSTRIALS_OUTPUT##*:}
		    else
			${TASK_BIN}/remote_copy ${list} ${INTERPENSTRIALS_OUTPUT}
		    fi
		done 3< filelist2xf
		rm ${filelist2xf}
	    fi
	fi  ## Fin du 'else' relie au 'if [ "${INTERPENSTRIALS_OUTPUT_LOCAL}" = yes ]'

	if [ "${ENVAR_enstrials_erase_noninterpolated}" = yes ]; then
	    rm -f ${TASK_INPUT}/enstrials/${__ENVAR_DATE_m6}_006_*
	fi

    fi ## fin du 'else' relie au 'if [ ! -f ${TASK_INPUT}/enstrials/${__ENVAR_DATE_m6}_* ]'

fi ## fin du 'else' relie au 'if [ ! -L ${TASK_BIN}/interp_ens ]'
