      SUBROUTINE BGCGPSRO(lcolumnhr,lobsSpaceData)
!*
!***s/r  BGCGPSRO - Set backcground check flags to the GPSRO observations
!*
!*Author  : P. KOCLAS. Mar 2008
!*    -------------------
!**    Purpose:
!*   calculate (o-p)/p for all ro profiles and set background check flag on if
!*                     ABS(O-P)/P is too large
!*
      use EarthConstants_mod
      use MathPhysConstants_mod
      use modgps04profile
      use modgps05refstruct
      use modgps06gravity
      use modgps07geostruct
      use modgps08refop
      use columnData_mod
      use obsSpaceData_mod
      use verticalCoord_mod
      IMPLICIT NONE
#include "pardim.cdk"
#include "comct0.cdk"
#include "comgpsro.cdk"
      type(struct_columnData) :: lcolumnhr
      type(struct_obs) :: lobsSpaceData
      type(struct_vco), pointer :: vco_trl
      REAL*8 ZLAT, Lat
      REAL*8 ZLON, Lon
      REAL*8 ZETA(JPNFLEV)
      REAL*8 ZPP (JPNFLEV),ZDP (JPNFLEV)
      REAL*8 ZTT (JPNFLEV)
      REAL*8 ZHU (JPNFLEV)
      REAL*8 ZGZ (JPNFLEV)
      REAL*8 ZP0
      REAL*8 ZPT, ZPR, ZCF
      REAL*8 ZMT
      REAL*8 DH
      REAL*8 BIAS
      REAL*8 HNH1, HSF, HTP

      REAL*8 ZOBS, ZMHX

      INTEGER INDEX_HEADER, JD
      INTEGER IDATYP
      INTEGER IDATA   , IDATEND, INDEX_BODY
      INTEGER JL, JH,  NGPSLEV
      INTEGER NH, NH1

      LOGICAL  ASSIM, LSTAG

      INTEGER NH
      TYPE(GPSPROFILE)           :: PRF 
      REAL(DP)     , ALLOCATABLE :: H   (:)
      TYPE(GPSDIFF), ALLOCATABLE :: RSTV(:)

      WRITE(*,*)'ENTER BGCSGPSRO'
      WRITE(*,*)'!!!!!!!!! CAUTION !!!!!!!!!!!!'
      WRITE(*,*)'STAGGERING NOT YET IMPLEMENTED IN DERIVATIVES'

      LSTAG = .FALSE.
      vco_trl => col_getVco(lcolumnhr)
      if (vco_trl%iversion .eq. 5002) LSTAG = .TRUE. 
!C
!C     * 1.  Initializations
!C     *     ---------------
!C

!C
!C     *    .   1.1  Eta vector
!C     *    .        ----------
!C
      NGPSLEV=col_getNumLev(lcolumnhr)
      DO JL = 1, col_getNumLev(lcolumnhr)
         ZETA(JL) = vco_trl%dhyb_T(JL)
      ENDDO
!C
!C*    *        1.2 Read the NAMELIST NAMGGPSRO
!C     *       ---------------------------------------
      write(*,*)'NAMGPSRO',SURFMIN,HSFMIN,HTPMAX,BGCKBAND
!C
!C     Loop over all files
!C
      ! loop over all header indices of the 'RO' family
      call obs_set_current_header_list(lobsSpaceData,'RO')
      HEADER: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER
!C     
!C     *        Process only refractivity data (codtyp 169)
!C
               IDATYP = obs_elem_i(lobsSpaceData,'ITY ',INDEX_HEADER)
               IF ( IDATYP .EQ. 169 ) THEN
!C
!C                 Loops over data in the observation
!C
                  IDATA   = obs_elem_i(lobsSpaceData,'RLN ',INDEX_HEADER)
                  IDATEND = obs_elem_i(lobsSpaceData,'NLV ',INDEX_HEADER) + IDATA - 1
                  ASSIM = .FALSE.
!C
!C                 Scan for requested assimilations, and count them
!C
                  NH = 0
                  DO INDEX_BODY= IDATA, IDATEND
                     IF ( obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY).EQ.1 ) THEN
                        ASSIM = .TRUE.
                        NH = NH + 1
                     ENDIF
                  ENDDO
!C
!C     *           If assimilations are requested, apply the observation operator
!C
                  IF (ASSIM) THEN
!C     
!C     *              Profile at the observation location:
!C
                     Lat  = obs_elem_r(lobsSpaceData,'LAT ',INDEX_HEADER)
                     Lon  = obs_elem_r(lobsSpaceData,'LON ',INDEX_HEADER)
                     ZLAT = Lat * MPC_DEGREES_PER_RADIAN_R8
                     ZLON = Lon * MPC_DEGREES_PER_RADIAN_R8
                     ZP0 = col_getElem(lcolumnhr,1,INDEX_HEADER,'P0')
                     DO JL = 1, col_getNumLev(lcolumnhr)
!C
!C     *                 Profile x
!C
                        ZPP(JL) = col_getPressure(lcolumnhr,JL,INDEX_HEADER,'TH')
!CCCCCCCCC THIS IS ONLY A DUMMY IMPLEMENTATION OF ZDP (dP/dP0)
                        ZDP(JL) = ZPP(JL)/ZP0
                        ZTT(JL) = col_getElem(lcolumnhr,JL,INDEX_HEADER,'TT')-273.15
                        ZHU(JL) = col_getElem(lcolumnhr,JL,INDEX_HEADER,'HU')
                        ZGZ(JL) = col_getHeight(lcolumnhr,JL,INDEX_HEADER,'TH')
                     ENDDO
                     ZP0 = col_getElem(lcolumnhr,1,INDEX_HEADER,'P0')
                     ZPT = col_getPressure(lcolumnhr,1,INDEX_HEADER,'TH')
                     ZMT = ZGZ(col_getNumLev(lcolumnhr))/RG
                     ZMT = gpsgeopotential(Lat, ZMT)/RG
                     ZPR = vco_trl%dprf_M
                     ZCF = vco_trl%drcf1
!C     
!C     *              GPS profile structure:
!C
                     IF (LSTAG) THEN
!c     *                 Staggered hybrid trial field 
                        CALL GPSSTRUCT1S(NGPSLEV,ZLAT,ZLON,ZPP,ZDP,ZTT,ZHU,ZMT,PRF)
                     ELSE
!c     *                 ETA or HYBRID NONSTAGGERED trial field 
                        CALL GPSSTRUCT1H(NGPSLEV,ZLAT,ZLON,ZETA,ZTT,ZHU,ZP0,ZMT,ZPT,ZPR,ZCF,PRF)
                     ENDIF
                     CALL GPSGEO(PRF)
!C
!C     *              Prepare the vector of all the observations:
!C
                     ALLOCATE( H    (NH) )
                     ALLOCATE( RSTV (NH) )
                     NH1 = 0
                     DO INDEX_BODY= IDATA, IDATEND
                        IF ( obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY).EQ.1 ) THEN
                           NH1   = NH1 + 1
                           HNH1  = obs_elem_r(lobsSpaceData,'PPP ',INDEX_BODY)
                           H(NH1)= gpsgeopotential(Lat,HNH1)/9.80616
                         ENDIF
                     ENDDO
!C
!C     *              Apply the observation operator:
!C
                     CALL GPSREFOPV (H, PRF, RSTV)
!C
!C     *              Perform the (H(x)-Y)/H operation
!C
                     NH1 = 0
                     DO INDEX_BODY= IDATA, IDATEND
                        IF ( obs_elem_i(lobsSpaceData,'ASS ',INDEX_BODY).EQ.1 ) THEN
                           NH1 = NH1 + 1
!C
!C     *                    Observation operator H(x)
!C
                           ZMHX = RSTV(NH1)%VAR
!C
!C     *                    Observation value    Y
!C
                           ZOBS = obs_elem_r(lobsSpaceData,'VAR ',INDEX_BODY)
!C                           
!C                          OMF Tested criteria:
!C
                           IF (DABS(ZOBS-ZMHX)/ZMHX.GT.BGCKBAND) THEN
                              call obs_set_i(lobsSpaceData,'FLG ',index_body,IBSET(obs_elem_i(lobsSpaceData,'FLG ',index_body),16))
                              call obs_set_i(lobsSpaceData,'FLG ',index_body,IBSET(obs_elem_i(lobsSpaceData,'FLG ',index_body),9))
                              WRITE(*,'(A40,F10.0,3F12.4)')  &
                                  ' REJECT BGCSGPSRO H  O  P (O-P/P) =',H(NH1),ZOBS,ZMHX,(ZOBS-ZMHX)/ZMHX
                           ENDIF
                        ENDIF
                     ENDDO
                     DEALLOCATE( RSTV )
                     DEALLOCATE( H    )
                  ENDIF
               ENDIF

      ENDDO HEADER
      WRITE(*,*)'EXIT BGCSGPSRO'
      RETURN
      END SUBROUTINE BGCGPSRO

