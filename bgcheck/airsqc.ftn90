SUBROUTINE AIRSQC ( airs_end,airs_loop_done, lcolumnhr, lobsSpaceData )
!
!**ID AIRSQC -- QUALITY CONTROL OF AIRS OBSERVATIONS
!
!       SCIENCE:  L. GARAND
!       AUTHOR:   A. BEAULNE (CMDA/SMC) August 2004
!                 A. BEAULNE (CMDA/SMC)   June 2006  (ADAPT TO 3DVAR)
!                 S. MACPHERSON, S.HEILLIETTE (ARMA) February 2013 
!                   -- modify test pour detecter le isatzen manquant ou anormal
!
!       OBJECT: ASSIGN ASSIMILATION FLAGS TO OBSERVATIONS
!
!       ARGUMENTS:
!          INPUT:
!            -AIRS_LOOP_DONE : NUMBER OF PREVIOUS CALLS TO AIRSQC
!
!          OUTPUT:
!            -AIRS_END       : AT THE END OF THIS CALL TO AIRSQC, DO ALL AIRS
!                               PROFILES BEEN TREATED (true) OR NOT (false)
!
  use EarthConstants_mod
  use MathPhysConstants_mod
  use tovs_mod
  use hir_chans
  use multiirbgcheck
  use obsSpaceData_mod
  use columnData_mod
  use verticalCoord_mod
  IMPLICIT NONE
logical,intent(inout) :: airs_end
integer,intent(in) :: airs_loop_done
type(struct_columnData),intent(in) :: lcolumnhr
type(struct_obs),intent(inout) :: lobsSpaceData
!************************************************
  type(struct_vco), pointer :: vco_trl
  INTEGER       :: JC,NCHN,JCH,JF,JL,NLEV,NLEVB,JN,NPRF,INDEX_HEADER,NFLG,ICHN
  INTEGER       :: IWINDO,IWINDO_ALT,KRTID,IPRO,NOBAIRS
  INTEGER       :: INDEX_BODY,IDATA,IDATEND,IDAIRS
  INTEGER       :: IBEGIN,ILAST,IBEGINOB,ILASTOB,IDATYP
  INTEGER       :: DIFFTOP_MIN
  INTEGER       :: count_airs
  REAL(8)       :: T_EFFECTIVE
  integer       :: alloc_status(65)
  integer       :: iextr

  real(8), allocatable :: ZTG(:),ZPS(:),ZTS(:),ZT(:,:),ZHT(:,:),ZLQ(:,:),ZVLEV(:)
  real(8), allocatable :: ZLEVMOD(:,:)
  real(8), allocatable :: BTOBSERR(:),BTOBS(:,:),BTCALC(:,:),RCAL_CLR(:,:),SFCTAU(:,:)
  real(8), allocatable :: ROBS(:,:),RCLD(:,:,:),TRANSM(:,:,:),EMI_SFC(:,:)
  real(8), allocatable :: CLFR(:),TOEXT(:,:),ZHOEXT(:,:),SUNZA(:)
  real,    allocatable :: ALBEDO(:),ICE(:),PCNT_WAT(:),PCNT_REG(:)
  integer, allocatable :: KSURF(:),LTYPE(:)
  integer, allocatable :: CLDFLAG(:),REJFLAG(:,:,:),LEV_START(:)
  integer, allocatable :: GNCLDFLAG(:)
  integer, allocatable :: ICHREF(:)
  integer, allocatable :: NTOP_EQ(:),NTOP_BT(:,:),NTOP_RD(:,:),NTOP_MB(:)
  integer, allocatable :: NTOP_CO2(:,:),NGOOD(:)
  real(8), allocatable :: PTOP_EQ(:),PTOP_BT(:,:),PTOP_RD(:,:),PTOP_MB(:)
  real(8), allocatable :: PTOP_CO2(:,:),FCLOUD_CO2(:,:),HE(:),XPRES(:)
  real(8), allocatable :: ETOP(:),VTOP(:),ECF(:),VCF(:)
  integer, allocatable :: MINP(:,:),FATE(:,:)
  real(8), allocatable :: PMIN(:,:),DTAUDP1(:,:),TAMPON(:),MAXWF(:,:),CFSUB(:)
  logical, allocatable :: ASSIM_ALL(:)
  integer :: cpt
  integer ,SAVE :: IMODTOP
  integer :: co2min(1),co2max(1)
  integer :: isatzen
  integer :: chan_indx,ilist_sun,ilist_co2(nco2),ilist_co2_pair(nco2),ilist_he(nch_he)

  vco_trl => col_getVco(lcolumnhr)

! ** find sensor number corresponding to AIRS

  DO KRTID = 1, NSENSORS
     IF ( PLATFORM(KRTID) .EQ. 9 .AND. &
          SATELLITE(KRTID) .EQ. 2 .AND. &
          INSTRUMENT(KRTID) .EQ. 11 ) THEN
        IDAIRS = KRTID
        EXIT
     END IF
  END DO


! ** find number of AIRS profiles (for memory allocation) and set airs_end
!    M. Buehner: take care of case when bunch*loopdone exactly equals total number of profiles

  NPRF = 0
  count_airs = 0
  airs_end = .true.

  ! loop over all header indices of the 'TO' family
  call obs_set_current_header_list(lobsSpaceData,'TO')
  HEADER: do
     index_header = obs_getHeaderIndex(lobsSpaceData)
     if (index_header < 0) exit HEADER

     IDATYP = obs_headElem_i(lobsSpaceData,OBS_ITY,INDEX_HEADER)
     IF ( tvs_Is_idburp_airs(IDATYP) ) THEN
        count_airs = count_airs + 1
        IF ( count_airs > airs_loop_done * bunch_airs .AND.  &
             count_airs <= (airs_loop_done+1) * bunch_airs ) NPRF = NPRF + 1
        IF ( count_airs > (airs_loop_done+1) * bunch_airs ) airs_end = .false.
     END IF
  END DO HEADER


! ** find number of AIRS channels and RTTOV levels

  NCHN = coefs(idairs)% coef%fmv_chn
  
  NLEV = coefs(idairs)% coef %nlevels
  allocate (xpres(NLEV))
  xpres(1:NLEV)=coefs(idairs)% coef% ref_prfl_p(1:NLEV)
  iextr=0
  if (nlev==44) iextr=1
  if (nlev==51) iextr=2
  if (nlev /= 43 .and. nlev/=44 .and. nlev/= 51) then
     Write(*,*) "Attention: modification necessaire dans AIRSQC"
     call abort3d('airsqc        ')
  endif
 
  NLEVB=NLEV-iextr

  write(*,*) ' AIRSQC - nchn ', nchn

! information to extract (transvidage)
! ------------------------------------
!
! ZTG(NPRF) -- guess skin temperatures (deg K)
! ZPS(NPRF) -- surface pressure (hPa)
! ZT(NLEVTRL,NPRF) -- temperature profiles on NWP model levels (deg K)
! ZHT(NLEVTRL,NPRF) -- height profiles on NWP model levels (m)
! ZPRES(NLEVTRL,NPRF) -- NWP pressure levels 
! ZLQ(NLEVTRL,NPRF) -- surface specific humidity in ln q (kg/kg)
! BTOBSERR(AIRSSNCH) -- observation error standard deviation
! BTOBS(AIRSSNCH,NPRF) -- observed brightness temperatures (deg K)
! BTCALC(AIRSSNCH,NPRF) -- computed brightness temperatures (deg K)
! RCAL_CLR(AIRSSNCH,NPRF) -- computed clear radiances (mw/m2/sr/cm-1)
! SFCTAU(AIRSSNCH,NPRF) -- surface to space transmittances (0-1)
! RCLD(AIRSSNCH,NPRF,NLEV) -- overcast cloudy radiances (mw/m2/sr/cm-1)
! TRANSM(AIRSSNCH,NPRF,NLEV) -- layer to space transmittances (0-1)
! EMI_SFC(AIRSSNCH,NPRF) -- surface emissivities (0-1)
! KSURF(NPRF) -- surface type in obs file (0, 1)
! CLFR(NPRF) -- cloud fraction (%)
! TOEXT(NLEV,NPRF) -- temperature profiles on RT model levels (deg K)
! ZHOEXT(NLEV,NPRF) -- height profiles on RT model levels (m)
! SUNZA(NPRF) -- sun zenith angle (deg)
! ALBEDO(NPRF) -- surface albedo (0-1)
! ICE(NPRF) -- ice fraction (0-1)
! LTYPE(NPRF) -- surface type (1,...,20)
! PCNT_WAT(NPRF) -- water fraction (0-1)
! PCNT_REG(NPRF) -- water fraction in the area (0-1)
! ROBS(AIRSSNCH,NPRF) -- observed radiances (mW/m2/sr/cm-1)


  alloc_status(:) = 0
  allocate ( ZTG(NPRF),                       stat= alloc_status(1) )
  allocate ( ZPS(NPRF),                       stat= alloc_status(2) )
  allocate ( ZT(col_getNumLev(lcolumnhr,'TH'),NPRF),                stat= alloc_status(3) )
  allocate ( ZHT(col_getNumLev(lcolumnhr,'TH'),NPRF),               stat= alloc_status(4) )
  allocate ( ZLQ(col_getNumLev(lcolumnhr,'TH'),NPRF),               stat= alloc_status(5) )
  allocate ( BTOBSERR(hir_get_nchan_selected("AIRS")),              stat= alloc_status(6) )
  allocate ( BTOBS(hir_get_nchan_selected("AIRS"),NPRF),            stat= alloc_status(7) )
  allocate ( BTCALC(hir_get_nchan_selected("AIRS"),NPRF),           stat= alloc_status(8) )
  allocate ( RCAL_CLR(hir_get_nchan_selected("AIRS"),NPRF),         stat= alloc_status(9) )
  allocate ( SFCTAU(hir_get_nchan_selected("AIRS"),NPRF),           stat= alloc_status(10))
  allocate ( RCLD(hir_get_nchan_selected("AIRS"),NPRF,NLEVB),        stat= alloc_status(11))
  allocate ( TRANSM(hir_get_nchan_selected("AIRS"),NPRF,NLEVB),      stat= alloc_status(12))
  allocate ( EMI_SFC(hir_get_nchan_selected("AIRS"),NPRF),          stat= alloc_status(13))
  allocate ( KSURF(NPRF),                     stat= alloc_status(14))
  allocate ( CLFR(NPRF),                      stat= alloc_status(15))
  allocate ( TOEXT(NLEVB,NPRF),                stat= alloc_status(16))
  allocate ( ZHOEXT(NLEVB,NPRF),               stat= alloc_status(17))
  allocate ( SUNZA(NPRF),                     stat= alloc_status(18))
  allocate ( ALBEDO(NPRF),                    stat= alloc_status(19))
  allocate ( ICE(NPRF),                       stat= alloc_status(20))
  allocate ( LTYPE(NPRF),                     stat= alloc_status(21))
  allocate ( PCNT_WAT(NPRF),                  stat= alloc_status(22))
  allocate ( PCNT_REG(NPRF),                  stat= alloc_status(23))
  allocate ( ROBS(hir_get_nchan_selected("AIRS"),NPRF),             stat= alloc_status(24))
  allocate ( ZTS(NPRF),                       stat= alloc_status(26))
  allocate ( CLDFLAG(NPRF),                   stat= alloc_status(27))
  allocate ( REJFLAG(hir_get_nchan_selected("AIRS"),NPRF,0:BITFLAG),stat= alloc_status(28))
  allocate ( LEV_START(NPRF),                 stat= alloc_status(29))
  allocate ( NTOP_EQ(NPRF),                   stat= alloc_status(31))
  allocate ( NTOP_BT(hir_get_nchan_selected("AIRS"),NPRF),          stat= alloc_status(32))
  allocate ( NTOP_RD(hir_get_nchan_selected("AIRS"),NPRF),          stat= alloc_status(33))
  allocate ( NTOP_CO2(NCO2,NPRF),             stat= alloc_status(34))
  allocate ( PTOP_EQ(NPRF),                   stat= alloc_status(35))
  allocate ( PTOP_BT(hir_get_nchan_selected("AIRS"),NPRF),          stat= alloc_status(36))
  allocate ( PTOP_RD(hir_get_nchan_selected("AIRS"),NPRF),          stat= alloc_status(37))
  allocate ( PTOP_CO2(NCO2,NPRF),             stat= alloc_status(38))
  allocate ( FCLOUD_CO2(NCO2,NPRF),           stat= alloc_status(39))
  allocate ( HE(NPRF),                        stat= alloc_status(40))
  allocate ( ETOP(NPRF),                      stat= alloc_status(41))
  allocate ( VTOP(NPRF),                      stat= alloc_status(42))
  allocate ( ECF(NPRF),                       stat= alloc_status(43))
  allocate ( VCF(NPRF),                       stat= alloc_status(44))
  allocate ( NGOOD(NPRF),                     stat= alloc_status(45))
  allocate ( MINP(hir_get_nchan_selected("AIRS"),NPRF),             stat= alloc_status(46))
  allocate ( PMIN(hir_get_nchan_selected("AIRS"),NPRF),             stat= alloc_status(47))
  allocate ( DTAUDP1(hir_get_nchan_selected("AIRS"),NPRF),          stat= alloc_status(48))
  allocate ( TAMPON(NPRF),                    stat= alloc_status(49))
  allocate ( FATE(hir_get_nchan_selected("AIRS"),NPRF),             stat= alloc_status(50))
  allocate ( ICHREF(NPRF),                    stat= alloc_status(51))
  allocate ( ASSIM_ALL(NPRF),                 stat= alloc_status(53))
  allocate ( MAXWF(hir_get_nchan_selected("AIRS"),NPRF),            stat= alloc_status(54))
  allocate ( ZVLEV(NLEVB),                    stat= alloc_status(55))
  allocate ( PTOP_MB(NPRF),                   stat= alloc_status(56))
  allocate ( NTOP_MB(NPRF),                   stat= alloc_status(57))
  allocate ( CFSUB(NPRF),                     stat= alloc_status(58))
  allocate ( GNCLDFLAG(NPRF),                 stat= alloc_status(59))
  allocate ( ZLEVMOD(col_getNumLev(lcolumnhr,'TH'),NPRF),stat= alloc_status(61))

  if( any(alloc_status /= 0) ) then
     write(*,*) ' airsqc : memory allocation error'
     call abort3d('airsqc        ')
  end if

  DO JL = 1, NLEVB
     ZVLEV(JL) = XPRES(JL+iextr)
  END DO

  CO2MIN=minloc( abs( ZVLEV - pco2min ) )
  CO2MAX=minloc( abs( ZVLEV - pco2max ) )

  BTOBS(:,:)    = -1.
  BTCALC(:,:)   = -1.
  RCAL_CLR(:,:) = -1.
  SFCTAU(:,:)   = -1.
  RCLD(:,:,:)   = -1.
  TRANSM(:,:,:) = -1.
  EMI_SFC(:,:)  = -1.

  REJFLAG(:,:,:) = 0

  NOBAIRS = 0
  NOBTOV = 0
  count_airs = 0
      
  ! loop over all header indices of the 'TO' family
  call obs_set_current_header_list(lobsSpaceData,'TO')
  HEADER_2: do
     index_header = obs_getHeaderIndex(lobsSpaceData)
     if (index_header < 0) exit HEADER_2

           IDATYP = obs_headElem_i(lobsSpaceData,OBS_ITY,INDEX_HEADER)

           IF ( tvs_Is_idburp_tovs(IDATYP) ) NOBTOV = NOBTOV + 1

           IF ( tvs_Is_idburp_airs(IDATYP) ) THEN

              count_airs = count_airs + 1

              IF ( count_airs > airs_loop_done * bunch_airs .AND.  &
                   count_airs <= (airs_loop_done+1) * bunch_airs ) THEN

                 NOBAIRS = NOBAIRS + 1

                 ZTG(NOBAIRS) = col_getElem(lcolumnhr,1,INDEX_HEADER,'TG')
                 ZPS(NOBAIRS) = col_getElem(lcolumnhr,1,INDEX_HEADER,'P0') &
                                                             * MPC_MBAR_PER_PA_R8

                 DO JL = 1, col_getNumLev(lcolumnhr,'TH')
                    ZT(JL,NOBAIRS) = col_getElem(lcolumnhr,JL,INDEX_HEADER,'TT')
                    ZHT(JL,NOBAIRS) = col_getHeight(lcolumnhr,JL,INDEX_HEADER,'TH') / RG
                    ZLQ(JL,NOBAIRS) = col_getElem(lcolumnhr,JL,INDEX_HEADER,'HU')
                    ZLEVMOD(JL,NOBAIRS)= col_getPressure(lcolumnhr,JL,INDEX_HEADER,'TH') &
                         * MPC_MBAR_PER_PA_R8
                 END DO

                 IDATA   = obs_headElem_i(lobsSpaceData,OBS_RLN,INDEX_HEADER)
                 IDATEND = obs_headElem_i(lobsSpaceData,OBS_NLV,INDEX_HEADER) + IDATA - 1
                 DO INDEX_BODY= IDATA, IDATEND
                    IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,INDEX_BODY).EQ.1 ) THEN
                       ICHN = NINT(obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY))
                       ICHN = MAX(0,MIN(ICHN,JPCHMAX+1))
                       chan_indx=hir_get_chindx_fr_chn("AIRS",ichn)
                       BTOBSERR(chan_indx) = obs_bodyElem_r(lobsSpaceData,OBS_OER,INDEX_BODY)
                       BTOBS(chan_indx,NOBAIRS) = obs_bodyElem_r(lobsSpaceData,OBS_VAR,INDEX_BODY)
! *** Flag check on observed BTs ***
                       IF (BTEST(obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY),2)) REJFLAG(chan_indx,NOBAIRS,9) = 1
! *** Gross check on observed BTs ***
                       IF (BTOBS(chan_indx,NOBAIRS)<150.) REJFLAG(chan_indx,NOBAIRS,9) = 1
                       IF (BTOBS(chan_indx,NOBAIRS)>350.) REJFLAG(chan_indx,NOBAIRS,9) = 1
                    END IF
                 END DO

                 DO JC = 1, NCHN
                    ICHN = ichan(JC,IDAIRS)
                    chan_indx=hir_get_chindx_fr_chn("AIRS",ichn)
                    BTCALC(chan_indx,NOBAIRS) = radiance_d(nobtov)%bt(jc)
                    RCAL_CLR(chan_indx,NOBAIRS) = radiance_d(nobtov)%clear(jc)
                    SFCTAU(chan_indx,NOBAIRS) = transmission_d(nobtov)%tau_total(jc)
                    DO JL = 1, NLEVB
                       RCLD(chan_indx,NOBAIRS,JL) = radiance_d(nobtov)%overcast(jl+iextr-1,jc)
                       TRANSM(chan_indx,NOBAIRS,JL) = transmission_d(nobtov)%tau_levels(jl+iextr,jc)
                    END DO
                    EMI_SFC(chan_indx,NOBAIRS) = emissivity(JC,NOBTOV)
! *** Gross check on computed BTs ***
                    IF (BTCALC(chan_indx,NOBAIRS)<150.) REJFLAG(chan_indx,NOBAIRS,9) = 1
                    IF (BTCALC(chan_indx,NOBAIRS)>350.) REJFLAG(chan_indx,NOBAIRS,9) = 1
                 END DO

                 KSURF(NOBAIRS) = profiles(nobtov)%skin%surftype
!Test pour detecter le isatzen manquant (-1) ou anormal
! (angle negatif ou superieur a 75 degres )pour AIRS
                 isatzen= obs_headElem_i(lobsSpaceData,OBS_SZA,INDEX_HEADER)
                 if ( isatzen < 9000 .or. &
                      isatzen > 16500 ) then
                    DO JC = 1, NCHN
                       ICHN = ichan(JC,IDAIRS)
                       chan_indx=hir_get_chindx_fr_chn("AIRS",ichn)
                       REJFLAG(chan_indx,NOBAIRS,9) = 1
                    ENDDO
                 endif
!**************************************************************
                 CLFR(NOBAIRS) = obs_headElem_i(lobsSpaceData,OBS_CLF,INDEX_HEADER)

                 DO JL = 1, NLEVB
                    TOEXT(JL,NOBAIRS) = profiles(nobtov)%t(jl+iextr)
                    ZHOEXT(JL,NOBAIRS) = profiles_qc(nobtov)%z(jl+iextr)
                 END DO

                 SUNZA(NOBAIRS) = profiles_qc(nobtov)%sunza
                 ALBEDO(NOBAIRS) = profiles_qc(nobtov)%albedo
                 ICE(NOBAIRS) = profiles_qc(nobtov)%ice
                 LTYPE(NOBAIRS) = profiles_qc(nobtov)%ltype
                 IF(LTYPE(NOBAIRS).EQ.20) KSURF(NOBAIRS)=2
                 PCNT_WAT(NOBAIRS) = profiles_qc(nobtov)%pcnt_wat
                 PCNT_REG(NOBAIRS) = profiles_qc(nobtov)%pcnt_reg

              END IF

           END IF

  END DO HEADER_2


! ** find TOA radiances converted from observed BT's

  ROBS(:,:) = -1.

  profils: DO JN = 1, NPRF
     channels: DO JC = 1, NCHN
        ICHN = ichan(JC,IDAIRS)
        chan_indx=hir_get_chindx_fr_chn("AIRS",ichn)
        IF ( REJFLAG(chan_indx,JN,9) == 1 ) CYCLE channels
        t_effective =  coefs(idairs)%coef%ff_bco(jc) &
             + coefs(idairs)%coef%ff_bcs(jc) * BTOBS(chan_indx,jn)
        ROBS(chan_indx,jn) =  coefs(idairs)%coef%planck1(jc) / &
             ( Exp( coefs(idairs)%coef%planck2(jc)/t_effective ) - 1.0 )
     END DO channels
  END DO profils


! ** set height fields to 'height above ground' fields

  DO JN = 1, NPRF
     DO JL = 1, NLEVB
        ZHOEXT(JL,JN) = ZHOEXT(JL,JN) - ZHT(col_getNumLev(lcolumnhr,'TH'),JN)
     END DO
     DO JL = 1, col_getNumLev(lcolumnhr,'TH')
        ZHT(JL,JN) = ZHT(JL,JN) - ZHT(col_getNumLev(lcolumnhr,'TH'),JN)
     END DO
  END DO


!**********************************************************************************************

!* ///// ---------------------------------------------------- /////
!* ///// DETERMINATION OF THE CLEAR/CLOUDY PROFILES (CLDFLAG) /////
!* ///// ---------------------------------------------------- /////

  CLDFLAG(:) = 0


!* -- REFERENCE FOR WINDOW CHANNEL

  IWINDO     = hir_get_chindx_fr_chn("AIRS",IWINDOW_AIRS)
  IWINDO_ALT = hir_get_chindx_fr_chn("AIRS",IWINDOW_ALT_AIRS)

  ICHREF(:)  = IWINDO
  DO JN = 1, NPRF
     IF ( REJFLAG(IWINDO,JN,9) == 1 ) THEN
        ICHREF(JN) = IWINDO_ALT
        IF ( REJFLAG(IWINDO_ALT,JN,9) == 1 ) THEN
           ICHREF(JN) = -1
           CLDFLAG(JN) = -1
           REJFLAG(:,JN,9) = 1
           write(*,*) 'WARNING'
           write(*,*) 'WINDOW AND ALTERNATE WINDOW CHANNEL OBSERVATIONS'
           write(*,*) 'HAVE BEEN REJECTED.                             '
           write(*,*) 'ALL AIRS OBSERVATIONS FROM THIS PROFILE REJECTED'
        END IF
     END IF
  END DO


!* -- CLOUD TOP BASED ON MATCHING OBSERVED BRIGHTNESS TEMPERATURE
!* -- AT A REFERENCE SURFACE CHANNEL WITH BACKGROUND TEMPERATURE PROFILE (PTOP_EQ)
!* -- ON GUESS VERTICAL LEVELS.

  LEV_START(:) = 0

!iopt2=1 : calcul de la hauteur en hPa PTOP_MB et du NTOP_MB correspondant
  CALL CLOUD_HEIGHT (PTOP_MB,NTOP_MB, btobs,cldflag,zt, &
       zht,zps,zlevmod,col_getNumLev(lcolumnhr,'TH'),hir_get_nchan_selected("AIRS"),nprf,ichref,lev_start,iopt2)

!iopt1=2 : calcul de la hauteur em metres PTOP_EQ et du NTOP_EQ correspondant
  CALL CLOUD_HEIGHT (PTOP_EQ,NTOP_EQ, btobs,cldflag,zt, &
       zht,zps,zlevmod,col_getNumLev(lcolumnhr,'TH'),hir_get_nchan_selected("AIRS"),nprf,ichref,lev_start,iopt1)


!* -- CLEAR/CLOUDY PROFILE DETECTION USING THE GARAND & NADON ALGORITHM

  CALL GARAND1998NADON (CLDFLAG, btobs,ztg,zt, &
       zht,col_getNumLev(lcolumnhr,'TH'),hir_get_nchan_selected("AIRS"),nprf,ptop_eq,ntop_eq,ichref)

!* -- FURTHER TESTS TO REMOVE POTENTIAL CLOUDY PROFILES


! *** TEST # A ***
! *** In daytime, set cloudy if cloud fraction over 5% ***

!      WHERE ( CLDFLAG(:) == 0 .AND. CLFR(:) > 5. .AND. SUNZA(:) < 90. ) CLDFLAG(:) = 1

  CFSUB(:)=-1.0
  DO JN =1, NPRF
     IF ( CLDFLAG(JN) == 0 .AND. CLFR(JN) > 5. .AND. SUNZA(JN) < 90. ) THEN
        CLDFLAG(JN) = 1
        CFSUB(JN)=0.01*CLFR(JN) !conversion % -> 0-1
     ENDIF
  ENDDO

! *** TEST # B ***
! *** Set cloudy if temperature difference between guess (ZTG)     ***
! *** and estimated true (ZTS) skin temperatures is over threshold ***

  CALL ESTIM_TS(ZTS, ztg,emi_sfc,rcal_clr,robs, &
       sfctau,cldflag,ichref,hir_get_nchan_selected("AIRS"),nchn,nprf,idairs,"AIRS")


  WHERE ( CLDFLAG(:) == 0 .AND. KSURF(:) == 1 &
       .AND. ABS(ZTS(:)-ZTG(:)) > DTW ) CLDFLAG(:) = 1
  WHERE ( CLDFLAG(:) == 0 .AND. KSURF(:) /= 1 &
       .AND. ABS(ZTS(:)-ZTG(:)) > DTL ) CLDFLAG(:) = 1

  GNCLDFLAG(:)=CLDFLAG(:)

!* ///// ------------------------------------------------------- /////
!* ///// DETERMINATION OF THE ASSIMILABLE OBSERVATIONS (REJFLAG) /////
!* ///// ------------------------------------------------------- /////


!* -- FIRST TESTS TO REJECT OBSERVATIONS


! *** TEST # 1 ***
! *** Do not assimilate where cloudy ***

  DO JN = 1, NPRF
     IF ( CLDFLAG(JN) == 1 ) then
        REJFLAG(:,JN,11) = 1
        REJFLAG(:,JN,23) = 1
     endif
  END DO


! *** TEST # 2 ***
! *** Gross check on valid BTs ***

!     already done


!* -- CLOUD TOP BASED ON MATCHING
!* -- OBSERVED BRIGHTNESS TEMPERATURE WITH BACKGROUND TEMPERATURE PROFILES (PTOP_BT)
!* -- OR COMPUTED OBSERVED RADIANCES WITH BACKGROUND RADIANCE PROFILES (PTOP_RD)
!* -- ON RTTOV VERTICAL LEVELS

  LEV_START(:) = 0

  DO JCH = 1, NCH_HE
     ILIST_HE(JCH) = hir_get_chindx_fr_chn("AIRS",ILIST1_AIRS(JCH))
  END DO

  CALL CLOUD_TOP ( PTOP_BT,PTOP_RD,NTOP_BT,NTOP_RD, &
       btobs,toext,zhoext,rcal_clr,zps,robs,rcld,zvlev,nlevb, &
       hir_get_nchan_selected("AIRS"),nprf,cldflag,rejflag,bitflag,lev_start,iopt2,ihgt,ichref,nch_he,ilist_he)

!* -- REFERENCE CHANNEL FOR CO2-SLICING

  DO JCH = 1, NCO2
     ILIST_CO2(JCH) = hir_get_chindx_fr_chn("AIRS",ILIST2_AIRS(JCH))
     ILIST_CO2_PAIR(JCH) = hir_get_chindx_fr_chn("AIRS",ILIST2_PAIR_AIRS(JCH))
  END DO


  DO JN = 1, NPRF
     cpt=0
     DO JCH=1,NCO2
        IF ( REJFLAG(ILIST_CO2(JCH),JN,9)==1 .or. REJFLAG(ILIST_CO2_PAIR(JCH),JN,9)==1 ) cpt=cpt+1
     ENDDO
     IF (cpt==nco2) THEN
        CLDFLAG(JN) = -1
        REJFLAG(:,JN,9) = 1
        write(*,*) 'WARNING'
        write(*,*) 'CO2 REFERENCE AND ALTERNATE CHANNEL OBSERVATIONS'
        write(*,*) 'HAVE BEEN REJECTED.                             '
        write(*,*) 'ALL AIRS OBSERVATIONS FROM THIS PROFILE REJECTED'
     ENDIF
  END DO

!* -- EQUIVALENT HEIGHT OF SELECTED WINDOW CHANNEL 

  HE(:) = PTOP_RD(hir_get_chindx_fr_chn("AIRS",ILIST1_AIRS(2)),:)

  DO JN = 1, NPRF
     IF (ICHREF(JN)==IWINDO_ALT) HE(JN) = PTOP_RD(hir_get_chindx_fr_chn("AIRS",ILIST1_AIRS(3)),JN)
  END DO

!* -- CLOUD TOP BASED ON CO2 SLICING

  DO JN = 1, NPRF
     LEV_START(JN) = MAX( MIN(LEV_START(JN),CO2MAX(1)), CO2MIN(1) )
  END DO
 


  CALL CO2_SLICING ( PTOP_CO2,NTOP_CO2,FCLOUD_CO2, &
       rcal_clr,rcld,robs,zps,zvlev,nlevb,hir_get_nchan_selected("AIRS"),nprf,cldflag,rejflag,bitflag, &
       lev_start,ichref,nco2,ilist_co2,ilist_co2_pair)

!* -- FIND CONSENSUS CLOUD TOP AND FRACTION

  CALL SELTOP ( ETOP,VTOP,ECF,VCF,NGOOD, he,ptop_co2,fcloud_co2, &
       CFSUB,PTOP_MB,zps,cldflag,gncldflag,nprf,nco2 )

!* -- FIND RADIATIVE TRANSFER MODEL LEVEL NEAREST TO TRIAL TOP (only compute one time)

  IF ( airs_loop_done == 0 ) THEN

     DIFFTOP_MIN = 100000.
     IMODTOP     = 1

     DO JL = 1, NLEVB
        IF ( ABS(vco_trl%DPT_M-100.*ZVLEV(JL)) < DIFFTOP_MIN ) THEN
           DIFFTOP_MIN = ABS(vco_trl%DPT_M-100.*ZVLEV(JL))
           IMODTOP = JL
        END IF
     END DO

     write(*,*) 'TOIT DU MODELE (MB)'
     write(*,*) 0.01*vco_trl%DPT_M
     write(*,*) 'NIVEAU DU MODELE DE TRANSFERT RADIATIF LE PLUS PRES DU TOIT DU MODELE'
     write(*,*) IMODTOP

  END IF


!* -- FIND MINIMUM LEVEL OF SENSITIVITY FOR CHANNEL ASSIMILATION NOT SENSIBLE TO CLOUDS

  CALL MIN_PRES_NEW (MAXWF, MINP,PMIN,DTAUDP1, zps,transm,zvlev,cldflag,nlevb,hir_get_nchan_selected("AIRS"),nprf,imodtop)

!* -- ASSIMILATION OF OBSERVATIONS WHEN CLOUDY PROFILES

! *** TEST # 3 ***
! *** Assimilation above clouds (refinement of test 1)             ***
! *** Set security margin to 2x the std on height from CO2-slicing ***

  TAMPON(:) = MAX(50.D0, 2.*VTOP(:))

  DO JC = 1, hir_get_nchan_selected("AIRS")
     WHERE ( REJFLAG(JC,:,11) == 1 .AND. REJFLAG(JC,:,23) == 1 .AND. ETOP(:) - TAMPON(:) > PMIN(JC,:) ) 
        REJFLAG(JC,:,11) = 0
        REJFLAG(JC,:,23) = 0
     end WHERE
  END DO


!     LOOK AT THE FATE OF THE OBSERVATIONS

  FATE(:,:) = SUM(REJFLAG(:,:,:),DIM=3)


!     FURTHER REASONS TO REJECT OBSERVATIONS

  ILIST_SUN=hir_get_chindx_fr_chn("AIRS",ICHN_SUN_AIRS)

  DO JC = 1, hir_get_nchan_selected("AIRS")
     DO JN = 1, NPRF

        IF ( FATE(JC,JN) == 0 ) THEN

! *** TEST # 4 ***
! *** Background check, do not assimilate if O-P > 3sigma ***

           IF ( ABS(BTOBS(JC,JN)-BTCALC(JC,JN)) > 3.0*BTOBSERR(JC) ) THEN
              REJFLAG(JC,JN,9)  = 1
              REJFLAG(JC,JN,16) = 1
           END IF

! *** TEST # 5 ***
! *** Do not assimilate shortwave channels during the day ***

           IF ( JC >=ILIST_SUN  .AND. SUNZA(JN) < NIGHT_ANG ) then
              REJFLAG(JC,JN,11) = 1
              REJFLAG(JC,JN,7)  = 1
           END IF

! *** TEST # 6 ***
! *** Do not assimilate surface channels over land ***

           IF ( MINP(JC,JN) == NLEVB .or. ZPS(JN)-PMIN(JC,JN) < 100. ) THEN
              IF ( KSURF(JN) == 0 ) THEN
                 REJFLAG(JC,JN,11) = 1    !!! comment this line if assimilation under conditions
                 REJFLAG(JC,JN,19) = 1    !!! comment this line if assimilation under conditions
                 IF ( PCNT_WAT(JN) > 0.01 .OR. PCNT_REG(JN) > 0.1 .OR. EMI_SFC(JC,JN) < 0.97 ) THEN
                    REJFLAG(JC,JN,11) = 1
                    REJFLAG(JC,JN,19) = 1
                 END IF

! *** TEST # 7 ***
! *** Do not assimilate surface channels over water under conditions ***

              ELSE IF ( KSURF(JN) == 1 ) THEN
                 IF ( PCNT_WAT(JN) < 0.99 .OR. PCNT_REG(JN) < 0.97 .OR. &
                      ICE(JN) > 0.001 .OR. ALBEDO(JN) >= 0.17 .OR. EMI_SFC(JC,JN) < 0.9 ) THEN
                    REJFLAG(JC,JN,11) = 1
                    REJFLAG(JC,JN,19) = 1
                 END IF

! *** TEST # 8 ***
! *** Do not assimilate surface channels over sea ice ***

              ELSE IF ( KSURF(JN) == 2 ) THEN
                 REJFLAG(JC,JN,11) = 1
                 REJFLAG(JC,JN,19) = 1

              END IF
           END IF

        END IF

! *** TEST # 9 ***
! *** Do not assimilate if jacobian has a significant contribution over model top ***

          ! Condition valid if model top at 10mb or lower only
        IF ( NINT(vco_trl%DPT_M) >= 1000 ) THEN
           IF ( REJFLAG(JC,JN,9) /= 1 .AND. DTAUDP1(JC,JN)  > 0.50 ) THEN
              REJFLAG(JC,JN,11) = 1
              REJFLAG(JC,JN,21) = 1
           END IF
        END IF
       
          ! Condition valid if model top at 10mb or lower only
        IF ( NINT(vco_trl%DPT_M) >= 1000 ) THEN
           IF ( REJFLAG(JC,JN,9) /= 1 .AND. TRANSM(JC,JN,1) < 0.99 ) THEN
              REJFLAG(JC,JN,11) = 1
              REJFLAG(JC,JN,21) = 1 
           END IF
        END IF

          ! Condition valid if model top is higher than 10 mb
        IF ( NINT(vco_trl%DPT_M) < 1000 ) THEN
           IF ( REJFLAG(JC,JN,9) /= 1 .AND. TRANSM(JC,JN,1) < 0.95 ) THEN
              REJFLAG(JC,JN,11) = 1
              REJFLAG(JC,JN,21) = 1 
           END IF
        END IF

! *** TEST # 10 ***
! *** Do not assimilate blacklisted channels ***

        IF ( hir_get_assim_chan("AIRS",JC) == 0 ) REJFLAG(JC,JN,8) = 1

     END DO
  END DO

!* -- FOR EACH PROFILE, ARE ALL NON-BLACKLISTED CHANNELS ASSIMILATED

  ASSIM_ALL(:) = .true.
  FATE(:,:) = SUM(REJFLAG(:,:,:),DIM=3)

  prf: DO JN = 1, NPRF
     chn: DO JC = 1, hir_get_nchan_selected("AIRS")
        IF ( REJFLAG(JC,JN,8) == 0 ) THEN
           IF ( FATE(JC,JN) /= 0 ) THEN
              ASSIM_ALL(JN) = .false.
              EXIT chn
           END IF
        END IF
     END DO chn
  END DO prf


!******************************************************************************************

!* -- PUT REJECT FLAGS INTO CMA VARIABLE --
!* ----------------------------------------

  NOBAIRS = 0
  count_airs = 0

  ! loop over all header indices of the 'TO' family
  call obs_set_current_header_list(lobsSpaceData,'TO')
  HEADER_3: do
     index_header = obs_getHeaderIndex(lobsSpaceData)
     if (index_header < 0) exit HEADER_3

     IDATYP = obs_headElem_i(lobsSpaceData,OBS_ITY,INDEX_HEADER)
     IF ( tvs_Is_idburp_airs(IDATYP) ) THEN
        count_airs = count_airs + 1
        IF ( count_airs > airs_loop_done * bunch_airs .AND. &
             count_airs <= (airs_loop_done+1) * bunch_airs ) THEN
           NOBAIRS = NOBAIRS + 1
           IDATA   = obs_headElem_i(lobsSpaceData,OBS_RLN,INDEX_HEADER)
           IDATEND = obs_headElem_i(lobsSpaceData,OBS_NLV,INDEX_HEADER) + IDATA - 1
           if  (.not.ASSIM_ALL(NOBAIRS)) then
              call obs_headSet_i(lobsSpaceData, OBS_ST1, index_header,ibset(obs_headElem_i(lobsSpaceData,OBS_ST1,INDEX_HEADER),6) )
           endif
           DO INDEX_BODY= IDATA, IDATEND
              ICHN = NINT(obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY))
              ICHN = MAX(0,MIN(ICHN,JPCHMAX+1))
              chan_indx=hir_get_chindx_fr_chn("AIRS",ichn)

              call obs_bodySet_r(lobsSpaceData,OBS_SEM,INDEX_BODY,EMI_SFC(chan_indx,NOBAIRS))
              
              IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,INDEX_BODY).EQ.1 ) THEN
                
                 
                 DO NFLG = 0, BITFLAG
                    IF ( REJFLAG(chan_indx,NOBAIRS,NFLG) == 1 ) &
                         call obs_bodySet_i(lobsSpaceData,OBS_FLG,INDEX_BODY,IBSET(obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY),NFLG))
                 END DO
              END IF
           END DO
        END IF
     END IF
  END DO HEADER_3


!* -- ADDITION OF NEW AIRS INFORMATION IN BURP FILE
!* ------------------------------------------------

  IPRO = airs_loop_done * bunch_airs + 1

  DO JN = 1, NPRF
     call obs_headSet_r(lobsSpaceData, OBS_ETOP, ipro, ETOP(JN) )
     call obs_headSet_r(lobsSpaceData, OBS_VTOP, ipro, VTOP(JN) )
     call obs_headSet_r(lobsSpaceData, OBS_ECF,  ipro, 100.*ECF(JN) )
     call obs_headSet_r(lobsSpaceData, OBS_VCF,  ipro, 100.*VCF(JN) )
     call obs_headSet_r(lobsSpaceData, OBS_HE,   ipro, HE(JN) )
     call obs_headSet_r(lobsSpaceData, OBS_ZTSR, ipro, ZTS(JN) )
     call obs_headSet_i(lobsSpaceData, OBS_NCO2, ipro, NGOOD(JN))
     call obs_headSet_r(lobsSpaceData, OBS_ZTM,  ipro, ZT(col_getNumLev(lcolumnhr,'TH'),JN) )
     call obs_headSet_r(lobsSpaceData, OBS_ZTGM, ipro, ZTG(JN) )
     call obs_headSet_r(lobsSpaceData, OBS_ZLQM, ipro, EXP(ZLQ(col_getNumLev(lcolumnhr,'TH'),JN)) )
     call obs_headSet_r(lobsSpaceData, OBS_ZPS,  ipro, 100.*ZPS(JN) )
     call obs_headSet_i(lobsSpaceData, OBS_STYP, ipro, KSURF(JN) )
     IPRO = IPRO + 1
  END DO


  deallocate (ZTG,ZPS,ZTS,ZT,ZHT,ZLQ)
  deallocate (BTOBSERR,BTOBS,BTCALC,RCAL_CLR,SFCTAU)
  deallocate (ROBS,RCLD,TRANSM,EMI_SFC)
  deallocate (CLFR,TOEXT,ZHOEXT,SUNZA)
  deallocate (ALBEDO,ICE,PCNT_WAT,PCNT_REG)
  deallocate (KSURF,LTYPE)
  deallocate (CLDFLAG,REJFLAG,LEV_START)
  deallocate (NTOP_EQ,NTOP_BT,NTOP_RD)
  deallocate (NTOP_CO2,NGOOD)
  deallocate (PTOP_EQ,PTOP_BT,PTOP_RD)
  deallocate (PTOP_CO2,FCLOUD_CO2,HE)
  deallocate (ETOP,VTOP,ECF,VCF)
  deallocate (MINP,FATE)
  deallocate (PMIN,DTAUDP1,TAMPON)
  deallocate (ICHREF)
  deallocate (ASSIM_ALL,PTOP_MB,NTOP_MB,CFSUB)
  deallocate (MAXWF)
  deallocate (GNCLDFLAG)
  deallocate (ZVLEV,ZLEVMOD,xpres)

END SUBROUTINE AIRSQC
