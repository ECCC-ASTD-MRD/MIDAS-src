SUBROUTINE CRISQC ( cris_end,cris_loop_done, lcolumnhr, lobsSpaceData )

#if defined (DOC)
!***********************************************************************
!
!**ID CRISQC -- QUALITY CONTROL OF CRIS OBSERVATIONS
!
!       SCIENCE:  L. GARAND
!       AUTHOR:   A. BEAULNE (CMDA/SMC) August 2004
!                 A. BEAULNE (CMDA/SMC)   June 2006  (ADAPT TO 3DVAR)
!
!       REVISION: 001 S. Heilliette (November 2010)
!                  adapt to rttov 10
!                 S. Macpherson S. Heilliette (August/september 2011)
!                  add ATMS and CrIS (idatyp 192 and 193)
!                 C.Charette - ARMA et N.Wagneur - CMDA - Juillet 2011
!                   . Ajout de la capacite de lire le champ d'essai de GEM Version 4 
!                   . ayant une grille verticale decalee dite "STAGGERED"!
!                 C. Charette M. Buehner -ARMA et A.Beaulne -CMDA - APR 2012
!                   . Correct bug in the logic to determine if all the profils are processed
!                   . In section TEST #11 Remove "if" statement used to set bit 11 in regflag table 
!       OBJECT: ASSIGN ASSIMILATION FLAGS TO OBSERVATIONS
!
!       ARGUMENTS:
!          INPUT:
!            -CRIS_LOOP_DONE : NUMBER OF PREVIOUS CALLS TO CRISQC
!
!          OUTPUT:
!            -CRIS_END       : AT THE END OF THIS CALL TO CRISQC, DO ALL CRIS
!                               PROFILES BEEN TREATED (true) OR NOT (false)
!
!
!***********************************************************************
#endif
  use EarthConstants_mod
  use MathPhysConstants_mod
  use tovs_nl_mod
  use hir_chans
  use multiirbgcheck
  use obsSpaceData_mod
  use columnData_mod
  use verticalCoord_mod

  IMPLICIT NONE
logical,intent(inout) :: cris_end
integer,intent(in) :: cris_loop_done
type(struct_columnData),intent(in) :: lcolumnhr
type(struct_obs),intent(inout) :: lobsSpaceData
!****************************************************
  type(struct_vco), pointer :: vco_trl
  INTEGER       :: JC,NCHN,JCH,JF,JL,NLEV,NLEVB,JN,NPRF,INDEX_HEADER,NFLG,ICHN
  INTEGER       :: IWINDO,IWINDO_ALT,KRTID,IPRO,NOBCRIS
  INTEGER       :: INDEX_BODY,IDATA,IDATEND,IDCRIS
  INTEGER       :: IBEGIN,ILAST,IBEGINOB,ILASTOB,IDATYP
  INTEGER       :: DIFFTOP_MIN
  INTEGER       :: count_cris
  REAL(8)       :: T_EFFECTIVE
  integer       :: alloc_status(65)
  integer       :: iextr 

  real(8), allocatable :: ZTG(:),ZPS(:),ZTS(:),ZT(:,:),ZHT(:,:),ZLQ(:,:),ZVLEV(:)
  real(8), allocatable :: ZLEVMOD(:,:),XPRES(:)
  real(8), allocatable :: BTOBSERR(:),BTOBS(:,:),BTCALC(:,:),RCAL_CLR(:,:),SFCTAU(:,:)
  real(8), allocatable :: ROBS(:,:),RCLD(:,:,:),TRANSM(:,:,:),EMI_SFC(:,:)
  real(8), allocatable :: TOEXT(:,:),ZHOEXT(:,:),SUNZA(:)
  real(8), allocatable :: ALBEDO(:),ICE(:),PCNT_WAT(:),PCNT_REG(:)
  integer, allocatable :: KSURF(:),LTYPE(:)
  integer, allocatable :: CLDFLAG(:),REJFLAG(:,:,:),LEV_START(:)
  integer, allocatable :: CORFLAG(:,:)
  integer, allocatable :: GNCLDFLAG(:)
  integer, allocatable :: ICHREF(:)
  integer, allocatable :: NTOP_EQ(:),NTOP_BT(:,:),NTOP_RD(:,:),NTOP_MB(:)
  integer, allocatable :: NTOP_CO2(:,:),NGOOD(:)
  real(8), allocatable :: PTOP_EQ(:),PTOP_BT(:,:),PTOP_RD(:,:),PTOP_MB(:)
  real(8), allocatable :: PTOP_CO2(:,:),FCLOUD_CO2(:,:),HE(:)
  real(8), allocatable :: ETOP(:),VTOP(:),ECF(:),VCF(:)
  integer, allocatable :: MINP(:,:),FATE(:,:)
  real(8), allocatable :: PMIN(:,:),DTAUDP1(:,:),TAMPON(:),MAXWF(:,:),CFSUB(:)
  logical, allocatable :: ASSIM_ALL(:)
  integer :: cpt
  integer :: co2min(1),co2max(1)
  integer :: isatzen
  logical :: ldbgbg=.false.
  integer ,SAVE :: IMODTOP
  INTEGER :: ilist_sun,ilist_he(nch_he),ilist_co2(nco2),ilist_co2_pair(nco2)
  INTEGER :: chan_indx,chan_number_cris
  logical :: bad

  vco_trl => col_getVco(lcolumnhr)

! ** find sensor number corresponding to CRIS

  DO KRTID = 1, NSENSORS
     IF ( PLATFORM(KRTID) .EQ. 17 .AND. &
          INSTRUMENT(KRTID) .EQ. 27 ) THEN
        IDCRIS = KRTID
        EXIT
     END IF
  END DO


! ** find number of CRIS profiles (for memory allocation) and set cris_end 
!    M. Buehner: take care of case when bunch*loopdone exactly equals total number of profiles

  NPRF = 0
  count_cris = 0
  cris_end = .true. ! set to false if at least 1 obs beyond this bunch
     

  ! loop over all header indices of the 'TO' family
  call obs_set_current_header_list(lobsSpaceData,'TO')
  HEADER: do
     index_header = obs_getHeaderIndex(lobsSpaceData)
     if (index_header < 0) exit HEADER

     IDATYP = obs_headElem_i(lobsSpaceData,OBS_ITY,INDEX_HEADER)
     IF ( tvs_Is_idburp_cris(IDATYP) ) THEN
        count_cris = count_cris + 1
        IF ( count_cris > cris_loop_done * bunch_cris .AND.  &
             count_cris <= (cris_loop_done+1) * bunch_cris ) NPRF = NPRF + 1
        IF ( count_cris > (cris_loop_done+1) * bunch_cris ) cris_end = .false.
     END IF
  END DO HEADER
  

! ** find number of CRIS channels and RTTOV levels

  NCHN = coefs (idcris) %coef %fmv_chn
  
  NLEV = coefs(idcris)% coef %nlevels
  allocate (xpres(NLEV))
  xpres(1:NLEV)=coefs(idcris)% coef% ref_prfl_p(1:NLEV)

  iextr=0
  if (nlev==44) iextr=1
  if (nlev==51) iextr=2
  if (nlev /= 43 .and. nlev/=44 .and. nlev/= 51) then
     Write(*,*) "Attention: modification necessaire dans CRISQC"
     call abort3d('crisqc        ')
  endif
  
  NLEVB=NLEV-iextr
      
  write(*,*) ' CRISQC - nchn ', nchn

! information to extract (transvidage)
! ------------------------------------
!
! ZTG(NPRF) -- guess skin temperatures (deg K)
! ZPS(NPRF) -- surface pressure (hPa)
! ZT(col_getNumLev(lcolumnhr,'TH'),NPRF) -- temperature profiles on NWP model levels (deg K)
! ZHT(col_getNumLev(lcolumnhr,'TH'),NPRF) -- height profiles on NWP model levels (m)
! ZLQ(col_getNumLev(lcolumnhr,'TH'),NPRF) -- surface specific humidity in ln q (kg/kg)
! BTOBSERR(CRISSNCH) -- observation error standard deviation
! BTOBS(CRISSNCH,NPRF) -- observed brightness temperatures (deg K)
! BTCALC(CRISSNCH,NPRF) -- computed brightness temperatures (deg K)
! RCAL_CLR(CRISSNCH,NPRF) -- computed clear radiances (mw/m2/sr/cm-1)
! SFCTAU(CRISSNCH,NPRF) -- surface to space transmittances (0-1)
! RCLD(CRISSNCH,NPRF,NLEV) -- overcast cloudy radiances (mw/m2/sr/cm-1)
! TRANSM(CRISSNCH,NPRF,NLEV) -- layer to space transmittances (0-1)
! EMI_SFC(CRISSNCH,NPRF) -- surface emissivities (0-1)
! KSURF(NPRF) -- surface type in obs file (0, 1)
! TOEXT(NLEV,NPRF) -- temperature profiles on RT model levels (deg K)
! ZHOEXT(NLEV,NPRF) -- height profiles on RT model levels (m)
! SUNZA(NPRF) -- sun zenith angle (deg)
! ALBEDO(NPRF) -- surface albedo (0-1)
! ICE(NPRF) -- ice fraction (0-1)
! LTYPE(NPRF) -- surface type (1,...,20)
! PCNT_WAT(NPRF) -- water fraction (0-1)
! PCNT_REG(NPRF) -- water fraction in the area (0-1)
! ROBS(CRISSNCH,NPRF) -- observed radiances (mW/m2/sr/cm-1)


      alloc_status(:) = 0
      allocate ( ZTG(NPRF),                       stat= alloc_status(1) )
      allocate ( ZPS(NPRF),                       stat= alloc_status(2) )
      allocate ( ZT(col_getNumLev(lcolumnhr,'TH'),NPRF),                stat= alloc_status(3) )
      allocate ( ZHT(col_getNumLev(lcolumnhr,'TH'),NPRF),               stat= alloc_status(4) )
      allocate ( ZLQ(col_getNumLev(lcolumnhr,'TH'),NPRF),               stat= alloc_status(5) )
      allocate ( BTOBSERR(HIR_GET_NCHAN_SELECTED("CRIS")),              stat= alloc_status(6) )
      allocate ( BTOBS(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),            stat= alloc_status(7) )
      allocate ( BTCALC(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),           stat= alloc_status(8) )
      allocate ( RCAL_CLR(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),         stat= alloc_status(9) )
      allocate ( SFCTAU(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),           stat= alloc_status(10))
      allocate ( RCLD(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF,NLEVB),      stat= alloc_status(11))
      allocate ( TRANSM(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF,NLEVB),    stat= alloc_status(12))
      allocate ( EMI_SFC(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),          stat= alloc_status(13))
      allocate ( KSURF(NPRF),                     stat= alloc_status(14))
      allocate ( TOEXT(NLEVB,NPRF),              stat= alloc_status(16))
      allocate ( ZHOEXT(NLEVB,NPRF),             stat= alloc_status(17))
      allocate ( SUNZA(NPRF),                     stat= alloc_status(18))
      allocate ( ALBEDO(NPRF),                    stat= alloc_status(19))
      allocate ( ICE(NPRF),                       stat= alloc_status(20))
      allocate ( LTYPE(NPRF),                     stat= alloc_status(21))
      allocate ( PCNT_WAT(NPRF),                  stat= alloc_status(22))
      allocate ( PCNT_REG(NPRF),                  stat= alloc_status(23))
      allocate ( ROBS(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),             stat= alloc_status(24))
      allocate ( ZTS(NPRF),                       stat= alloc_status(26))
      allocate ( CLDFLAG(NPRF),                   stat= alloc_status(27))
      allocate ( REJFLAG(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF,0:BITFLAG),stat= alloc_status(28))
      allocate ( LEV_START(NPRF),                 stat= alloc_status(29))
      allocate ( NTOP_EQ(NPRF),                   stat= alloc_status(31))
      allocate ( NTOP_BT(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),          stat= alloc_status(32))
      allocate ( NTOP_RD(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),          stat= alloc_status(33))
      allocate ( NTOP_CO2(NCO2,NPRF),             stat= alloc_status(34))
      allocate ( PTOP_EQ(NPRF),                   stat= alloc_status(35))
      allocate ( PTOP_BT(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),          stat= alloc_status(36))
      allocate ( PTOP_RD(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),          stat= alloc_status(37))
      allocate ( PTOP_CO2(NCO2,NPRF),             stat= alloc_status(38))
      allocate ( FCLOUD_CO2(NCO2,NPRF),           stat= alloc_status(39))
      allocate ( HE(NPRF),                        stat= alloc_status(40))
      allocate ( ETOP(NPRF),                      stat= alloc_status(41))
      allocate ( VTOP(NPRF),                      stat= alloc_status(42))
      allocate ( ECF(NPRF),                       stat= alloc_status(43))
      allocate ( VCF(NPRF),                       stat= alloc_status(44))
      allocate ( NGOOD(NPRF),                     stat= alloc_status(45))
      allocate ( MINP(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),             stat= alloc_status(46))
      allocate ( PMIN(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),             stat= alloc_status(47))
      allocate ( DTAUDP1(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),          stat= alloc_status(48))
      allocate ( TAMPON(NPRF),                    stat= alloc_status(49))
      allocate ( FATE(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),             stat= alloc_status(50))
      allocate ( ICHREF(NPRF),                    stat= alloc_status(51))
      allocate ( ASSIM_ALL(NPRF),                 stat= alloc_status(53))
      allocate ( MAXWF(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),            stat= alloc_status(54))
      allocate ( ZVLEV(NLEVB),               stat= alloc_status(55))
      allocate ( PTOP_MB(NPRF),                   stat= alloc_status(56))
      allocate ( NTOP_MB(NPRF),                   stat= alloc_status(57))
      allocate ( CFSUB(NPRF),                     stat= alloc_status(58))
      allocate ( GNCLDFLAG(NPRF),                 stat= alloc_status(59))
      allocate ( ZLEVMOD(col_getNumLev(lcolumnhr,'TH'),NPRF),           stat= alloc_status(61))
      allocate ( CORFLAG(HIR_GET_NCHAN_SELECTED("CRIS"),NPRF),          stat= alloc_status(62))

      if( any(alloc_status /= 0) ) then
        write(*,*) ' crisqc : memory allocation error'
        call abort3d('crisqc        ')
      end if

      DO JL = 1, NLEVB
         ZVLEV(JL) = XPRES(JL+iextr)
      END DO

      CO2MIN=minloc( abs( ZVLEV - pco2min ) )
      CO2MAX=minloc( abs( ZVLEV - pco2max ) )

      BTOBS(:,:)    = -1.d0
      BTCALC(:,:)   = -1.d0
      RCAL_CLR(:,:) = -1.d0
      SFCTAU(:,:)   = -1.d0
      RCLD(:,:,:)   = -1.d0
      TRANSM(:,:,:) = -1.d0
      EMI_SFC(:,:)  = -1.d0

      REJFLAG(:,:,:) = 0
      CORFLAG(:,:)   = 0

      NOBCRIS = 0
      NOBTOV = 0
      count_cris = 0

     ! loop over all header indices of the 'TO' family
      call obs_set_current_header_list(lobsSpaceData,'TO')
      HEADER_2: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER_2

           IDATYP = obs_headElem_i(lobsSpaceData,OBS_ITY,INDEX_HEADER)

           IF ( tvs_Is_idburp_tovs(IDATYP) ) NOBTOV = NOBTOV + 1

           IF ( tvs_Is_idburp_cris(IDATYP) ) THEN

              count_cris = count_cris + 1

              IF ( count_cris > cris_loop_done * bunch_cris .AND.  &
                   count_cris <= (cris_loop_done+1) * bunch_cris ) THEN

                 NOBCRIS = NOBCRIS + 1

                 ZTG(NOBCRIS) = col_getElem(lcolumnhr,1,INDEX_HEADER,'TG')
                 ZPS(NOBCRIS) = col_getElem(lcolumnhr,1,INDEX_HEADER,'P0') &
                      * MPC_MBAR_PER_PA_R8

                DO JL = 1, col_getNumLev(lcolumnhr,'TH')
                  ZT(JL,NOBCRIS) = col_getElem(lcolumnhr,JL,INDEX_HEADER,'TT')
!    On prend le geopotentiel aux niveaux de la thermodynamique
                  ZHT(JL,NOBCRIS) = col_getHeight(lcolumnhr,JL,INDEX_HEADER,'TH') / RG
                  ZLQ(JL,NOBCRIS) = col_getElem(lcolumnhr,JL,INDEX_HEADER,'HU')
!    On prend la pression aux niveaux de la thermodynamique
                  ZLEVMOD(JL,NOBCRIS) = col_getPressure(lcolumnhr,JL,INDEX_HEADER,'TH') &
                       * MPC_MBAR_PER_PA_R8
                END DO
                
                IDATA   = obs_headElem_i(lobsSpaceData,OBS_RLN,INDEX_HEADER)
                IDATEND = obs_headElem_i(lobsSpaceData,OBS_NLV,INDEX_HEADER) + IDATA - 1

                BAD=( obs_headElem_i(lobsSpaceData,OBS_GQF,index_header)/=0 .or. &
                     obs_headElem_i(lobsSpaceData,OBS_GQL,index_header) /=0) 

                DO INDEX_BODY= IDATA, IDATEND
                   IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,INDEX_BODY).EQ.1 ) THEN
                    ICHN = NINT(obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY))
                    ICHN = MAX(0,MIN(ICHN,JPCHMAX+1))
                    chan_indx=hir_get_chindx_fr_chn("CRIS",ichn)
                    BTOBSERR(chan_indx) = obs_bodyElem_r(lobsSpaceData,OBS_OER,INDEX_BODY)
                    BTOBS(chan_indx,NOBCRIS) = obs_bodyElem_r(lobsSpaceData,OBS_VAR,INDEX_BODY)
! *** Flag check on observed BTs ***
                    IF (BTEST(obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY),2)) then
                       REJFLAG(chan_indx,NOBCRIS,9) = 1
                       if (ldbgbg) print *,"Rejet bit 2!",chan_indx
                    endif
! *** Flag check on observed BTs ***
                    IF (BAD) THEN
                       REJFLAG(chan_indx,NOBCRIS,9) = 1
                    ENDIF
! *** Set if data has been bias corrected (bit 6 set) ***
                    IF (BTEST(obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY),6)) then
                       CORFLAG(chan_indx,NOBCRIS) = 1
                    endif
! *** Gross check on observed BTs ***
                    IF (BTOBS(chan_indx,NOBCRIS)<150.d0) then
                       REJFLAG(chan_indx,NOBCRIS,9) = 1
                       if (ldbgbg) print *,"Rejet TBOBS trop froid!",chan_indx
                    ENDIF
                    IF (BTOBS(chan_indx,NOBCRIS)>350.d0) then
                       REJFLAG(chan_indx,NOBCRIS,9) = 1
                       if (ldbgbg) print *,"Rejet TBOBS trop chaud!",chan_indx
                    endif
                   END IF
                END DO

                DO JC = 1, NCHN
                  ICHN = ichan(JC,IDCRIS)
                  chan_indx=hir_get_chindx_fr_chn("CRIS",ichn)
                  BTCALC(chan_indx,NOBCRIS) = radiance_d(nobtov)%bt(jc)
                  RCAL_CLR(chan_indx,NOBCRIS) = radiance_d(nobtov)%clear(jc)
                  SFCTAU(chan_indx,NOBCRIS) = transmission_d(nobtov)%tau_total(jc)
                  DO JL = 1, NLEVB
                     RCLD(chan_indx,NOBCRIS,JL) = radiance_d(nobtov)%overcast(jl+iextr-1,jc)
                     TRANSM(chan_indx,NOBCRIS,JL) = transmission_d(nobtov)%tau_levels(jl+iextr,jc)
                  END DO
                  
                  EMI_SFC(chan_indx,NOBCRIS) = emissivity(JC,NOBTOV)
! *** Gross check on computed BTs ***
                  IF (BTCALC(chan_indx,NOBCRIS)<150.d0) then
                     REJFLAG(chan_indx,NOBCRIS,9) = 1
                     if (ldbgbg) print *,"Rejet TBCALC trop froid!",chan_indx
                  endif
                  IF (BTCALC(chan_indx,NOBCRIS)>350.d0) then
                     REJFLAG(chan_indx,NOBCRIS,9) = 1
                     if (ldbgbg) print *,"Rejet TBCALC trop chaud!",chan_indx
                  endif
                END DO

                KSURF(NOBCRIS) = profiles(nobtov)%skin%surftype
!Test pour detecter le isatzen manquant ou anormal pour CrIS
                isatzen= obs_headElem_i(lobsSpaceData,OBS_SZA,INDEX_HEADER)
                if ( isatzen < 9000 .or. &
                     isatzen > 16500 ) then
                   DO JC = 1, NCHN
                      ICHN = ichan(JC,IDCRIS)
                      chan_indx=hir_get_chindx_fr_chn("CRIS",ichn)
                      REJFLAG(chan_indx,NOBCRIS,9) = 1
                   ENDDO
                endif
!**************************************************************
                DO JL = 1, NLEVB
                   TOEXT(JL,NOBCRIS) = profiles(nobtov)%t(jl+iextr)
                   ZHOEXT(JL,NOBCRIS) = profiles_qc(nobtov)%z(jl+iextr)
                END DO

                SUNZA(NOBCRIS) = profiles_qc(nobtov)%sunza
                ALBEDO(NOBCRIS) = profiles_qc(nobtov)%albedo
                ICE(NOBCRIS) = profiles_qc(nobtov)%ice
                LTYPE(NOBCRIS) = profiles_qc(nobtov)%ltype
                IF(LTYPE(NOBCRIS).EQ.20) KSURF(NOBCRIS)=2
                PCNT_WAT(NOBCRIS) = profiles_qc(nobtov)%pcnt_wat
                PCNT_REG(NOBCRIS) = profiles_qc(nobtov)%pcnt_reg

              END IF

            END IF

         END DO HEADER_2


! ** find TOA radiances converted from observed BT's

      ROBS(:,:) = -1.d0

      profils: DO JN = 1, NPRF
        channels: DO JC = 1, NCHN
          ICHN = ichan(JC,IDCRIS)
          chan_indx=hir_get_chindx_fr_chn("CRIS",ichn)
          IF ( REJFLAG(chan_indx,JN,9) == 1 ) CYCLE channels
          t_effective =  coefs(idcris)%coef%ff_bco(jc) &
               + coefs(idcris)%coef%ff_bcs(jc) * BTOBS(chan_indx,jn)
          ROBS(chan_indx,jn) =  coefs(idcris)%coef%planck1(jc) / &
               ( Exp( coefs(idcris)%coef%planck2(jc)/t_effective ) - 1.d0 )
        END DO channels
      END DO profils


! ** set height fields to 'height above ground' fields

      DO JN = 1, NPRF
         DO JL = 1, NLEVB
            ZHOEXT(JL,JN) = ZHOEXT(JL,JN) - ZHT(col_getNumLev(lcolumnhr,'TH'),JN)
         END DO
         DO JL = 1, col_getNumLev(lcolumnhr,'TH')
            ZHT(JL,JN) = ZHT(JL,JN) - ZHT(col_getNumLev(lcolumnhr,'TH'),JN)
         END DO
      END DO


!**********************************************************************************************

!* ///// ---------------------------------------------------- /////
!* ///// DETERMINATION OF THE CLEAR/CLOUDY PROFILES (CLDFLAG) /////
!* ///// ---------------------------------------------------- /////

      CLDFLAG(:) = 0


!* -- REFERENCE FOR WINDOW CHANNEL

      IWINDO     = hir_get_chindx_fr_chn("CRIS",IWINDOW_CRIS)
      IWINDO_ALT = hir_get_chindx_fr_chn("CRIS",IWINDOW_ALT_CRIS)

      ICHREF(:)  = IWINDO
      DO JN = 1, NPRF
        IF ( REJFLAG(IWINDO,JN,9) == 1 ) THEN
          ICHREF(JN) = IWINDO_ALT
          IF ( REJFLAG(IWINDO_ALT,JN,9) == 1 ) THEN
            ICHREF(JN) = -1
            CLDFLAG(JN) = -1
            REJFLAG(:,JN,9) = 1
            write(*,*) 'WARNING'
            write(*,*) 'WINDOW AND ALTERNATE WINDOW CHANNEL OBSERVATIONS'
            write(*,*) 'HAVE BEEN REJECTED.                             '
            write(*,*) 'ALL CRIS OBSERVATIONS FROM THIS PROFILE REJECTED'
          END IF
        END IF
      END DO


!* -- CLOUD TOP BASED ON MATCHING OBSERVED BRIGHTNESS TEMPERATURE
!* -- AT A REFERENCE SURFACE CHANNEL WITH BACKGROUND TEMPERATURE PROFILE (PTOP_EQ)
!* -- ON GUESS VERTICAL LEVELS.

      LEV_START(:) = 0
!iopt2=1 : calcul de la hauteur en hPa PTOP_MB et du NTOP_MB correspondant
      CALL CLOUD_HEIGHT (PTOP_MB,NTOP_MB, btobs,cldflag,zt, &
           zht,zps,zlevmod,col_getNumLev(lcolumnhr,'TH'),hir_get_nchan_selected("CrIS"),nprf,ichref,lev_start,iopt2)

!iopt1=2 : calcul de la hauteur em metres PTOP_EQ et du NTOP_EQ correspondant
      CALL CLOUD_HEIGHT (PTOP_EQ,NTOP_EQ, btobs,cldflag,zt, &
           zht,zps,zlevmod,col_getNumLev(lcolumnhr,'TH'),hir_get_nchan_selected("CrIS"),nprf,ichref,lev_start,iopt1)


!* -- CLEAR/CLOUDY PROFILE DETECTION USING THE GARAND & NADON ALGORITHM
    
      CALL GARAND1998NADON (CLDFLAG, btobs,ztg,zt, &
           zht,col_getNumLev(lcolumnhr,'TH'),hir_get_nchan_selected("CrIS"),nprf,ptop_eq,ntop_eq,ichref)


!* -- FURTHER TESTS TO REMOVE POTENTIAL CLOUDY PROFILES


! *** TEST # A ***
! *** In daytime, set cloudy if cloud fraction over 5% ***


      CFSUB(:)=-1.d0

! *** TEST # B ***
! *** Set cloudy if temperature difference between guess (ZTG)     ***
! *** and estimated true (ZTS) skin temperatures is over threshold ***

      CALL ESTIM_TS(ZTS, ztg,emi_sfc,rcal_clr,robs, &
           sfctau,cldflag,ichref,hir_get_nchan_selected("CrIS"),nchn,nprf,idcris,"CRIS")


      WHERE ( CLDFLAG(:) == 0 .AND. KSURF(:) == 1 &
           .AND. ABS(ZTS(:)-ZTG(:)) > DTW ) CLDFLAG(:) = 1
      WHERE ( CLDFLAG(:) == 0 .AND. KSURF(:) /= 1 &
           .AND. ABS(ZTS(:)-ZTG(:)) > DTL ) CLDFLAG(:) = 1

      GNCLDFLAG(:)=CLDFLAG(:)

!* ///// ------------------------------------------------------- /////
!* ///// DETERMINATION OF THE ASSIMILABLE OBSERVATIONS (REJFLAG) /////
!* ///// ------------------------------------------------------- /////


!* -- FIRST TESTS TO REJECT OBSERVATIONS


! *** TEST # 1 ***
! *** Do not assimilate where cloudy ***

      DO JN = 1, NPRF
        IF ( CLDFLAG(JN) == 1 ) then
           REJFLAG(:,JN,11) = 1
           REJFLAG(:,JN,23) = 1
        endif
      END DO


! *** TEST # 2 ***
! *** Gross check on valid BTs ***

!     already done


!* -- CLOUD TOP BASED ON MATCHING
!* -- OBSERVED BRIGHTNESS TEMPERATURE WITH BACKGROUND TEMPERATURE PROFILES (PTOP_BT)
!* -- OR COMPUTED OBSERVED RADIANCES WITH BACKGROUND RADIANCE PROFILES (PTOP_RD)
!* -- ON RTTOV VERTICAL LEVELS

      LEV_START(:) = 0

      DO JCH = 1, NCH_HE
         ILIST_HE(JCH) = hir_get_chindx_fr_chn("CRIS",ILIST1_CRIS(JCH))
      END DO

      CALL CLOUD_TOP ( PTOP_BT,PTOP_RD,NTOP_BT,NTOP_RD, &
           btobs,toext,zhoext,rcal_clr,zps,robs,rcld,zvlev,nlevb, &
           hir_get_nchan_selected("CRIS"),nprf,cldflag,rejflag,bitflag,lev_start,iopt2,ihgt,ichref,nch_he,ilist_he)


!* -- REFERENCE CHANNEL FOR CO2-SLICING

      DO JCH = 1, NCO2
         ILIST_CO2(JCH) = hir_get_chindx_fr_chn("CRIS",ILIST2_CRIS(JCH))
         ILIST_CO2_PAIR(JCH) = hir_get_chindx_fr_chn("CRIS",ILIST2_PAIR_CRIS(JCH))
      END DO


      DO JN = 1, NPRF
         cpt=0
         DO JCH=1,NCO2
            IF ( REJFLAG(ILIST_CO2(JCH),JN,9)==1 .or.  &
                 REJFLAG(ILIST_CO2_PAIR(JCH),JN,9)==1 ) cpt=cpt+1
         ENDDO
         IF (cpt==nco2) THEN
            CLDFLAG(JN) = -1
            REJFLAG(:,JN,9) = 1
            write(*,*) 'WARNING'
            write(*,*) 'CO2 REFERENCE AND ALTERNATE CHANNEL OBSERVATIONS'
            write(*,*) 'HAVE BEEN REJECTED.                             '
            write(*,*) 'ALL CRIS OBSERVATIONS FROM THIS PROFILE REJECTED'
         ENDIF
      END DO

!* -- EQUIVALENT HEIGHT OF SELECTED WINDOW CHANNEL

      HE(:) = PTOP_RD(hir_get_chindx_fr_chn("CRIS",ILIST1_CRIS(2)),:)

      DO JN = 1, NPRF
        IF (ICHREF(JN)==IWINDO_ALT) HE(JN) = PTOP_RD(hir_get_chindx_fr_chn("CRIS",ILIST1_CRIS(3)),JN)
      END DO

!* -- CLOUD TOP BASED ON CO2 SLICING

      DO JN = 1, NPRF
         LEV_START(JN) = MAX( MIN(LEV_START(JN),CO2MAX(1)), CO2MIN(1) )
      END DO

    

      CALL CO2_SLICING ( PTOP_CO2,NTOP_CO2,FCLOUD_CO2, &
           rcal_clr,rcld,robs,zps,zvlev,nlevb,hir_get_nchan_selected("CrIS"),nprf,cldflag,rejflag,bitflag, &
           lev_start,ichref,nco2,ilist_co2,ilist_co2_pair)

!* -- FIND CONSENSUS CLOUD TOP AND FRACTION

      CALL SELTOP ( ETOP,VTOP,ECF,VCF,NGOOD, he,ptop_co2,fcloud_co2, &
           CFSUB,PTOP_MB,zps,cldflag,gncldflag,nprf,nco2 )


!* -- FIND RADIATIVE TRANSFER MODEL LEVEL NEAREST TO TRIAL TOP (only compute one time)

      IF ( cris_loop_done == 0 ) THEN

         DIFFTOP_MIN = 100000.d0
         IMODTOP     = 1
         DO JL = 1, NLEVB
            IF ( ABS(vco_trl%DPT_M-100.d0*ZVLEV(JL)) < DIFFTOP_MIN ) THEN
               DIFFTOP_MIN = ABS(vco_trl%DPT_M-100.d0*ZVLEV(JL))
               IMODTOP = JL
            END IF
         END DO

         write(*,*) 'TOIT DU MODELE (MB)'
         write(*,*) 0.01d0*vco_trl%DPT_M
         write(*,*) 'NIVEAU DU MODELE DE TRANSFERT RADIATIF LE PLUS PRES DU TOIT DU MODELE'
         write(*,*) IMODTOP

      END IF


!* -- FIND MINIMUM LEVEL OF SENSITIVITY FOR CHANNEL ASSIMILATION NOT SENSIBLE TO CLOUDS

      CALL MIN_PRES_NEW (MAXWF, MINP,PMIN,DTAUDP1, zps,transm,zvlev,cldflag,nlevb,hir_get_nchan_selected("CrIS"),nprf,imodtop)


!* -- ASSIMILATION OF OBSERVATIONS WHEN CLOUDY PROFILES

! *** TEST # 3 ***
! *** Assimilation above clouds (refinement of test 1)             ***
! *** Set security margin to 2x the std on height from CO2-slicing ***

      TAMPON(:) = MAX(50.D0, 2.d0*VTOP(:))

      DO JC = 1, HIR_GET_NCHAN_SELECTED("CRIS")
        WHERE ( REJFLAG(JC,:,11) == 1 .AND. REJFLAG(JC,:,23) == 1 .AND. ETOP(:) - TAMPON(:) > PMIN(JC,:) )
           REJFLAG(JC,:,11) = 0
           REJFLAG(JC,:,23) = 0
        end WHERE
        if (ldbgbg) then
           chan_number_cris=ichan(JC,IDCRIS)
           DO JN = 1, NPRF
              if (REJFLAG(JC,JN,11)==1 .and. REJFLAG(JC,JN,23)==1) then
                 print *,"Rejet Nuage!",chan_number_cris
              endif
           enddo
        endif
      END DO


!     LOOK AT THE FATE OF THE OBSERVATIONS

      FATE(:,:) = SUM(REJFLAG(:,:,:),DIM=3)


!     FURTHER REASONS TO REJECT OBSERVATIONS

      ILIST_SUN=hir_get_chindx_fr_chn("CRIS",ICHN_SUN_CRIS)

      DO JC = 1, HIR_GET_NCHAN_SELECTED("CRIS")
         chan_number_cris=ichan(JC,IDCRIS)
         DO JN = 1, NPRF
           
          IF ( FATE(JC,JN) == 0 ) THEN

! *** TEST # 4 ***
! *** Background check, do not assimilate if O-P > 3sigma ***

            IF ( ABS(BTOBS(JC,JN)-BTCALC(JC,JN)) > 3.d0*BTOBSERR(JC) ) THEN
              REJFLAG(JC,JN,9)  = 1
              REJFLAG(JC,JN,16) = 1
              if (ldbgbg) print *,"Rejet 3SIGMA!",chan_number_cris
            END IF

! *** TEST # 5 ***
! *** Do not assimilate shortwave channels during the day ***

            IF ( JC >=ILIST_SUN  .AND. SUNZA(JN) < NIGHT_ANG ) then
               REJFLAG(JC,JN,11) = 1
               REJFLAG(JC,JN,7)  = 1
               if (ldbgbg) print *,"Rejet soleil!",chan_number_cris
            END IF

! *** TEST # 6 ***
! *** Do not assimilate surface channels over land ***

            IF ( MINP(JC,JN) == NLEVB .or. ZPS(JN)-PMIN(JC,JN) < 100.d0 ) THEN
              IF ( KSURF(JN) == 0 ) THEN
                if (ldbgbg) print *,"Rejet surface terre!",chan_number_cris
                REJFLAG(JC,JN,11) = 1    !!! comment this line if assimilation under conditions
                REJFLAG(JC,JN,19) = 1    !!! comment this line if assimilation under conditions
                IF ( PCNT_WAT(JN) > 0.01d0 .OR. PCNT_REG(JN) > 0.1d0 .OR. EMI_SFC(JC,JN) < 0.97d0 ) THEN
                  REJFLAG(JC,JN,11) = 1
                  REJFLAG(JC,JN,19) = 1
                END IF

! *** TEST # 7 ***
! *** Do not assimilate surface channels over water under conditions ***

              ELSE IF ( KSURF(JN) == 1 ) THEN
                IF ( PCNT_WAT(JN) < 0.99d0 .OR. PCNT_REG(JN) < 0.97d0 .OR. &
                     ICE(JN) > 0.001d0 .OR. ALBEDO(JN) >= 0.17d0 .OR. EMI_SFC(JC,JN) < 0.9d0 ) THEN
                  REJFLAG(JC,JN,11) = 1
                  REJFLAG(JC,JN,19) = 1
                  if (ldbgbg) print *,"Rejet surface mer!",chan_number_cris
                END IF

! *** TEST # 8 ***
! *** Do not assimilate surface channels over sea ice ***

              ELSE IF ( KSURF(JN) == 2 ) THEN
                REJFLAG(JC,JN,11) = 1
                REJFLAG(JC,JN,19) = 1
                if (ldbgbg) print *,"Rejet glace de mer!",chan_number_cris
              END IF
            END IF

          END IF

! *** TEST # 9 ***
! *** Do not assimilate if jacobian has a significant contribution over model top ***

          ! Condition valid if model top at 10mb or lower only
          IF ( NINT(vco_trl%DPT_M) >= 1000 ) THEN
            IF ( REJFLAG(JC,JN,9) /= 1 .AND. DTAUDP1(JC,JN)  > 0.50d0 ) THEN
              REJFLAG(JC,JN,11) = 1
              REJFLAG(JC,JN,21) = 1
              if (ldbgbg) print *,"1Ne devrait pas arriver !",chan_number_cris
            END IF
          END IF
       
          ! Condition valid if model top at 10mb or lower only
          IF ( NINT(vco_trl%DPT_M) >= 1000 ) THEN
            IF ( REJFLAG(JC,JN,9) /= 1 .AND. TRANSM(JC,JN,1) < 0.99d0 ) THEN
              REJFLAG(JC,JN,11) = 1
              REJFLAG(JC,JN,21) = 1 
              if (ldbgbg) print *,"2Ne devrait pas arriver !",chan_number_cris
            END IF
          END IF

          ! Condition valid if model top is higher than 10 mb
          IF ( NINT(vco_trl%DPT_M) < 1000 ) THEN
            IF ( REJFLAG(JC,JN,9) /= 1 .AND. TRANSM(JC,JN,1) < 0.95d0 ) THEN
              REJFLAG(JC,JN,11) = 1
              REJFLAG(JC,JN,21) = 1 
              if (ldbgbg) print *,"Rejet toit!",chan_number_cris
            END IF
          END IF

! *** TEST # 10 ***
! *** Do not assimilate blacklisted channels ***

          IF ( hir_get_assim_chan("CRIS",JC) == 0 ) then
             REJFLAG(JC,JN,8) = 1
             if (ldbgbg) print *,"Rejet liste noire!",chan_number_cris
          endif

! *** TEST # 11 ***
! *** For non blacklisted channels, set Bit 11 if data not corrected (Bit 6 not set) ***

!          IF ( hir_get_assim_chan("CRIS",JC) ==1 .AND. CORFLAG(JC,JN) == 0 ) then
!             REJFLAG(JC,JN,11) = 1
!             if (ldbgbg) print *,"Rejet BCOR manquant!",chan_number_cris
!          endif


       END DO
     END DO



!* -- FOR EACH PROFILE, ARE ALL NON-BLACKLISTED CHANNELS ASSIMILATED

      ASSIM_ALL(:) = .true.
      FATE(:,:) = SUM(REJFLAG(:,:,:),DIM=3)

      prf: DO JN = 1, NPRF
        chn: DO JC = 1, HIR_GET_NCHAN_SELECTED("CRIS")
          IF ( REJFLAG(JC,JN,8) == 0 ) THEN
            IF ( FATE(JC,JN) /= 0 ) THEN
              ASSIM_ALL(JN) = .false.
              EXIT chn
            END IF
          END IF
        END DO chn
      END DO prf


!******************************************************************************************

!* -- PUT REJECT FLAGS INTO CMA VARIABLE --
!* ----------------------------------------

      NOBCRIS = 0
      count_cris = 0
      ! loop over all header indices of the 'TO' family
      call obs_set_current_header_list(lobsSpaceData,'TO')
      HEADER_3: do
         index_header = obs_getHeaderIndex(lobsSpaceData)
         if (index_header < 0) exit HEADER_3

         IDATYP = obs_headElem_i(lobsSpaceData,OBS_ITY,INDEX_HEADER)
         IF ( tvs_Is_idburp_cris(IDATYP) ) THEN
            count_cris = count_cris + 1
            IF ( count_cris > cris_loop_done * bunch_cris .AND. &
                 count_cris <= (cris_loop_done+1) * bunch_cris ) THEN
               NOBCRIS = NOBCRIS + 1
               IDATA   = obs_headElem_i(lobsSpaceData,OBS_RLN,INDEX_HEADER)
               IDATEND = obs_headElem_i(lobsSpaceData,OBS_NLV,INDEX_HEADER) + IDATA - 1
               if  (.not.ASSIM_ALL(NOBCRIS)) then
                  call obs_headSet_i(lobsSpaceData, OBS_ST1, index_header,ibset(obs_headElem_i(lobsSpaceData,OBS_ST1,INDEX_HEADER),6) )
               endif
               DO INDEX_BODY= IDATA, IDATEND
                  ICHN = NINT(obs_bodyElem_r(lobsSpaceData,OBS_PPP,INDEX_BODY))
                  ICHN = MAX(0,MIN(ICHN,JPCHMAX+1))
                  chan_indx=hir_get_chindx_fr_chn("CRIS",ichn)
                  call obs_bodySet_r(lobsSpaceData,OBS_SEM,INDEX_BODY,EMI_SFC(chan_indx,NOBCRIS))
                  IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,INDEX_BODY).EQ.1 ) THEN
                     
                     DO NFLG = 0, BITFLAG
                        IF ( REJFLAG(chan_indx,NOBCRIS,NFLG) == 1 ) &
                             call obs_bodySet_i(lobsSpaceData,OBS_FLG,INDEX_BODY,IBSET(obs_bodyElem_i(lobsSpaceData,OBS_FLG,INDEX_BODY),NFLG))
                     ENDDO
                  END IF
               END DO
            END IF
         END IF
      END DO HEADER_3

!* -- ADDITION OF NEW CRIS INFORMATION IN BURP FILE
!* ------------------------------------------------

      IPRO = cris_loop_done * bunch_cris + 1

      DO JN = 1, NPRF
       call obs_headSet_r(lobsSpaceData, OBS_ETOP, ipro, ETOP(JN) )
       call obs_headSet_r(lobsSpaceData, OBS_VTOP, ipro, VTOP(JN) )
       call obs_headSet_r(lobsSpaceData, OBS_ECF,  ipro, 100.d0*ECF(JN) )
       call obs_headSet_r(lobsSpaceData, OBS_VCF,  ipro, 100.d0*VCF(JN) )
       call obs_headSet_r(lobsSpaceData, OBS_HE,   ipro, HE(JN) )
       call obs_headSet_r(lobsSpaceData, OBS_ZTSR, ipro, ZTS(JN) )
       call obs_headSet_i(lobsSpaceData, OBS_NCO2, ipro, NGOOD(JN))
       call obs_headSet_r(lobsSpaceData, OBS_ZTM,  ipro, ZT(col_getNumLev(lcolumnhr,'TH'),JN) )
       call obs_headSet_r(lobsSpaceData, OBS_ZTGM, ipro, ZTG(JN) )
       call obs_headSet_r(lobsSpaceData, OBS_ZLQM, ipro, EXP(ZLQ(col_getNumLev(lcolumnhr,'TH'),JN)) )
       call obs_headSet_r(lobsSpaceData, OBS_ZPS,  ipro, 100.d0*ZPS(JN) )
       call obs_headSet_i(lobsSpaceData, OBS_STYP, ipro, KSURF(JN) )
        IPRO = IPRO + 1
      END DO


      deallocate (ZTG,ZPS,ZTS,ZT,ZHT,ZLQ,xpres,stat= alloc_status(1))
      deallocate (BTOBSERR,BTOBS,BTCALC,RCAL_CLR,SFCTAU,stat= alloc_status(2))
      deallocate (ROBS,RCLD,TRANSM,EMI_SFC,stat= alloc_status(3))
      deallocate (TOEXT,ZHOEXT,SUNZA,stat= alloc_status(4))
      deallocate (ALBEDO,ICE,PCNT_WAT,PCNT_REG,stat= alloc_status(5))
      deallocate (KSURF,LTYPE,stat= alloc_status(6))
      deallocate (CLDFLAG,REJFLAG,LEV_START,stat= alloc_status(7))
      deallocate (NTOP_EQ,NTOP_BT,NTOP_RD,stat= alloc_status(8))
      deallocate (NTOP_CO2,NGOOD,stat= alloc_status(9))
      deallocate (PTOP_EQ,PTOP_BT,PTOP_RD,stat= alloc_status(10))
      deallocate (PTOP_CO2,FCLOUD_CO2,HE,stat= alloc_status(11))
      deallocate (ETOP,VTOP,ECF,VCF,stat= alloc_status(12))
      deallocate (MINP,FATE,stat= alloc_status(13))
      deallocate (PMIN,DTAUDP1,TAMPON,stat= alloc_status(14))
      deallocate (ICHREF,stat= alloc_status(15))
      deallocate (ASSIM_ALL,PTOP_MB,NTOP_MB,CFSUB,stat= alloc_status(16))
      deallocate (MAXWF,stat= alloc_status(17))
      deallocate (GNCLDFLAG,stat= alloc_status(18))
      deallocate (CORFLAG,stat= alloc_status(19))
      deallocate (ZVLEV,ZLEVMOD,stat= alloc_status(20))
      if( any(alloc_status /= 0) ) then
        write(*,*) ' crisqc : memory deallocation error'
        call abort3d('crisqc        ')
      end if

      END SUBROUTINE CRISQC
