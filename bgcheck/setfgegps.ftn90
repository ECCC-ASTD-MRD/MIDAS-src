      SUBROUTINE SETFGEGPS(lcolumn,lcolumng,lobsSpaceData)
!*
!***s/r  -SETFGEGPS Sets first-guess error for all GB-GPS ZTD observations
!*
!*Author  : S. Macpherson *ARMA/MSC  December 2004
!*
!*    -------------------
!**    Purpose: Set FGE for all GPS ZTD observations using
!*              adjoint of gpsztdop to get Jacobians
!*
      use MathPhysConstants_mod
      use bufr
      use columnData_mod
      use obsSpaceData_mod
      IMPLICIT NONE
#include "comlun.cdk"
#include "pardim.cdk"
#include "comdimo.cdk"
#include "comgem.cdk"
#include "cvcord.cdk"
#include "comgpsgb.cdk"
      type(struct_columnData) :: lcolumn,lcolumng
      type(struct_obs) :: lobsSpaceData
      REAL*8 ZTODEG
      REAL*8 ZLAT
      REAL*8 ZLON
      REAL*8 ZETA(LCOLUMNG%NLEV)
      REAL*8 ZTT (LCOLUMNG%NLEV)
      REAL*8 ZHU (LCOLUMNG%NLEV)
      REAL*8 ZGZ (LCOLUMNG%NLEV)
      REAL*8 ZTTB (LCOLUMNG%NLEV)
      REAL*8 ZHUB (LCOLUMNG%NLEV)
      REAL*8 ZP0
      REAL*8 ZP0B
      REAL*8 ZPT
      REAL*8 ZMT
      REAL*8 ZP0S
      REAL*8 ZTTS(LCOLUMNG%NLEV), ZHUS(LCOLUMNG%NLEV), ZGZS(LCOLUMNG%NLEV)

      REAL*8 ZOER, ZINC, ZHX, ZLEV
      REAL*8 ZDZ
      REAL*8 ZHXB, ZVAR

      REAL*8 ZJTT (LCOLUMNG%NLEV)
      REAL*8 ZJHU (LCOLUMNG%NLEV)
      REAL*8 ZJP0, ZLSUM

      INTEGER JF
      INTEGER IBEGIN  , ILAST
      INTEGER IBEGINOB, ILASTOB, JO
      INTEGER IDATYP, ITYP
      INTEGER IDATA   , IDATEND, JDATA
      INTEGER JL, JK

      LOGICAL  ASSIM, LLSHIFT, LLOK

      INTEGER NH, NH1
!C
!C     * 1.  Initializations
!C     *     ---------------
!C
      ZTODEG = 180.0 / RPI
!C
!C     *    .   1.1  Eta vector
!C     *    .        ----------
!C      
      DO JL = 1, LCOLUMNG%NLEV
         ZETA(JL) = VLEV(JL)
      ENDDO
!C
!C     Loop over all observation files (all observation types)
!C
      DO JF = 1, NFILES
!C
!C     *  Process only GPS observation files (family = GP)
!C
         IF ( CFAMTYP(JF).EQ.'GP' .AND. NBEGINTYP(JF).GT.0 ) THEN
            IBEGIN   = NBEGINTYP(JF)
            ILAST    = NENDTYP  (JF)
            IBEGINOB = obs_elem_i(lobsSpaceData,'OBS ',IBEGIN)
            ILASTOB  = obs_elem_i(lobsSpaceData,'OBS ',ILAST )
!C
!C     *     Loop over all GPS observations (locations) of the file
!C
            DO JO = IBEGINOB, ILASTOB
!C     
!C     *    .   Process only zenith delay data (codtyp 189 and BUFR_NEZD)
!C
               IDATYP = MOD(obs_elem_i(lobsSpaceData,'ITY ',JO),1000)
               IF ( IDATYP .EQ. 189 ) THEN
!C
!C                 Loop over data in the observations
!C
                  IDATA   = obs_elem_i(lobsSpaceData,'RLN ',JO)
                  IDATEND = obs_elem_i(lobsSpaceData,'NLV ',JO) + IDATA - 1
                  ASSIM = .FALSE.
!C
!C                 Scan for requested assimilations, and count them.
!C
                  NH = 0
                  DO JDATA= IDATA, IDATEND
                     ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
                     LLOK = ( (ITYP .EQ. BUFR_NEZD) .AND. (obs_elem_i(lobsSpaceData,'ASS ',JDATA) .EQ. 1) )
                     IF ( LLOK ) THEN
                        ASSIM = .TRUE.
                        NH = NH + 1
                     ENDIF
                  ENDDO
!C
!C     *           If assimilations are requested, apply the AD observation operator
!C
                  IF (ASSIM) THEN
!C     
!C     *        LR background profile and background errors at the observation location x :
!C
                     ZLAT = obs_elem_r4(lobsSpaceData,'LAT ',JO) * ZTODEG
                     ZLON = obs_elem_r4(lobsSpaceData,'LON ',JO) * ZTODEG
                     DO JL = 1, LCOLUMNG%NLEV
                       ZTTB(JL) = lcolumng%tt(JL,JO)
                       ZTT(JL)  = lcolumn%tt(JL,JO)
                       ZHUB(JL) = EXP(lcolumng%hu(JL,JO))
                       ZHU(JL)  = lcolumn%hu(JL,JO)
                       ZGZ(JL)  = lcolumng%gz(JL,JO)
                     ENDDO
                     ZP0B = lcolumng%ps(1,JO)
                     ZP0  = lcolumn%ps(1,JO)
                     ZPT  = lcolumng%RPPOBS(1,JO)
                     ZMT  = ZGZ(LCOLUMNG%NLEV)/GRAV
!C
!C     *        Call AD of ZTD observation operator to get Jacobians dH/dX
!C 
                     NH1 = 0
                     DO JDATA= IDATA, IDATEND
                        ITYP = obs_elem_i(lobsSpaceData,'VNM ',JDATA)
                        IF ( obs_elem_i(lobsSpaceData,'ASS ',JDATA).EQ.1 .AND. ITYP.EQ.BUFR_NEZD ) THEN
                           NH1 = NH1 + 1
!C
!C     *                    Observation error    SDERR
!c                           ZOER = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)
!C
                           ZHX = 1.0
!C
!C     *                    Observation height (m)
                           ZLEV = obs_elem_r8(lobsSpaceData,'PPP ',JDATA)

                      CALL GPSZTDOPAD(ZLAT,ZLON,ZLEV,ZETA,ZTTB,ZHUB,ZP0B,ZPT,ZMT,ZGZ,ZHXB,ZJTT,ZJHU,ZJP0,ZHX)

!C                          dH/dQ ---> dH/d(lnQ)
                           ZJHU(:) = ZHUB(:)*ZJHU(:)
!C
!C     *        Compute the background ZTD error (HBHt)
                           ZLSUM = 0.0
                           DO JL = 1, LCOLUMNG%NLEV
                             ZLSUM = ZLSUM +  (ZJTT(JL)*ZTT(JL))**2 + (ZJHU(JL)*ZHU(JL))**2 
                           ENDDO
                           ZLSUM = ZLSUM + (ZJP0*ZP0)**2
                           call obs_set_r4(lobsSpaceData,'FGE ',jdata,real(SQRT(ZLSUM)))

                           IF (JO.EQ.IBEGINOB .AND. NH1.LE.3) THEN
                            WRITE(NULOUT,'(A11,A9,3(1x,f7.2))')   &
                               'SETFGEGPS: ',obs_elem_c9(lobsSpaceData,'STID',JO),ZLAT,ZLON,ZLEV
                            WRITE(NULOUT,*) 'JL JACT JACQ FGE_T FGE_LQ'
                            DO JL = 1, LCOLUMNG%NLEV
                              WRITE(NULOUT,'(1X,I2,4(1x,E13.6))') JL,ZJTT(JL),ZJHU(JL)/ZHUB(JL),ZTT(JL), ZHU(JL)
                            ENDDO                         
                            WRITE(NULOUT,*) 'JACPS FGE_PS'
                            WRITE(NULOUT,'(2(1x,E13.6))') ZJP0, ZP0
                           ENDIF

                        ENDIF
                     ENDDO
                  ENDIF
               ENDIF
            ENDDO

         ENDIF

      ENDDO

      RETURN
      END SUBROUTINE SETFGEGPS
