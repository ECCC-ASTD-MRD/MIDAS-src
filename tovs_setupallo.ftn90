!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
SUBROUTINE TOVS_SETUPALLO(lobsSpaceData)
#if defined (DOC)
!
!  s/r TOVS_SETUPALLO : Memory allocation for the radiative transfer model
!                 variables.
!          (original name of routine: sutovalo)
!
!Author  : J. Halle *CMDA/AES Oct 1999
!    -------------------
!     Purpose: to allocate memory for the radiative transfer model variables.
!
! Revision:
!           S. Pellerin *ARMA/SMC May 2000
!            - Fix for F90 conversion
!           C. Chouinard *ARMA/SMC Aug 2000
!            - remove reference to nincrem in memory allocation
!           JM Belanger *CMDA/SMC!  aug 2000
!            - 32 bits conversion
!           J. Halle *CMDA/AES  dec 2000
!            - adapt to TOVS level 1b.
!           J. Halle CMDA/SMC May 2002
!            - adapt to RTTOV-7 code
!           J. Halle CMDA/SMC Feb 2003
!            - add codtyp for AMSUB (=181).
!           J. Halle CMDA/SMC Nov 2004
!            - adapt to RTTOV-8;
!            - convert to Fortran 90.
!           A. Beaulne CMDA/SMC June 2006
!            - modifications for AIRS
!            - allocation of ozone profiles
!           R. Sarrazin  CMDA   April 2008
!            - adapt to CSR
!           S. Heilliette
!            - adapt to IASI
!            - adapt to rttov 10.0 (october 2010)
!           S. Macpherson
!            - adapt to ATMS (codtyp 192)
!           S.  Heilliette
!            - adapt to CrIS (codtyp 193)
#endif

  Use tovs_mod  
  use hir_chans
  Use rttov_const, only : q_mixratio_to_ppmv
  use obsSpaceData_mod

  IMPLICIT NONE
!implicits
#include "comct0.cdk"
#include "partov.cdk"
#include "comtov.cdk"
#include "rttov_setup.interface"
#include "rttov_alloc_prof.interface"

  type(struct_obs) :: lobsSpaceData
  INTEGER :: VERBOSITY_LEVEL,ERR_UNIT=0

  Integer :: alloc_status(40)
  Integer :: setup_errorstatus ! setup return code

  INTEGER ::  ival, IPLATFORM, ISAT, INSTRUM, KRTID

  INTEGER ::  JO, IDATYP, J, JI, JK, NCMAX
  INTEGER ::  ISENS, NC, NL
  INTEGER ::  ICHN, NOSENSOR, INDXCHN
  INTEGER ::  ISRCHEQ
  INTEGER ::  NOBAIRS
  INTEGER ::  NOBIASI
  INTEGER ::  NOBCRIS
  INTEGER ::  ERRORSTATUS,ASW
  integer ::  index_header, index_body

  CHARACTER(len=2) :: SENSORTYPE

!     1. Determine the number of radiances to be assimilated.
!        Construct a list of channels for each sensor.
!        Construct a list of sensor number for each profile
!     .  ---------------------------------------------------
  alloc_status(:) = 0
  allocate (nchan(nsensors),                       stat= alloc_status(1))
  allocate (ichan(jpchus,nsensors),                stat= alloc_status(2))
  allocate (lsensor(obs_numheader(lobsSpaceData)), stat= alloc_status(3))
  allocate (lobsno (obs_numheader(lobsSpaceData)), stat= alloc_status(4))
  allocate (ltovsno(obs_numheader(lobsSpaceData)), stat= alloc_status(5))
  nchan(:)   = 0 
  ichan(:,:) = 0
  ltovsno(:) = 0

  NOBTOV = 0
  NOBAIRS = 0
  NOBIASI = 0
  NOBCRIS = 0

  ! loop over all header indices of the 'TO' family
                                        ! Set the header list
                                        ! (& start at the beginning of the list)
  call obs_set_current_header_list(lobsSpaceData,'TO')
  HEADER: do
     index_header = obs_getHeaderIndex(lobsSpaceData)
     if (index_header < 0) exit HEADER

     IDATYP = obs_headElem_i(lobsSpaceData,OBS_ITY,index_header)

     IF ( .not.  tvs_Is_idburp_tovs(IDATYP) ) cycle HEADER   ! Proceed to the next header_index

     NOBTOV = NOBTOV + 1
     IF ( tvs_Is_idburp_airs(IDATYP) ) NOBAIRS = NOBAIRS + 1
     IF ( tvs_Is_idburp_iasi(IDATYP) ) NOBIASI = NOBIASI + 1
     IF ( tvs_Is_idburp_cris(IDATYP) ) NOBCRIS = NOBCRIS + 1

!    Construct list of channels for each sensor:
!          map burp satellite info to RTTOV-7 platform and satellite.
     IVAL = obs_headElem_i(lobsSpaceData,OBS_SAT,index_header)
     CALL MAP_SAT(IVAL,IPLATFORM,ISAT)

!    map burp instrument info to RTTOV-7 instrument.
     IVAL = obs_headElem_i(lobsSpaceData,OBS_INS,index_header)
     CALL MAP_INSTRUM(IVAL,INSTRUM,SENSORTYPE)
!    find sensor number for this obs.
     DO KRTID = 1, NSENSORS
        IF ( IPLATFORM .EQ. PLATFORM  (KRTID) .AND. &
             ISAT      .EQ. SATELLITE (KRTID) .AND. &
             INSTRUM   .EQ. INSTRUMENT(KRTID)      ) THEN
           NOSENSOR = KRTID
           GO TO 110
        ENDIF
     ENDDO
     WRITE(*,FMT=9101)
9101 FORMAT(' TOVS_SETUPALLO: Invalid Sensor')
     CALL ABORT3D('TOVS_SETUPALLO        ')

110  lsensor(nobtov) = nosensor
     lobsno (nobtov) = index_header
     ltovsno (index_header)    = nobtov

     ! loop over all body indices (still in the 'TO' family)
                                        ! Set the body list
                                        ! (& start at the beginning of the list)
     call obs_set_current_body_list(lobsSpaceData, index_header)
     BODY: do 
        index_body = obs_getBodyIndex(lobsSpaceData)
        if (index_body < 0) exit BODY

        IF ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,index_body).EQ.1 ) THEN
           ICHN = NINT(obs_bodyElem_r(lobsSpaceData,OBS_PPP,index_body))
           ICHN = MAX(0,MIN(ICHN,JPCH+1))

           ICHN=ICHN-CHANOFFSET(NOSENSOR)

           INDXCHN = ISRCHEQ(ichan(:,nosensor),nchan(nosensor),ichn)
           if ( indxchn .eq. 0 ) then
              nchan(nosensor) = nchan(nosensor) + 1
              ichan(nchan(nosensor),nosensor) = ichn
           endif
        ENDIF
     ENDDO BODY
  ENDDO HEADER

! Sort list of channels in ascending order.Also force at least one channel, if none are found.

  do ji = 1, nsensors
    call isort(ichan(:,ji),nchan(ji))
    if ( nchan(ji) .eq. 0 ) then
        nchan(ji) = 1
        ichan(1,ji) = 1
    endif
  enddo

  write(*,*) ' TOVS_SETUPALLO: nobtov = ', nobtov

!-----------------------------------------------------------------------


!     3. Initialize TOVS radiance transfer model
!     .  ---------------------------------------

  IF     ( CRTMODL .EQ. 'RTTOV' ) THEN
     WRITE(*,FMT=9300)
  9300    FORMAT(//,10x,"-rttov_setup: initializing the TOVS radiative " &
                   ,"transfer model" )
     allocate (coefs(nsensors)              ,stat= alloc_status(6))
     allocate (list_sensors (3,nsensors)    ,stat= alloc_status(7))
     allocate (opts (nsensors)              ,stat= alloc_status(8))

  ! The levels of verbosity are
  !  0 = no error messages output
  !  1 = FATAL errors only printed. these are errors which
  !      mean that profile should be aborted (e.g. unphysical
  !      profile input)
  !  2 = WARNING errors only printed. Errors which can allow
  !      the computation to continue but the results may be
  !      suspect (e.g. profile outside basis profile limits)
  !  3 = INFORMATION messages which inform the user about
  !      the computation
     VERBOSITY_LEVEL = 3

     DO JK=1,NSENSORS
        LIST_SENSORS(1,JK) = PLATFORM  (JK)
        LIST_SENSORS(2,JK) = SATELLITE (JK)
        LIST_SENSORS(3,JK) = INSTRUMENT(JK)

        opts(JK)%ipcreg=-1         ! index of the required PC predictors... to see later
        opts(JK)%addinterp=.false. !use of internal profile interpolator (rt calculation on model levels)
        opts(JK)%addpc=.false.     ! to carry out principal component calculations 
        opts(JK)%addradrec=.false. ! to reconstruct radiances from principal components
        opts(JK)%addsolar=.false.  ! to model solar component in the near IR (2000 cm-1 et plus)
        opts(JK)%addaerosl=.false. ! to account for scattering due to aerosols
        opts(JK)%addclouds=.false. ! to account for scattering due to clouds
        opts(JK)%switchrad=.true.  ! to use brightness temperature (true) or radiance (false) units in AD routine
        opts(JK)%lgradp=.false.    ! allow tl/ad of user pressure levels
        opts(JK)%use_q2m=.false.   ! if true use of surface humidity (false for compatibility with the way rttov 8.7 was compiled)
        opts(JK)%apply_reg_limits=.false. ! if true application of profiles limits
        opts(JK)%verbose_checkinput_warnings=.false. ! useful for debuging the code should be turned off later
        opts(JK)%ozone_data=.true. ! profil d'ozone disponible
        opts(JK)%clw_data=.false.  ! profil d'eau liquide pas disponible
        opts(JK)%addrefrac=.false. ! to account for atmospheric refraction (useless???)
        opts(JK)%do_checkinput=.true. ! to check if input profiles are within absolute and regression limits
        opts(JK)%fastem_version=4  ! use fastem version 4 file (in the range 1-5 to force a specific version)

        setup_errorstatus = 0
! read coefficients using the list of required channels.
        CALL rttov_setup (&
             & setup_errorstatus,  & ! out 
             & err_unit,           & ! in
             & verbosity_level,        & ! in
             & opts(JK),               & ! in
             & coefs(JK),              & ! out
             & LIST_SENSORS(:,JK),     & ! in
             & ICHAN(1:nchan(JK),JK)         ) !in (opt) 
        if ( setup_errorstatus/=0 ) then
           Write(*,*) "Error during RTTOV setup !",JK,LIST_SENSORS(1:3,JK)
           CALL ABORT3D('TOVS_SETUPALLO           ')
        endif

        opts(JK)%co2_data = ( coefs(jk)%coef%nco2 > 0 )
        opts(JK)%n2o_data = ( coefs(jk)%coef%nn2o > 0 )
        opts(JK)%co_data  = ( coefs(jk)%coef%nco  > 0 )
        opts(JK)%ch4_data = ( coefs(jk)%coef%nch4 > 0 )

     ENDDO
    
     do jk = 1, nsensors
       if ( instrument(jk) /= 20 ) then
        nchan(jk) = coefs(jk)% coef %fmv_chn
        do j = 1,nchan(jk)
           ichan(j,jk) = coefs(jk)% coef %ff_ori_chn(j)
        enddo
       end if
     enddo

!    .   3.1 Validate RTTOV dimensions
!     .       -------------------------

!   Verify that all coefficient files have the same number of levels, since
!   the rest of the processing assumes this!

     nlevels1 =  coefs(1)%coef%nlevels
     do jk = 1, nsensors
        if ( coefs(jk)% coef %nlevels .ne. nlevels1 ) then
           WRITE(*,FMT=9311)
  9311     FORMAT(' TOVS_SETUPALLO: Number of levels not', &
                  ' identical in all coef files')
           CALL ABORT3D('TOVS_SETUPALLO           ')
        endif
     enddo

  ENDIF


!-----------------------------------------------------------------------


!     2. Memory allocation for radiative tranfer model variables
!     .  -----------------------------------------------------

!___ profiles

  allocate(profiles(NOBTOV)         , stat= alloc_status( 9))
  allocate(profiles_tl(NOBTOV)      , stat= alloc_status(10))
  allocate(profiles_ad(NOBTOV)      , stat= alloc_status(11))
  if (nconf==101) allocate(profiles_qc(NOBTOV) , stat= alloc_status(12))

  asw=1
  do jo = 1, NOBTOV
     isens = lsensor(jo)
     nl = coefs(isens)%coef % nlevels
     ! allocate model profiles atmospheric arrays with RTTOV levels dimension
     call rttov_alloc_prof(errorstatus,1,profiles(jo),nl, &
          opts(isens),asw,coefs=coefs(isens),init=.false. )
     if (errorstatus/=0) THEN
        Write(*,*) "Error in profiles allocation",errorstatus
        CALL ABORT3D('TOVS_SETUPALLO        ')
     endif

     ! allocate model tl profiles atmospheric arrays with RTTOV levels dimension
     call rttov_alloc_prof(errorstatus,1,profiles_tl(jo),nl, &
          opts(isens),asw,coefs=coefs(isens),init=.false. )
     if (errorstatus/=0) THEN
        Write(*,*) "Error in profiles_tl allocation",errorstatus
        CALL ABORT3D('TOVS_SETUPALLO        ')
     endif

     ! allocate model ad profiles atmospheric arrays with RTTOV levels dimension
     call rttov_alloc_prof(errorstatus,1,profiles_ad(jo),nl, &
          opts(isens),asw,coefs=coefs(isens),init=.false. )
     if (errorstatus/=0) THEN
        Write(*,*) "Error in profiles_ad allocation",errorstatus
        CALL ABORT3D('TOVS_SETUPALLO        ')
     endif

     ! allocate model additionnal profiles atmospheric arrays with RTTOV levels dimension
     if (nconf==101) allocate( profiles_qc(jo) % z  ( nl ) ,stat= alloc_status(26))
        
     If( any(alloc_status /= 0) ) then
         WRITE(*,FMT=9201)
  9201   FORMAT(' TOVS_SETUPALLO: Memory Allocation Error')
         CALL ABORT3D('TOVS_SETUPALLO        ')
     End If
  end do

!___ radiance by profile

  alloc_status(:) = 0
  allocate( radiance_d(NOBTOV) ,stat= alloc_status(1))
  if (nconf.ne.101) allocate( radiance_tl(NOBTOV),stat= alloc_status(2))
  if (nconf.ne.101) allocate( radiance_ad(NOBTOV),stat= alloc_status(3))

  do jo = 1, NOBTOV
     isens = lsensor(jo)
     nc = nchan(isens)
     nl = coefs(isens) % coef % nlevels
     !! allocate BT equivalent to total direct, tl and ad radiance output
     allocate( radiance_d(jo)  % bt  ( nc ) ,stat= alloc_status(4))
     if (nconf.ne.101) allocate( radiance_tl(jo) % bt  ( nc ) ,stat= alloc_status(5))
     if (nconf.ne.101) allocate( radiance_ad(jo) % bt  ( nc ) ,stat= alloc_status(6))
     radiance_d(jo)  % bt  ( : ) = 0.d0
     if (nconf.ne.101) radiance_tl(jo) % bt  ( : ) = 0.d0
     if (nconf.ne.101) radiance_ad(jo) % bt  ( : ) = 0.d0
     !! allocate clear/cloudy sky radiance/BT output and overcast radiance at given cloud top
     allocate( radiance_d(jo)  % clear  ( nc ) ,stat= alloc_status(7) )
     radiance_d(jo)  % clear  ( : ) = 0.d0

     if (nconf==101) then 
        allocate( radiance_d(jo)  % overcast  (nl-1,nc) ,stat= alloc_status(10))
        radiance_d(jo)  % overcast  (:,:) = 0.d0
     endif
    
     If( any(alloc_status /= 0) ) then
         WRITE(*,FMT=9201)
         CALL ABORT3D('TOVS_SETUPALLO        ')
     End If
  end do

!___ transmission by profile
  if (nconf==101) then
     alloc_status(:) = 0
     allocate( transmission_d(NOBTOV),stat= alloc_status(1))

     do jo = 1, NOBTOV
        isens = lsensor(jo)
        nc = nchan(isens)
        nl = coefs(isens) % coef % nlevels

     !! allocate transmittance from surface and from pressure levels
        allocate( transmission_d(jo)  % tau_total ( nc ) ,stat= alloc_status(2))
        allocate( transmission_d(jo)  % tau_levels(nl,nc) ,stat= alloc_status(3))

        If( any(alloc_status /= 0) ) then
           WRITE(*,FMT=9201)
           CALL ABORT3D('TOVS_SETUPALLO        ')
        End If
     end do
  endif
!___ emissivity by profile

  ncmax = 1

  do jo = 1, NOBTOV
     isens = lsensor(jo)
     nc = nchan(isens)
     if (nc>ncmax) ncmax=nc
  end do

  allocate( emissivity (ncmax,NOBTOV) ,stat=alloc_status(1))
       
  If( any(alloc_status /= 0) ) then
      WRITE(*,FMT=9201)
      CALL ABORT3D('TOVS_SETUPALLO        ')
  End If

!___ new variables to add in airs burp file

  DO KRTID = 1, NSENSORS

    IF ( PLATFORM(KRTID) == 10 .AND. &
         SATELLITE (KRTID) == 2 .AND. &
         INSTRUMENT(KRTID) == 16 ) THEN

       if (nconf==101) allocate ( avhrr_bgck(NOBIASI), stat= alloc_status(2))
       If( alloc_status(2)/=0 ) then
          WRITE(*,FMT=9201)
          CALL ABORT3D('TOVS_SETUPALLO        ')
       End If

       EXIT

    END IF

 END DO

END SUBROUTINE TOVS_SETUPALLO
