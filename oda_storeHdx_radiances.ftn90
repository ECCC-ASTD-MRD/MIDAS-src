!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
subroutine oda_storeHdx_radiances(lobsSpaceData)
#if defined (doc)
  !
  !
  !Purpose:
  !Store Hdx radiances in ROBDATA8(OBS_OMA,*)
  !
  !author        : Simon Pellerin, ARMA, January 2009
  !                Based on subroutine written by J. Halle
  !
  !revision :      Sylvain Heilliette:
  !                 add IASI data (codtyp 186)
#endif
  use mod_tovs
  use obsSpaceData_mod

  implicit none
  !implicits
#include "partov.cdk"
#include "comtov.cdk"

  type(struct_obs) :: lobsSpaceData
  integer :: isens, indxchn, indxtovs

  integer j, i
  integer jdata, idatyp
  integer ichn
  integer kfailtot

  integer :: index_header, index_body

  integer  isrcheq
  external isrcheq
  external abort3d

  if(NOBTOV.eq.0) return    ! exit if there are no tovs data

  !     1.  Computation of (hx - z)/sigma for tovs data only
  !     .   ------------------------------------------------

  kfailtot = 0

  ! loop over all header indices of the 'TO' family
                                        ! Set the header list
                                        ! (& start at the beginning of the list)
  call obs_set_current_header_list(lobsSpaceData,'TO')
  HEADER: do
     index_header = obs_getHeaderIndex(lobsSpaceData)
     if (index_header < 0) exit HEADER

     !     .  1.1  Extract general information for this observation point
     !     .       ------------------------------------------------------

     !      process  only radiance data to be assimilated?
     !      (data type=[164,168,180,181,182,183,185,186])

     idatyp = obs_headElem_i(lobsSpaceData,OBS_ITY,index_header)
     if ( idatyp .ne. 164 .and.  &
          idatyp .ne. 168 .and.  &
          idatyp .ne. 180 .and.  &
          idatyp .ne. 181 .and.  &
          idatyp .ne. 182 .and.  &
          idatyp .ne. 183 .and.  &
          idatyp .ne. 185 .and.  &
          idatyp .ne. 186          ) then
        cycle HEADER                    ! Proceed to the next HEADER
     endif

     indxtovs = ltovsno(index_header)
     if ( indxtovs .eq. 0 ) then
        write(*,fmt=9203)
9203    format(' tovs_calc_jo_tl: error with indxtovs')
        call abort3d('tovs_calc_jo_tl ')
     endif

     if (rttov_errorstatus(indxtovs) .lt. 20   ) then
        isens = lsensor(indxtovs)

        ! loop over all body indices (still in the 'TO' family)
                                        ! Set the body list
                                        ! (& start at the beginning of the list)
        call obs_set_current_body_list(lobsSpaceData, index_header)
        BODY: do 
           index_body = obs_getBodyIndex(lobsSpaceData)
           if (index_body < 0) exit BODY

           if ( obs_bodyElem_i(lobsSpaceData,OBS_ASS,index_body).eq.1 ) then
              ichn = nint(obs_bodyElem_r(lobsSpaceData,OBS_PPP,index_body))
              ichn    = max(0,min(ichn,jpch+1))
              if(idatyp.ne.183 .and. idatyp.ne.186) ichn=ichn-chanoffset(isens)
              indxchn = isrcheq (ichan(:,isens),nchan(isens),ichn)
              if ( indxchn .eq. 0 ) then
                 write(*,fmt=9202)
9202             format(' tovs_calc_jo_tl: error with channel number')
                 call abort3d('tovs_calc_jo_tl  ')
              endif
              call obs_bodySet_r(lobsSpaceData,OBS_OMA,index_body, &
                              radiance_tl (indxtovs) % out(indxchn))
              if ( ldbgtov ) then
                 write(*,'(a,i4,2f8.2)') ' ichn,sim,obs= ', &
                      ichn,  radiance_tl (indxtovs) % out(indxchn), &
                      obs_bodyElem_r(lobsSpaceData,OBS_VAR,index_body)
              endif

           endif
        enddo BODY
     else
        kfailtot = kfailtot + 1
     endif ! rttov_errorstatus
  enddo HEADER

end subroutine oda_storeHdx_radiances
