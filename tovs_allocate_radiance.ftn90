!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
subroutine tovs_allocate_radiance(pradiance,knchannels,knlevels,knbtout)
#if defined (doc)
!
!**s/r tovs_allocate_radiance  - Memory allocation for derived type radiance
!
!
!author        : j. halle *cmda/aes  june 7, 2005
!
!revision 001  : 
!    -------------------
!     purpose:
!
!arguments
!     pradiance  : array of derived type radiance
!     knchannels : number of channels
!     knlevels   : number of levels
!     knbtout    : number of brightness temperatures
!
#endif
  use mod_tovs

  implicit none

  integer :: knchannels, knlevels, knbtout
  integer :: istat(14)

  type(radiance_type) :: pradiance

  istat(:) = 0

  allocate( pradiance % clear    ( knchannels )           ,stat= istat(1))
  allocate( pradiance % cloudy   ( knchannels )           ,stat= istat(2))
  allocate( pradiance % total    ( knchannels )           ,stat= istat(3))
  allocate( pradiance % bt       ( knchannels )           ,stat= istat(4))
  allocate( pradiance % bt_clear ( knchannels )           ,stat= istat(5))
  allocate( pradiance % upclear  ( knchannels )           ,stat= istat(6))
  allocate( pradiance % dnclear  ( knchannels )           ,stat= istat(7))
  allocate( pradiance % reflclear( knchannels )           ,stat= istat(8))

  allocate( pradiance % overcast ( knlevels, knchannels ) ,stat= istat(9))
  allocate( pradiance % downcld  ( knlevels, knchannels ) ,stat= istat(10))

  allocate( pradiance % out      ( knbtout )              ,stat= istat(11))
  allocate( pradiance % out_clear( knbtout )              ,stat= istat(12))
  allocate( pradiance % total_out( knbtout )              ,stat= istat(13))
  allocate( pradiance % clear_out( knbtout )              ,stat= istat(14))

  if( any(istat /= 0) ) then
     write(*,*) ' tovs_allocate_radiance: istat = ', istat(:)
     write(*,'("  tovs_allocate_radiance: memory allocation error")')
     call abort3d('tovs_allocate_radiance')
  end if

  return

end subroutine tovs_allocate_radiance
