!***************************************************************
! Name  : procs_topo
! Author:  Bin He     *ARMA/MSC 
! Date  :  Nov. 2005 
! Purpose: Declare MPI related parameters used across the model. 
!  
!***************************************************************
MODULE mpi
   INTEGER :: mpi_myid,mpi_nprocs
   INTEGER :: mpi_npex,mpi_npey,mpi_myidx,mpi_myidy
   INTEGER :: mpi_myLatBeg,mpi_myLonBeg,mpi_myLatHalfBeg
   INTEGER :: mpi_myLatEnd,mpi_myLonEnd,mpi_myLatHalfEnd

 CONTAINS

!***************************************************************
! Name  : mpi_init
! Author:  Bin He     *ARMA/MSC
! Date  :  Nov. 2005
! Purpose: conduct RPN_COMM Initialization . 
!
!***************************************************************
 SUBROUTINE mpi_init()
 IMPLICIT NONE
 integer :: mythread,numthread,omp_get_thread_num,omp_get_num_threads

 ! 1. Initilize MPI . 
 mpi_npex=0
 mpi_npey=0
 CALL rpn_comm_init(mpi_getptopo,mpi_myid,mpi_nprocs,mpi_npex,mpi_npey)
 CALL rpn_comm_mype(mpi_myid,mpi_myidx,mpi_myidy)

 mpi_myLatBeg=0
 mpi_myLatEnd=0
 mpi_myLonBeg=0
 mpi_myLonEnd=0
 mpi_myLatHalfBeg=0
 mpi_myLatHalfEnd=0

!$OMP PARALLEL PRIVATE(numthread,mythread)
 mythread=omp_get_thread_num()
 numthread=omp_get_num_threads()
 if(mythread.eq.0) write(*,*) 'NUMBER OF THREADS=',numthread     
!$OMP END PARALLEL

 END SUBROUTINE mpi_init
 
 SUBROUTINE mpi_getptopo(pex,pey)
 IMPLICIT NONE
 INTEGER,INTENT(OUT) :: pex,pey

 INTEGER :: ierr
 INTEGER :: npex,npey
 NAMELIST /ptopo/npex,npey
 INTEGER :: unnmlist,fnom  
 CHARACTER(len=10) :: fnptopo

 unnmlist=555
 npex=1
 npey=1
 fnptopo='ptopo_nml'
 ! OPEN(UNIT=nmlist,FILE='./ptopo_nml',STATUS='OLD',ACTION='READ',IOSTAT=ierr)
 ierr=FNOM(unnmlist,fnptopo,'FTN+SEQ',0)
 if(ierr /= 0) then
   write(*,*) 'Can not Open file ptopo_nml! Abort!'
   call flush(6)
   call qqexit(1)
 endif
 READ(unnmlist,NML=ptopo)
 CLOSE(unnmlist)
 pex=npex
 pey=npey

 END SUBROUTINE mpi_getptopo 

END MODULE mpi
