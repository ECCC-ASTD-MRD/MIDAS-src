module mpi_mod
  implicit none
  save
  private

  ! public variables
  public :: mpi_myid,mpi_nprocs,mpi_myidx,mpi_myidy
  ! public procedures
  public :: mpi_init,mpi_getptopo

  integer :: mpi_myid   = 0
  integer :: mpi_nprocs = 0
  integer :: mpi_myidx  = 0
  integer :: mpi_myidy  = 0

  contains

  subroutine mpi_init()
    implicit none
    integer :: mythread,numthread,omp_get_thread_num,omp_get_num_threads
    integer :: npex,npey

    ! Initilize MPI
    npex=0
    npey=0
    call rpn_comm_init(mpi_getptopo,mpi_myid,mpi_nprocs,npex,npey)
    if(mpi_nprocs.lt.1) then
      mpi_nprocs=1
      mpi_myid=0
      mpi_myidx=0
      mpi_myidy=0
    else
      call rpn_comm_mype(mpi_myid,mpi_myidx,mpi_myidy)
    endif

!$OMP PARALLEL PRIVATE(numthread,mythread)
    mythread=omp_get_thread_num()
    numthread=omp_get_num_threads()
    if(mythread.eq.0) write(*,*) 'mpi_init: NUMBER OF THREADS=',numthread     
!$OMP END PARALLEL

  end subroutine mpi_init


  subroutine mpi_getptopo(npex,npey)
    implicit none
    integer,intent(out) :: npex,npey

    integer :: ierr
    namelist /ptopo/npex,npey
    integer :: nulnam,fnom,fclos

    npex=1
    npey=1

    nulnam=0
    ierr=fnom(nulnam,'ptopo_nml','FTN+SEQ+R/O',0)
    if(ierr.ne.0) call abort3d('mpi_getptopo: Error opening file ptopo_nml')
    read(nulnam,nml=ptopo,iostat=ierr)
    if(ierr.ne.0) call abort3d('mpi_getptopo: Error reading namelist')
    write(*,nml=ptopo)
    ierr=fclos(nulnam)

  end subroutine mpi_getptopo 

end module mpi_mod
