!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
SUBROUTINE BGCK_IR_SETUP(lobsSpaceData)
#if defined (DOC)
!
!  s/r BGCK_IR_SETUP : Memory allocation for the Hyperspectral Infrared
!                background check variables
!          (original name of routine: sutovalo)
!
! Revision:

!           S.  Heilliette
!            - creation from tovs_setup_allo  December 2013
#endif

  Use tovs_mod  
  use obsSpaceData_mod

  IMPLICIT NONE
!implicits

  type(struct_obs) :: lobsSpaceData

  Integer :: alloc_status(2)

  INTEGER :: KRTID
  INTEGER ::  JO, IDATYP,NCMAX
  INTEGER ::  ISENS, NC, NL
  INTEGER ::  ICHN
  INTEGER ::  NOBIASI
  integer ::  index_header

!     1. Determine the number of IASI profiles to be assimilated.
!     .  ---------------------------------------------------
 

  NOBIASI = 0

  ! loop over all header indices of the 'TO' family
  ! Set the header list
  ! (& start at the beginning of the list)
  call obs_set_current_header_list(lobsSpaceData,'TO')
  HEADER: do
     index_header = obs_getHeaderIndex(lobsSpaceData)
     if (index_header < 0) exit HEADER

     IDATYP = obs_headElem_i(lobsSpaceData,OBS_ITY,index_header)
     
     IF ( .not.  tvs_Is_idburp_tovs(IDATYP) ) cycle HEADER   ! Proceed to the next header_index

     IF ( tvs_Is_idburp_iasi(IDATYP) ) NOBIASI = NOBIASI + 1

  ENDDO HEADER

  write(*,*) ' BGCK_IR_SETUP: nobiasi = ', nobiasi
!-----------------------------------------------------------------------

!     2. Memory allocation for background check related variables
!     .  -----------------------------------------------------

  allocate(profiles_qc(NOBTOV) , stat= alloc_status(1))
  If( alloc_status(1) /= 0) then
     WRITE(*,FMT=9201)
  9201   FORMAT(' BGCK_IR_SETUP: Memory Allocation Error')
     CALL ABORT3D('BGCK_IR_SETUP')
  End If

  do jo = 1, NOBTOV
     isens = lsensor(jo)
     nl = coefs(isens)%coef % nlevels
     allocate( profiles_qc(jo) % z  ( nl ) ,stat= alloc_status(1))
        
     If( alloc_status(1)/=0 ) then
         WRITE(*,FMT=9201)
         CALL ABORT3D('BGCK_IR_SETUP')
     End If
  end do

!___ radiance by profile

  alloc_status(:) = 0


  do jo = 1, NOBTOV
     isens = lsensor(jo)
     nc = nchan(isens)
     nl = coefs(isens) % coef % nlevels

     allocate( radiance_d(jo)  % overcast  (nl-1,nc) ,stat= alloc_status(1))
     radiance_d(jo)  % overcast  (:,:) = 0.d0
     
    
     If( alloc_status(1) /= 0 ) then
         WRITE(*,FMT=9201)
         CALL ABORT3D('BGCK_IR_SETUP')
     End If
  end do

!___ transmission by profile

  alloc_status(:) = 0
  allocate( transmission_d(NOBTOV),stat= alloc_status(1))

  do jo = 1, NOBTOV
     isens = lsensor(jo)
     nc = nchan(isens)
     nl = coefs(isens) % coef % nlevels

     !! allocate transmittance from surface and from pressure levels
     allocate( transmission_d(jo)  % tau_total ( nc ) ,stat= alloc_status(1))
     allocate( transmission_d(jo)  % tau_levels(nl,nc) ,stat= alloc_status(2))

     If( any(alloc_status /= 0) ) then
        WRITE(*,FMT=9201)
        CALL ABORT3D('BGCK_IR_SETUP')
     End If
  end do


  DO KRTID = 1, NSENSORS

    IF ( PLATFORM(KRTID) == 10 .AND. &
         SATELLITE (KRTID) == 2 .AND. &
         INSTRUMENT(KRTID) == 16 ) THEN

       allocate ( avhrr_bgck(NOBIASI), stat= alloc_status(1))

       If( alloc_status(1)/=0 ) then
          WRITE(*,FMT=9201)
          CALL ABORT3D('BGCK_IR_SETUP')
       End If

       EXIT

    END IF

 END DO

END SUBROUTINE BGCK_IR_SETUP
