!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      subroutine suinnov(lcolumnhr,lcolumng,lobsSpaceData)
*
***s/r suinnov  - Initialise Observation Innovations.
*
*
*Author  : Luc Fillion - 28 Mar 2008.
*Revision:
*     L. Fillion - ARMA/EC - 22 May 2008 - Upgrade to v_10_1_1.
*     S. Macpherson -ARMA/MRD   Aug 2008
*         - Add ground-based GPS family "GP"
*     S. Macpherson -ARMA/MRD   Sep 2009
*         - Add ground-based GPS family "GP"
*     Bin He   -ARMA/MRD      Feb. 2010 
*         - Implemented MPI to 3DVAR      
*    -------------------
*
      use minimization_mod
      use obsSpaceData_mod
      use columnData_mod
      IMPLICIT NONE
#include "comct0.cdk"
#include "comfilt.cdk"
#include "comgpsgb.cdk"
c
      type(struct_columnData) :: lcolumnhr,lcolumng
      type(struct_obs) :: lobsSpaceData
c
      type(struct_vco), pointer :: vco_trl
      real*8 zjo,zjoraob,zjosatwind,zjosurfc
      real*8 zjosfcsf,zjosfcua,zjotov,zjoairep,zjosfcsc,zjoprof
      real*8 zjogpsro,zjogpsgb,zjosfcgp
c
      write(*,*) '--Starting subrouting suinnov--'
c
c     Reject observed elements too far below the surface. Pressure values
c     for elements slightly below the surface are replaced by the surface
c     pressure values of the trial field.
c
c     GB-GPS (met and ZTD) observations are processed in SOBSSFC
c
        IF (LTOPOFILT) THEN
          write(*,*)' *****************************************'
          write(*,*)' *    PREPROC PREPROC PREPROC PREPROC    *'
          write(*,*)' *                                       *'
          write(*,*)' *    FILTER OF OBS DUE TO TOPOGRAPHY    *'
          write(*,*)' *                                       *'
          write(*,*)' *****************************************'
          call sobs_all(lcolumnhr,lobsSpaceData)
        ELSE
          write(*,*)' *****************************************'
          write(*,*)' *    PREPROC PREPROC PREPROC PREPROC    *'
          write(*,*)' *                                       *'
          write(*,*)' * NO FILTER OF OBS DUE TO TOPOGRAPHY    *'
          write(*,*)' *                                       *'
          write(*,*)' *****************************************'
        ENDIF

        IF(NCONF .EQ. 141) CALL SFCWNDZAP(lobsSpaceData)
c
c     Find interpolation layer in model profiles 
c
      CALL VOBSLYRS(lcolumnhr,lobsSpaceData)
c
c
c------ Calculate the normalized inovations (Z - H(X))/sigma
c       and place the results in CMA at OBS_OMA references
C
C        RAOBS
C------------------------------
!
      call tmg_start(48,'NL_OBS_OPER')
      ZJORAOB = 0.0d0
      CALL DOBSPPP(ZJORAOB,'UA',lcolumnhr,lobsSpaceData)
C
C        AIREPS
C--------------------------------
      ZJOAIREP=0.0D0
      CALL DOBSPPP(ZJOAIREP,'AI',lcolumnhr,lobsSpaceData)
C
C        SATWINDS
C--------------------------------
      ZJOSATWIND=0.0D0
      CALL DOBSPPP(ZJOSATWIND,'SW',lcolumnhr,lobsSpaceData)
!
      ZJOSURFC=0.0D0
      ZJOSFCSF=0.0D0
      ZJOSFCUA=0.0D0
      ZJOSFCSC=0.0D0
      ZJOSFCGP=0.0D0
!
C
C        SURFACE (SF, UA, SC AND GP FAMILIES)
C-------------------------------
      CALL DOBSSFC(ZJOSFCSF,'SF',lcolumnhr,lobsSpaceData)
      CALL DOBSSFC(ZJOSFCUA,'UA',lcolumnhr,lobsSpaceData)
      CALL DOBSSFC(ZJOSFCSC,'SC',lcolumnhr,lobsSpaceData)
      CALL DOBSSFC(ZJOSFCGP,'GP',lcolumnhr,lobsSpaceData)
      ZJOSURFC = ZJOSFCUA + ZJOSFCSF + ZJOSFCSC + ZJOSFCGP
C
C        TOVS - RADIANCE
C-------------------------------
      ZJOTOV=0.0D0
      CALL TOVS_OBS ('HR',ZJOTOV,lcolumnhr,lobsSpaceData)
C
C        PROFILER
C------------------------------
      ZJOPROF = 0.0d0
      CALL DOBSZZZ(ZJOPROF,'PR',lcolumnhr,lobsSpaceData)
C
C        GPS - RADIO OCCULTATION
C-------------------------------
      ZJOGPSRO=0.0D0
      CALL SETERRGPSRO(lcolumnhr,lobsSpaceData)
      CALL FILTERGPSRO(lcolumnhr,lobsSpaceData)
      CALL DOBSGPSRO(ZJOGPSRO,lcolumnhr,lobsSpaceData)
C
C        GPS - GROUND-BASED ZENITH DELAY
C-------------------------------
C
      ZJOGPSGB=0.0D0
!
!nwa Only in non staggerd mode 
!ccc According to Stephen MacPherson  
!ccc There are no GROUND-BASED ZENITH DELAY obs used in the global analysis
!ccc They are being tested in the regional LAM analysis
!ccc So DOBSGPSGB was not adapted to staggered at this time 
!ccc (Jan 18,2011)
      vco_trl => col_getVco(lcolumnhr)
      if(vco_trl%iversion .eq. 5001 ) then
        CALL DOBSGPSGB(ZJOGPSGB,lcolumnhr,lobsSpaceData)
      endif

      if ( ZJOGPSGB .gt. 0.0D0 ) then

C     Options to fix/adjust model ZTD to observation height and
C     assimilate GPS met data
C
          write(*,*)' '
          write(*,*)' *****************************************'
          write(*,*)' *    PREPROC PREPROC PREPROC PREPROC    *'
          write(*,*)' *        GB-GPS OBSERVATIONS            *'
          write(*,*)' * DZ ADJUSTMENT IN GPSZTDOP IF DZ>DZMIN *'
          write(*,*)' *                                       *'
          write(*,*)' *****************************************'
          write(*,*) ' '
          write(*,*) 'DZMIN, DZMAX = ', DZMIN, DZMAX
          write(*,*) 'NJLEVP = ', NJLEVP
          write(*,*) ' '
C
          IF (LASSMET) THEN
            write(*,*)' '
            write(*,*)' *****************************************'
            write(*,*)' *    PREPROC PREPROC PREPROC PREPROC    *'
            write(*,*)' *          GB-GPS OBSERVATIONS          *'
            write(*,*)' *     GPS MET DATA ARE ASSIMILATED      *'
            write(*,*)' *                                       *'
            write(*,*)' *****************************************'
            write(*,*) 'YSFERRWGT = ', YSFERRWGT
            write(*,*) 'YZDERRWGT = ', YZDERRWGT
            write(*,*) ' '
          ELSE
            write(*,*)' '
            write(*,*)' *****************************************'
            write(*,*)' *    PREPROC PREPROC PREPROC PREPROC    *'
            write(*,*)' *          GB-GPS OBSERVATIONS          *'
            write(*,*)' *   GPS MET DATA ARE NOT ASSIMILATED    *'
            write(*,*)' *                                       *'
            write(*,*)' *****************************************'
            write(*,*) 'YZDERRWGT = ', YZDERRWGT
            write(*,*) ' '
          ENDIF
C
          IF (YZTDERR .LT. 0.0) THEN
            write(*,*)' '
            write(*,*)' *****************************************'
            write(*,*)' *    PREPROC PREPROC PREPROC PREPROC    *'
            write(*,*)' *          GB-GPS OBSERVATIONS          *'
            write(*,*)' *    ZTD OBSERVATION ERROR FROM FERR    *'
            write(*,*)' *                                       *'
            write(*,*)' *****************************************'
          ELSE IF (YZTDERR .GT. 0.0) THEN
            write(*,*)' '
            write(*,*)' *****************************************'
            write(*,*)' *    PREPROC PREPROC PREPROC PREPROC    *'
            write(*,*)' *          GB-GPS OBSERVATIONS          *'
            write(*,*)' *     ZTD OBSERVATION ERROR IS FIXED    *'
            write(*,*)' *                                       *'
            write(*,*)' *****************************************'
            write(*,*)' '
            write(*,*)'YZTDERR (mm) = ', YZTDERR*1000.
          ELSE
            write(*,*)' '
            write(*,*)' *****************************************'
            write(*,*)' *    PREPROC PREPROC PREPROC PREPROC    *'
            write(*,*)' *          GB-GPS OBSERVATIONS          *'
            write(*,*)' *   ZTD OBSERVATION ERROR IS FROM ZTD   *'
            write(*,*)' *   USING SD(O-P) STATS (REGRESSION)    *'
            write(*,*)' *                                       *'
            write(*,*)' *****************************************'
            write(*,*)' '
          ENDIF
C
C-------- FILTER GPS DATA (EXPERIMENTAL)  --------------------
C
          IF (L1GPSOBS) THEN 
            write(*,*)' '
            write(*,*)' *****************************************'
            write(*,*)' *    PREPROC PREPROC PREPROC PREPROC    *'
            write(*,*)' *          GB-GPS OBSERVATIONS          *'
            write(*,*)' *                                       *'
            write(*,*)' *     --- ONE OBSERVATION MODE ---      *'
            write(*,*)' *                                       *'
            write(*,*)' *****************************************'
            write(*,*)' ' 
            write(*,*)' CGPSSTN = ', CGPSSTN
            write(*,*)' '
            CALL SUGPSGB
          ENDIF
c
      endif
c
      call tmg_stop(48)
c
c
C=======================================================================
      ZJO =  ZJORAOB + ZJOAIREP + ZJOSATWIND +
     $     ZJOSURFC + ZJOTOV + ZJOPROF + ZJOGPSRO + ZJOGPSGB
C=======================================================================

      write(*,'(a15,G12.6)') 'JORAOB= ',ZJORAOB
      write(*,'(a15,G12.6)') 'JOAIREP= ',ZJOAIREP
      write(*,'(a15,G12.6)') 'JOSURFC= ',ZJOSURFC
      write(*,'(10X,a15,G12.6)') 'JOSFCSF= ',ZJOSFCSF
      write(*,'(10X,a15,G12.6)') 'JOSFCUA= ',ZJOSFCUA
      write(*,'(10X,a15,G12.6)') 'JOSFCSC= ',ZJOSFCSC
      write(*,'(10X,a15,G12.6)') 'JOSFCGP= ',ZJOSFCGP
      write(*,'(a15,G12.6)') 'JOTOV= ',ZJOTOV
      write(*,'(a15,G12.6)') 'JOSATWIND= ',ZJOSATWIND
      write(*,'(a15,G12.6)') 'JOPROF= ',ZJOPROF
      write(*,'(a15,G12.6)') 'JOGPSRO= ',ZJOGPSRO
      write(*,'(a15,G12.6)') 'JOGPSGB= ',ZJOGPSGB
c      write(*,'(a15,G12.6)') 'Total Jo = ',ZJO

c
c------ Calculate the normalized innovations (Z - H(X))/sigma
c       for ln q for atmospheric and surface obs.
C
      CALL DHUPPP('UA',lcolumnhr,lobsSpaceData)
      CALL DHUPPP('AI',lcolumnhr,lobsSpaceData)
      CALL DHUSFC('UA',lcolumnhr,lobsSpaceData)
      CALL DHUSFC('SF',lcolumnhr,lobsSpaceData)
      CALL DHUSFC('GP',lcolumnhr,lobsSpaceData)
C
c     Find interpolation layer in model profiles 
c
      CALL VOBSLYRS(lcolumng,lobsSpaceData)
c
      IF (LVARQC) THEN
        CALL SUASYM2(lobsSpaceData)
      endif
c
      RETURN
      END
