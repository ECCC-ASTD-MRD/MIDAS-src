!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!
      subroutine suinnov(lcolumng,lcolumnhr,lobsSpaceData)
*
***s/r suinnov  - Initialise Observation Innovations.
*
*
*Author  : Luc Fillion - 28 Mar 2008.
*Revision:
*     L. Fillion - ARMA/EC - 22 May 2008 - Upgrade to v_10_1_1.
*     S. Macpherson -ARMA/MRD   Aug 2008
*         - Add ground-based GPS family "GP"
*     S. Macpherson -ARMA/MRD   Sep 2009
*         - Add ground-based GPS family "GP"
*     Bin He   -ARMA/MRD      Feb. 2010 
*         - Implemented MPI to 3DVAR
*     S. Macpherson -ARMA/MRD   Dec 2012 - Jan 2013
*         - moved "WRITE"s for GB-GPS options to sugpsgb.ftn
*         - DOBGPSGB is now ready for GEM-4 staggered grid
*         - added CALL SETERRGPSGB(lobsSpaceData,lgpdata) to set ZTD errors
*         - NEW: >>if (lgpdata)<< CALL DOBSGPSGB
*
*    -------------------
*
      use topLevelControl_mod
      use minimization_mod
      use obsSpaceData_mod
      use columnData_mod
      use filterObs_mod
      use timeCoord_mod
      IMPLICIT NONE
c
      type(struct_columnData) :: lcolumnhr,lcolumng
      type(struct_obs) :: lobsSpaceData
c
      type(struct_vco), pointer :: vco_trl
      real*8 zjo,zjoraob,zjosatwind,zjosurfc
      real*8 zjosfcsf,zjosfcua,zjotov,zjoairep,zjosfcsc,zjoprof
      real*8 zjogpsro,zjogpsgb,zjosfcgp
      integer :: ierr
      
      logical lgpdata
c
      write(*,*) '--Starting subrouting suinnov--'

      write(*,*) 'PRDATABIN: Before filtering done in SUINNOV'
      call prdatabin(lobsSpaceData,tim_nstepobs)
c
c     Reject observed elements too far below the surface. Pressure values
c     for elements slightly below the surface are replaced by the surface
c     pressure values of the trial field.
c
c     GB-GPS (met and ZTD) observations are processed in s/r filt_topoSFC (in filterobs_mod.ftn90)
c
      call filt_topo(lcolumnhr,lobsSpaceData)
c
c     Remove surface station wind observations
c
      IF( top_AnalysisMode() ) CALL SFCWNDZAP(lobsSpaceData)
c
c     Find interpolation layer in model profiles 
c
      CALL VOBSLYRS(lcolumnhr,lobsSpaceData)
c
c
c------ Calculate the innovations Y - H(Xb) and place
c       the result in obsSpaceData in OBS_OMP column
C
C        RAOBS
C------------------------------
!
      call tmg_start(48,'NL_OBS_OPER')
      ZJORAOB = 0.0d0
      CALL DOBSPPP(ZJORAOB,'UA',lcolumnhr,lobsSpaceData)
C
C        AIREPS
C--------------------------------
      ZJOAIREP=0.0D0
      CALL DOBSPPP(ZJOAIREP,'AI',lcolumnhr,lobsSpaceData)
C
C        SATWINDS
C--------------------------------
      ZJOSATWIND=0.0D0
      CALL DOBSPPP(ZJOSATWIND,'SW',lcolumnhr,lobsSpaceData)
!
      ZJOSURFC=0.0D0
      ZJOSFCSF=0.0D0
      ZJOSFCUA=0.0D0
      ZJOSFCSC=0.0D0
      ZJOSFCGP=0.0D0
!
C
C        SURFACE (SF, UA, SC AND GP FAMILIES)
C-------------------------------
      CALL DOBSSFC(ZJOSFCSF,'SF',lcolumnhr,lobsSpaceData)
      CALL DOBSSFC(ZJOSFCUA,'UA',lcolumnhr,lobsSpaceData)
      CALL DOBSSFC(ZJOSFCSC,'SC',lcolumnhr,lobsSpaceData)
      CALL DOBSSFC(ZJOSFCGP,'GP',lcolumnhr,lobsSpaceData)
      ZJOSURFC = ZJOSFCUA + ZJOSFCSF + ZJOSFCSC + ZJOSFCGP
C
C        TOVS - RADIANCE
C-------------------------------
      ZJOTOV=0.0D0
      CALL TOVS_OBS('HR',ZJOTOV,lcolumnhr,lobsSpaceData,OBS_VAR,OBS_OMP)
C
C        PROFILER
C------------------------------
      ZJOPROF = 0.0d0
      CALL DOBSZZZ(ZJOPROF,'PR',lcolumnhr,lobsSpaceData)
C
C        GPS - RADIO OCCULTATION
C-------------------------------
      ZJOGPSRO=0.0D0
      CALL FILTERGPSRO(lcolumnhr,lobsSpaceData)
      CALL SETERRGPSRO(lcolumnhr,lobsSpaceData)
      CALL DOBSGPSRO(ZJOGPSRO,lcolumnhr,lobsSpaceData)
C
C        GPS - GROUND-BASED ZENITH DELAY
C-------------------------------
C
      ZJOGPSGB=0.0D0
      CALL SETERRGPSGB(lobsSpaceData,lgpdata)
      if (lgpdata) CALL DOBSGPSGB(ZJOGPSGB,lcolumnhr,lobsSpaceData)
c
      call tmg_stop(48)
c
c
C=======================================================================
      ZJO =  ZJORAOB + ZJOAIREP + ZJOSATWIND +
     $     ZJOSURFC + ZJOTOV + ZJOPROF + ZJOGPSRO + ZJOGPSGB
C=======================================================================

      write(*,*) 'Cost function values for this MPI task:'
      write(*,'(a15,f23.16)') 'JORAOB   = ',ZJORAOB
      write(*,'(a15,f23.16)') 'JOAIREP  = ',ZJOAIREP
      write(*,'(a15,f23.16)') 'JOSURFC  = ',ZJOSURFC
      write(*,'(a15,f23.16)') 'JOSFCSF  = ',ZJOSFCSF
      write(*,'(a15,f23.16)') 'JOSFCUA  = ',ZJOSFCUA
      write(*,'(a15,f23.16)') 'JOSFCSC  = ',ZJOSFCSC
      write(*,'(a15,f23.16)') 'JOSFCGP  = ',ZJOSFCGP
      write(*,'(a15,f23.16)') 'JOTOV    = ',ZJOTOV
      write(*,'(a15,f23.16)') 'JOSATWIND= ',ZJOSATWIND
      write(*,'(a15,f23.16)') 'JOPROF   = ',ZJOPROF
      write(*,'(a15,f23.16)') 'JOGPSRO  = ',ZJOGPSRO
      write(*,'(a15,f23.16)') 'JOGPSGB  = ',ZJOGPSGB
      write(*,'(a15,f23.16)') 'Total Jo = ',ZJO

      call rpn_comm_allreduce(ZJORAOB,ZJORAOB,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJOAIREP,ZJOAIREP,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJOSURFC,ZJOSURFC,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJOSFCSF,ZJOSFCSF,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJOSFCUA,ZJOSFCUA,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJOSFCSC,ZJOSFCSC,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJOSFCGP,ZJOSFCGP,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJOTOV,ZJOTOV,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJOSATWIND,ZJOSATWIND,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJOPROF,ZJOPROF,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJOGPSRO,ZJOGPSRO,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJOGPSGB,ZJOGPSGB,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)
      call rpn_comm_allreduce(ZJO,ZJO,1,"MPI_DOUBLE_PRECISION","MPI_SUM","GRID",ierr)

      write(*,*) 'Cost function values summed for all MPI tasks:'
      write(*,'(a15,f23.16)') 'JORAOB   = ',ZJORAOB
      write(*,'(a15,f23.16)') 'JOAIREP  = ',ZJOAIREP
      write(*,'(a15,f23.16)') 'JOSURFC  = ',ZJOSURFC
      write(*,'(a15,f23.16)') 'JOSFCSF  = ',ZJOSFCSF
      write(*,'(a15,f23.16)') 'JOSFCUA  = ',ZJOSFCUA
      write(*,'(a15,f23.16)') 'JOSFCSC  = ',ZJOSFCSC
      write(*,'(a15,f23.16)') 'JOSFCGP  = ',ZJOSFCGP
      write(*,'(a15,f23.16)') 'JOTOV    = ',ZJOTOV
      write(*,'(a15,f23.16)') 'JOSATWIND= ',ZJOSATWIND
      write(*,'(a15,f23.16)') 'JOPROF   = ',ZJOPROF
      write(*,'(a15,f23.16)') 'JOGPSRO  = ',ZJOGPSRO
      write(*,'(a15,f23.16)') 'JOGPSGB  = ',ZJOGPSGB
      write(*,'(a15,f23.16)') 'Total Jo = ',ZJO
c
c     Find interpolation layer in model profiles 
c
      CALL VOBSLYRS(lcolumng,lobsSpaceData)
c
      IF (min_lvarqc) THEN
        CALL SUASYM2(lobsSpaceData)
      endif
c
      write(*,*) 'PRDATABIN: After filtering done in SUINNOV'
      call prdatabin(lobsSpaceData,tim_nstepobs)

      RETURN
      END
