!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------

!--------------------------------------------------------------------------
!! *Purpose*: Adjoint of filling tangent linear profiles structure by interpolating 
!!            contents of columnData to RTTOV space
!!
!! @author j. halle *cmda/aes  april 21, 2005
!
!revision 001  : j. halle  *cmda/smc  march 2007
!                    -fix zvlev for hybrid coordinate
!revision 002  : s. macpherson  nov 2012
!                  - remove #include "comtovst.cdk"
!
!--------------------------------------------------------------------------
subroutine tovs_fill_profiles_ad(column,columng)
  use MathPhysConstants_mod
  use tovs_nl_mod
  use tovs_lin_mod
  use columnData_mod
  use obsSpaceData_mod
  use tovs_extrap_mod
  use rttov_const ,only : q_mixratio_to_ppmv
  use presProfileOperators_mod
  use utilities_mod
  implicit none

  type(struct_columnData) :: column,columng

  type(struct_vco), pointer :: vco_anl
  integer, allocatable :: iptobs    (:) 
  integer, allocatable :: iptobscma (:) 

  integer :: alloc_status(40)
  logical :: diagTtop,TopAt10hPa
  integer :: omp_get_num_threads, nthreads
  integer :: istride, ilen, imodulo
  integer :: nlevels,nobmax
  integer :: j, i, krtid, jf, iobs, jj, stat
  integer :: ilowlvl_T,ilowlvl_M,knpf,jo,nlv_M,nlv_T
  integer :: jk, jn, jl
  integer :: status, Vcode

  real*8, allocatable :: to_ad    (:,:)
  real*8, allocatable :: lqo_ad   (:,:)
  real*8, allocatable :: toext_ad (:,:)
  real*8, allocatable :: qoext_ad (:,:)
  real*8, allocatable :: zvlev    (:,:)
  real*8, allocatable :: dPdPs    (:,:)
  real*8, allocatable :: zt_ad    (:,:)
  real*8, allocatable :: zlq_ad   (:,:)
  real*8, allocatable :: zt       (:,:)
  real*8, allocatable :: zlq      (:,:)
  real*8, allocatable :: qoext    (:,:)
  real*8, allocatable :: zps_ad   (:)
  real*8, allocatable :: xpres    (:)

  real*8 :: zptop, zptopmbs

  real*8, pointer :: uu_column(:),vv_column(:),tt_column(:),hu_column(:),ps_column(:),tg_column(:)
  real(8), pointer :: TTb(:), HUb(:), Pres(:)

  if(NOBTOV.eq.0) return    ! exit if there are not tovs data


  !     1.    Set index for model's lowest level and model top
  !     .     ------------------------------------------------


  nlv_M = col_getNumLev(columng,'MM')
  nlv_T = col_getNumLev(columng,'TH')

  if (  col_getPressure(columng,1,1,'TH') .lt. col_getPressure(columng,nlv_T,1,'TH') ) then
     ilowlvl_M = nlv_M
     ilowlvl_T = nlv_T
  else
     ilowlvl_M = 1
     ilowlvl_T = 1
  endif

  vco_anl => col_getVco(columng)
  status = vgd_get(vco_anl%vgrid,key='ig_1 - vertical coord code',value=Vcode)
  diagTtop = (Vcode.eq.5002)

  nlevels=coefs(1) %coef%  nlevels
  allocate (xpres(nlevels))
  xpres(1:nlevels) = coefs(1)% coef % ref_prfl_p(1:nlevels)

  ! find model level top, within 0.000001 mbs.
  zptop    = col_getPressure(columng,1,1,'TH')
  zptopmbs = zptop/100.d0
  zptopmbs = zptopmbs - 0.000001d0

  TopAt10hPa = ( abs( zptopmbs - 10.0d0 ) <= .1d0 )

  jpmotop = 1
  do jl = 2, nlevels
     if ( zptopmbs .ge. xpres(jl-1) .and.       &
          zptopmbs .lt. xpres(jl)        ) then
        jpmotop = jl
        exit
     endif
  enddo
  jpmolev = (nlevels-jpmotop+1)


  !     1.1   Number of threads and memory allocation
  !     .     ---------------------------------------

  !$omp parallel 
  nthreads = omp_get_num_threads()
  !$omp end parallel

  alloc_status(:) = 0
  allocate (iptobs   (jppf*nthreads)        ,stat= alloc_status(1) )
  allocate (iptobscma(jppf*nthreads)        ,stat= alloc_status(2) )
  allocate (to_ad    (jpmolev,jppf*nthreads),stat= alloc_status(3) )
  allocate (lqo_ad   (jpmolev,jppf*nthreads),stat= alloc_status(4) )
  allocate (toext_ad (nlevels,jppf*nthreads),stat= alloc_status(5) )
  allocate (qoext_ad (nlevels,jppf*nthreads),stat= alloc_status(6) )
  allocate (zvlev    (nlv_T,jppf*nthreads)  ,stat= alloc_status(7) )
  allocate (dPdPs    (nlv_T,jppf*nthreads)  ,stat= alloc_status(8) )
  allocate (zt_ad    (nlv_T,jppf*nthreads)  ,stat= alloc_status(9) )
  allocate (zlq_ad   (nlv_T,jppf*nthreads)  ,stat= alloc_status(10) )
  allocate (zt       (nlv_T,jppf*nthreads)  ,stat= alloc_status(11))
  allocate (zlq      (nlv_T,jppf*nthreads)  ,stat= alloc_status(12))
  allocate (qoext    (nlevels,jppf*nthreads),stat= alloc_status(13))

  allocate (zps_ad   (jppf*nthreads)        ,stat= alloc_status(14))

  if( any(alloc_status /= 0) ) then
     write(*,*) ' tovs_fill_profiles_ad : memory allocation error'
     call utl_abort('tovs_fill_profiles_ad     ')
  end if
  !
  !     2.  Adjoint of fill profiles structure
  !     .   ----------------------------------

  ! loop over all instruments
  binst: do krtid = 1, nsensors
     xpres(1:nlevels) = coefs(krtid)% coef % ref_prfl_p(1:nlevels)
     knpf = 0

     bb: do iobs = NOBTOV,1,-1
        if (lsensor(iobs)==krtid) then
           NOBMAX=iobs
           exit bb
        endif
     enddo bb

     ! loop over all obs.
     bobs: do iobs = 1, NOBTOV
        if (lsensor(iobs)/=krtid) cycle bobs
        jo = lobsno(iobs)

        knpf = knpf + 1

        TTb => col_getColumn(columng,jo,'TT')
        HUb => col_getColumn(columng,jo,'HU')
        Pres => col_getColumn(columng,jo,'PR','TH')
        do jl = 1, nlv_T
           zt   (jl,knpf) = TTb(jl)
           zlq  (jl,knpf) = HUb(jl)
           zvlev(jl,knpf) = Pres(jl) *MPC_MBAR_PER_PA_R8
           dPdPs(jl,knpf) = col_getPressureDeriv(columng,jl,jo,'TH')
        enddo

        ! Fix pour eviter probleme au toit avec GEM 4
        ! (grosse variabilite de la temperature au dernier niveau thermo due 
        !  a l'extrapolation utilisee)
        if (diagTtop) then
           zt   (1,knpf) =  zt   (2,knpf) + mesosphere_lapse_rate *  &
                log( col_getPressure(columng,1,jo,'TH') /  &
                col_getPressure(columng,2,jo,'TH') )
           zlq  (1,knpf) =  zlq  (2,knpf)
        endif

        iptobs   (knpf) = iobs
        iptobscma(knpf) = jo
        if ( knpf .le. 0                                    ) cycle bobs
        if ( knpf .ne. jppf*nthreads .and. iobs .ne. NOBMAX ) cycle bobs

        !     .  2.4  Adjoint of filling profiles_ad structure
        !     .       ----------------------------------------
        do j = 1, knpf
           qoext(:,j) =  profiles(iptobs(j)) % q(:) / q_mixratio_to_ppmv
        enddo

        do  j = 1 , knpf 
           ps_column => col_getColumn(column,iptobscma(j),'P0')
           tg_column => col_getColumn(column,iptobscma(j),'TG')
           tt_column => col_getColumn(column,iptobscma(j),'TT')
           hu_column => col_getColumn(column,iptobscma(j),'HU')
           uu_column => col_getColumn(column,iptobscma(j),'UU')
           vv_column => col_getColumn(column,iptobscma(j),'VV')

           toext_ad(:,j)      = profiles_ad(iptobs(j)) % t(:)
           qoext_ad(:,j)      = profiles_ad(iptobs(j)) % q(:) * q_mixratio_to_ppmv
           ps_column(1)       = profiles_ad(iptobs(j)) % s2m % p *MPC_MBAR_PER_PA_R8
           tg_column(1)       = profiles_ad(iptobs(j)) % skin % t
           tt_column(ilowlvl_T) = profiles_ad(iptobs(j)) % s2m % t
!!!        hu_column(ilowlvl_T) = qoext(ilowlvl_T,j) * profiles_ad(iptobs(j)) % s2m % q * q_mixratio_to_ppmv
!!!        hu_column(ilowlvl_T) = qoext(ilowlvl_T,j) * profiles_ad(iptobs(j)) % s2m % q 
           hu_column(ilowlvl_T) = 0.d0 
           uu_column(ilowlvl_M) = profiles_ad(iptobs(j)) % s2m % u
           vv_column(ilowlvl_M) = profiles_ad(iptobs(j)) % s2m % v
        end do

        !     .  2.3  Adjoint of extrapolation of humidity profile (kg/kg)
        !             above rlimlvhu (normally 300mbs or 70mbs)
        !     .  
        if ( TopAt10hPa ) then
           if ( ldbgtov ) then
              do jn = 1, knpf
                 write(*,*)'qoext_ad*1000 avant aexthum4    = '
                 write(*,9263)(qoext_ad(i,jn)*1000.d0,i=1,nlevels)
                 write(*,*)' '
              enddo
           endif
           call aexthum4 (knpf,nlevels,xpres(1:nlevels),qoext_ad,qoext)
           if ( ldbgtov ) then
              do jn = 1, knpf
                 write(*,*)'qoext_ad*1000 apres aexthum4    = '
                 write(*,9263)(qoext_ad(i,jn)*1000.d0,i=1,nlevels)
                 write(*,*)' '
              enddo
           endif
        endif

        ! adjoint of conversion lnq --> q
        lqo_ad(:,:) = 0.0d0
        do jn = 1, knpf
           do jk = 1, jpmolev
              lqo_ad(jk,jn) = qoext_ad(nlevels-jpmolev+jk,jn) * qoext(nlevels-jpmolev+jk,jn)
           enddo
        enddo

        !     .  2.2  Adjoint of extrapolation of temperature profile above 10mb
        !     .       ----------------------------------------------------------
        to_ad(:,:) = 0.0d0
        if ( .not. TopAt10hPa ) then
           do jn = 1, knpf
              to_ad(1:jpmolev,jn)=to_ad(1:jpmolev,jn)+toext_ad(jpmotop:nlevels,jn)
           enddo
        else
           call aextrap (to_ad,toext_ad,jpmolev,nlevels,knpf)
        endif

        !     .  2.1  Adjoint of vertical interpolation of model temperature and logarithm of
        !             specific humidity to pressure levels required by tovs rt model
        !     .       -----------------------------------------------------------------------

        zt_ad (:,:) = 0.0d0
        zlq_ad(:,:) = 0.0d0
        zps_ad(:)   = 0.0d0

        imodulo = mod(knpf,nthreads)
        if ( imodulo .eq. 0 ) then
           istride = max(1,(knpf/nthreads))
        else
           istride = max(1,(knpf/nthreads)+1)
        endif
        call tmg_start(75,'intavgad')
        !$omp parallel
        !$omp do private(jn,ilen)
        do jn=1,knpf,istride
           ilen = min (knpf-jn+1,istride)
           if ( ilen .gt. 0) then

              call ppo_intAvgAd(zvlev(:,jn:jn+ilen-1),dPdPs(:,jn:jn+ilen-1),zt_ad(:,jn:jn+ilen-1),zt(:,jn:jn+ilen-1), &
                   zps_ad(jn:jn+ilen-1),nlv_T,nlv_T,ilen, &
                   jpmolev,xpres(jpmotop:nlevels),to_ad(:,jn:jn+ilen-1))
              call ppo_intAvgAd(zvlev(:,jn:jn+ilen-1),dPdPs(:,jn:jn+ilen-1),zlq_ad(:,jn:jn+ilen-1),zlq(:,jn:jn+ilen-1), &
                   zps_ad(jn:jn+ilen-1),nlv_T,nlv_T,ilen, &
                   jpmolev,xpres(jpmotop:nlevels),lqo_ad(:,jn:jn+ilen-1))

           endif
        enddo
        !$omp end do
        !$omp end parallel
        call tmg_stop(75)

        ! Fix pour eviter probleme au toit avec GEM 4
        ! (grosse varibilite temperature au dernier niveau thermo due 
        !  a l'extrapolation utilisee)
        if ( diagTtop ) then
           do jn = 1, knpf
              zt_ad (1,jn) = 0.d0
              zlq_ad(1,jn) = 0.d0
           enddo
        endif

        !     .  2.1  Store adjoints in columnData object
        !     .       -----------------------------------

        do  jn = 1 , knpf 
           ps_column => col_getColumn(column,iptobscma(jn),'P0')
           tt_column => col_getColumn(column,iptobscma(jn),'TT')
           hu_column => col_getColumn(column,iptobscma(jn),'HU')

           ps_column(1) = ps_column(1) + zps_ad  (jn) * MPC_MBAR_PER_PA_R8
           do jl = 1, col_getNumLev(column,'TH')
              tt_column(jl) = tt_column(jl) + zt_ad  (jl,jn)
              hu_column(jl) = hu_column(jl) + zlq_ad (jl,jn)
           enddo
        enddo

        !    next bunch !

        knpf = 0

     enddo bobs

  enddo binst

  alloc_status(:) = 0
  deallocate (iptobs   ,stat= alloc_status(1) )
  deallocate (iptobscma,stat= alloc_status(2) )
  deallocate (to_ad    ,stat= alloc_status(3) )
  deallocate (lqo_ad   ,stat= alloc_status(4) )
  deallocate (toext_ad ,stat= alloc_status(5) )
  deallocate (qoext_ad ,stat= alloc_status(6) )
  deallocate (zvlev    ,stat= alloc_status(7) )
  deallocate (dPdPs    ,stat= alloc_status(8) )
  deallocate (zt_ad    ,stat= alloc_status(9) )
  deallocate (zlq_ad   ,stat= alloc_status(10) )
  deallocate (zt       ,stat= alloc_status(11))
  deallocate (zlq      ,stat= alloc_status(12))
  deallocate (qoext    ,stat= alloc_status(13))
  deallocate (zps_ad   ,stat= alloc_status(14))
  deallocate (xpres    ,stat= alloc_status(15))

  if( any(alloc_status /= 0) ) then
     write(*,*) ' tovs_fill_profiles_ad : memory deallocation error'
     call utl_abort('tovs_fill_profiles_ad        ')
  end if

9263 format(1x,10f8.4)


  !     3.  Close up
  !     .   --------

contains

  SUBROUTINE AEXTHUM4(KNPF,KLAPF,PPRES,PAV,PAV5)
    !
    !*****aexthum4* - adjoint of extrapolation of upper level humidity profile.
    !                (adapted from exthumad by J. Eyre)
    !
    !     purpose.
    !     --------
    !          ad of routine
    !          to extend mixing ratio profile into stratosphere in
    !          a reasonable way.
    !
    !**   interface.
    !     ----------
    !          *call* *aexthum4(knpf,klapf,ppres,pav,pav5)*
    !               *knpf*:  no. of profiles to be processed.
    !               *klapf*: length of atm. profiles.
    !               *ppres*: pressure levels of atm. profiles.
    !               *pav*:   ad of humidity profiles.
    !               *pav5*:  humidity profiles.
    !
    !     method.
    !     -------
    !          take top tropospheric mixing ratio (e.g. near 300 mb) and
    !          extrapolate with given fall off into lower stratosphere
    !          (e.g. to 70 mb).  constrain mixing ratio to be .ge. zwmin
    !          (e.g. 0.000003 kg/kg).   in upper strat, mixing ratio = zwmin.
    !
    !     externals.
    !     ----------
    !          none.
    !

    use MathPhysConstants_mod
    use obsFilter_mod
    IMPLICIT none
    !
    integer :: klapf,knpf
    REAL*8 PPRES(*),PAV(KLAPF,*), PAV5(KLAPF,*)
    !
    REAL*8, ALLOCATABLE :: ZPRES3(:)
    !
    real*8 ZP1,zwmix,zwb
    integer :: inlvw,j,jnpf,ierr
    DATA ZP1/70.0D0/         ! PRESS LIMITS (IN HPA) OF REGION
    !                              ! to be extrapolated
    !
    !     -----------------------------------------------------------------
    !
    !**        0. Dynamic memory allocation for temporary vectors
    !     .       -----------------------------------------------
    !
050 CONTINUE
    !
    ALLOCATE(ZPRES3(KLAPF))
    !
    !*         1.   extrapolate humidity profile.
    !               ----------- -------- -------
100 CONTINUE
    !
    !          find top level of given profile
    DO J=KLAPF,1,-1
       IF (PPRES(J).LT.FILT_RLIMLVHU) THEN
          INLVW=J
          GOTO 120
       ENDIF
    end do
    !
    !** Null extrapolation case
    !
    RETURN
    !
    !          constants defining p**3 fall off around tropopause
120 DO J=1,INLVW
       ZPRES3(J)=(PPRES(J)/PPRES(INLVW+1))**3
    end do
    !
    DO JNPF=1,KNPF
       ZWB=0.D0
       DO J=1,INLVW
          ZWMIX=PAV(J,JNPF)
          PAV(J,JNPF)=0.D0
          IF (PPRES(J).GE.ZP1) THEN
             IF (PAV5(J,JNPF).GT.MPC_MINIMUM_HU_R8) THEN
                ZWB=ZWB+ZWMIX*ZPRES3(J)
             ENDIF
          ENDIF
       end do
       PAV(INLVW+1,JNPF)=PAV(INLVW+1,JNPF)+ZWB
    end do
    !
    !*    2.  Deallocate memory
    !     .   -----------------
    !
200 CONTINUE
    !
    DEALLOCATE(ZPRES3)
    !
    !     -----------------------------------------------------------------
    !

  END SUBROUTINE AEXTHUM4

end subroutine tovs_fill_profiles_ad
